
AR2ISS_MainCTL_SW_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad30  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800afc8  0800afc8  0001afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b04c  0800b04c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b04c  0800b04c  0001b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b054  0800b054  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b054  0800b054  0001b054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b058  0800b058  0001b058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800b05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800b06c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800b0cc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b94  240000d0  0800b12c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000c64  0800b12c  00020c64  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00049c53  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006aa4  00000000  00000000  00069d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024e0  00000000  00000000  000707f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000022a8  00000000  00000000  00072cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000447d2  00000000  00000000  00074f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031976  00000000  00000000  000b9752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001b8d0b  00000000  00000000  000eb0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  002a3dd3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009ff8  00000000  00000000  002a3e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800afb0 	.word	0x0800afb0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800afb0 	.word	0x0800afb0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000728:	4b30      	ldr	r3, [pc, #192]	; (80007ec <MX_ADC1_Init+0xe8>)
 800072a:	4a31      	ldr	r2, [pc, #196]	; (80007f0 <MX_ADC1_Init+0xec>)
 800072c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000730:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_ADC1_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000744:	2204      	movs	r2, #4
 8000746:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000756:	2201      	movs	r2, #1
 8000758:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_ADC1_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ADC1_Init+0xe8>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_ADC1_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000788:	f002 f9ec 	bl	8002b64 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000792:	f000 fe15 	bl	80013c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_ADC1_Init+0xe8>)
 80007a2:	f002 ffff 	bl	80037a4 <HAL_ADCEx_MultiModeConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007ac:	f000 fe08 	bl	80013c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_ADC1_Init+0xf0>)
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2306      	movs	r3, #6
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c2:	2304      	movs	r3, #4
 80007c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_ADC1_Init+0xe8>)
 80007d4:	f002 fb66 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007de:	f000 fdef 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	240000ec 	.word	0x240000ec
 80007f0:	40022000 	.word	0x40022000
 80007f4:	08600004 	.word	0x08600004

080007f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0ba      	sub	sp, #232	; 0xe8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	22bc      	movs	r2, #188	; 0xbc
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f00a fbc1 	bl	800afa0 <memset>
  if(adcHandle->Instance==ADC1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a49      	ldr	r2, [pc, #292]	; (8000948 <HAL_ADC_MspInit+0x150>)
 8000824:	4293      	cmp	r3, r2
 8000826:	f040 808a 	bne.w	800093e <HAL_ADC_MspInit+0x146>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800082e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000834:	2381      	movs	r3, #129	; 0x81
 8000836:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 15;
 8000838:	230f      	movs	r3, #15
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f005 febc 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000866:	f000 fdab 	bl	80013c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <HAL_ADC_MspInit+0x154>)
 800086c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000870:	4a36      	ldr	r2, [pc, #216]	; (800094c <HAL_ADC_MspInit+0x154>)
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <HAL_ADC_MspInit+0x154>)
 800087c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b30      	ldr	r3, [pc, #192]	; (800094c <HAL_ADC_MspInit+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <HAL_ADC_MspInit+0x154>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <HAL_ADC_MspInit+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a27      	ldr	r2, [pc, #156]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a20      	ldr	r2, [pc, #128]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_INP15
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 80008e2:	2349      	movs	r3, #73	; 0x49
 80008e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	2303      	movs	r3, #3
 80008ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4815      	ldr	r0, [pc, #84]	; (8000950 <HAL_ADC_MspInit+0x158>)
 80008fc:	f004 f9e4 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000916:	4619      	mov	r1, r3
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <HAL_ADC_MspInit+0x15c>)
 800091a:	f004 f9d5 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800091e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000932:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_ADC_MspInit+0x160>)
 800093a:	f004 f9c5 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	37e8      	adds	r7, #232	; 0xe8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000
 800094c:	58024400 	.word	0x58024400
 8000950:	58020000 	.word	0x58020000
 8000954:	58020400 	.word	0x58020400
 8000958:	58021400 	.word	0x58021400

0800095c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2224      	movs	r2, #36	; 0x24
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f00a fb19 	bl	800afa0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_DAC1_Init+0x70>)
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_DAC1_Init+0x74>)
 8000972:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_DAC1_Init+0x70>)
 8000976:	f003 f8d6 	bl	8003b26 <HAL_DAC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000980:	f000 fd1e 	bl	80013c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_DAC1_Init+0x70>)
 80009a0:	f003 f8e4 	bl	8003b6c <HAL_DAC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 fd09 	bl	80013c0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2210      	movs	r2, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_DAC1_Init+0x70>)
 80009b6:	f003 f8d9 	bl	8003b6c <HAL_DAC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80009c0:	f000 fcfe 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000150 	.word	0x24000150
 80009d0:	40007400 	.word	0x40007400

080009d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <HAL_DAC_MspInit+0x80>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d129      	bne.n	8000a4a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 80009f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009fc:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 80009fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a32:	2330      	movs	r3, #48	; 0x30
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 8000a46:	f004 f93f 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40007400 	.word	0x40007400
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	58020000 	.word	0x58020000

08000a60 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_ETH_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	3302      	adds	r3, #2
 8000a82:	22e1      	movs	r2, #225	; 0xe1
 8000a84:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	3303      	adds	r3, #3
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	3305      	adds	r3, #5
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_ETH_Init+0x90>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_ETH_Init+0x90>)
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_ETH_Init+0x98>)
 8000aae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_ETH_Init+0x90>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_ETH_Init+0x9c>)
 8000ab4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_ETH_Init+0x90>)
 8000ab8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000abc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_ETH_Init+0x90>)
 8000ac0:	f003 f984 	bl	8003dcc <HAL_ETH_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fc79 	bl	80013c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ace:	2234      	movs	r2, #52	; 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ad4:	f00a fa64 	bl	800afa0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ada:	2221      	movs	r2, #33	; 0x21
 8000adc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ae0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	24000164 	.word	0x24000164
 8000af4:	40028000 	.word	0x40028000
 8000af8:	24000070 	.word	0x24000070
 8000afc:	24000010 	.word	0x24000010
 8000b00:	240001ec 	.word	0x240001ec

08000b04 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <HAL_ETH_MspInit+0x184>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f040 80ab 	bne.w	8000c7e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b28:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b2e:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b4c:	4a4f      	ldr	r2, [pc, #316]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6a:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bfa:	2332      	movs	r3, #50	; 0x32
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <HAL_ETH_MspInit+0x18c>)
 8000c16:	f004 f857 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c1a:	2386      	movs	r3, #134	; 0x86
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_ETH_MspInit+0x190>)
 8000c36:	f004 f847 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <HAL_ETH_MspInit+0x194>)
 8000c58:	f004 f836 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <HAL_ETH_MspInit+0x198>)
 8000c7a:	f004 f825 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40028000 	.word	0x40028000
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020000 	.word	0x58020000
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	58021800 	.word	0x58021800

08000ca0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000ca6:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <MX_FDCAN1_Init+0xc4>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d12:	2204      	movs	r2, #4
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d48:	2204      	movs	r2, #4
 8000d4a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d4e:	f003 fc53 	bl	80045f8 <HAL_FDCAN_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d58:	f000 fb32 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	24000220 	.word	0x24000220
 8000d64:	4000a000 	.word	0x4000a000

08000d68 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0b8      	sub	sp, #224	; 0xe0
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22bc      	movs	r2, #188	; 0xbc
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00a f909 	bl	800afa0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <HAL_FDCAN_MspInit+0xc0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d142      	bne.n	8000e1e <HAL_FDCAN_MspInit+0xb6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000da2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 fc15 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000db4:	f000 fb04 	bl	80013c0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_FDCAN_MspInit+0xc8>)
 8000e1a:	f003 ff55 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	37e0      	adds	r7, #224	; 0xe0
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	4000a000 	.word	0x4000a000
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58020c00 	.word	0x58020c00

08000e34 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b52      	ldr	r3, [pc, #328]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a50      	ldr	r2, [pc, #320]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a49      	ldr	r2, [pc, #292]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0320 	and.w	r3, r3, #32
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_GPIO_Init+0x160>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_Red_GPIO_Port, LED3_Red_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f40:	4815      	ldr	r0, [pc, #84]	; (8000f98 <MX_GPIO_Init+0x164>)
 8000f42:	f004 f871 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_Yellow_GPIO_Port, LED2_Yellow_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4814      	ldr	r0, [pc, #80]	; (8000f9c <MX_GPIO_Init+0x168>)
 8000f4c:	f004 f86c 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED3_Red_Pin;
 8000f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_Red_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_GPIO_Init+0x164>)
 8000f6a:	f003 fead 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Yellow_Pin;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_Yellow_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_GPIO_Init+0x168>)
 8000f86:	f003 fe9f 	bl	8004cc8 <HAL_GPIO_Init>

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	; 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	58021000 	.word	0x58021000

08000fa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_I2C1_Init+0x78>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_I2C1_Init+0x7c>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fdc:	f004 f886 	bl	80050ec <HAL_I2C_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fe6:	f000 f9eb 	bl	80013c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_I2C1_Init+0x74>)
 8000fee:	f004 f90d 	bl	800520c <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff8:	f000 f9e2 	bl	80013c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_I2C1_Init+0x74>)
 8001000:	f004 f94f 	bl	80052a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 f9d9 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	240002c0 	.word	0x240002c0
 8001018:	40005400 	.word	0x40005400
 800101c:	10707dbc 	.word	0x10707dbc

08001020 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C2_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <MX_I2C2_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_I2C2_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <MX_I2C2_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_I2C2_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_I2C2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C2_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C2_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_I2C2_Init+0x74>)
 800105c:	f004 f846 	bl	80050ec <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 f9ab 	bl	80013c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <MX_I2C2_Init+0x74>)
 800106e:	f004 f8cd 	bl	800520c <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 f9a2 	bl	80013c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_I2C2_Init+0x74>)
 8001080:	f004 f90f 	bl	80052a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 f999 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2400030c 	.word	0x2400030c
 8001098:	40005800 	.word	0x40005800
 800109c:	10707dbc 	.word	0x10707dbc

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	; 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	22bc      	movs	r2, #188	; 0xbc
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 ff6d 	bl	800afa0 <memset>
  if(i2cHandle->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <HAL_I2C_MspInit+0x150>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d143      	bne.n	8001158 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	2308      	movs	r3, #8
 80010d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fa7a 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010ea:	f000 f969 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a3f      	ldr	r2, [pc, #252]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800110c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001110:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001130:	4619      	mov	r1, r3
 8001132:	4831      	ldr	r0, [pc, #196]	; (80011f8 <HAL_I2C_MspInit+0x158>)
 8001134:	f003 fdc8 	bl	8004cc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 800114a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001156:	e047      	b.n	80011e8 <HAL_I2C_MspInit+0x148>
  else if(i2cHandle->Instance==I2C2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <HAL_I2C_MspInit+0x15c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d142      	bne.n	80011e8 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001162:	2308      	movs	r3, #8
 8001164:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4618      	mov	r0, r3
 8001172:	f005 fa31 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 800117c:	f000 f920 	bl	80013c0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800119e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011b8:	2304      	movs	r3, #4
 80011ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <HAL_I2C_MspInit+0x158>)
 80011c6:	f003 fd7f 	bl	8004cc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 80011cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 80011d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_I2C_MspInit+0x154>)
 80011dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
}
 80011e8:	bf00      	nop
 80011ea:	37e8      	adds	r7, #232	; 0xe8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40005400 	.word	0x40005400
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020400 	.word	0x58020400
 80011fc:	40005800 	.word	0x40005800

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120a:	607b      	str	r3, [r7, #4]
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f001 f9fc 	bl	8002608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f84c 	bl	80012ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <main+0xa4>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <main+0xa4>)
 800121c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <main+0xa4>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001232:	2000      	movs	r0, #0
 8001234:	f003 ff2c 	bl	8005090 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001238:	2100      	movs	r1, #0
 800123a:	2000      	movs	r0, #0
 800123c:	f003 ff42 	bl	80050c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001244:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f7ff fdf5 	bl	8000e34 <MX_GPIO_Init>
  MX_DAC1_Init();
 800124a:	f7ff fb87 	bl	800095c <MX_DAC1_Init>
  MX_ETH_Init();
 800124e:	f7ff fc07 	bl	8000a60 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8001252:	f7ff fd25 	bl	8000ca0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8001256:	f7ff fea3 	bl	8000fa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800125a:	f7ff fee1 	bl	8001020 <MX_I2C2_Init>
//  MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 800125e:	f000 f8b5 	bl	80013cc <MX_SPI2_Init>
  MX_SWPMI1_Init();
 8001262:	f000 fab5 	bl	80017d0 <MX_SWPMI1_Init>
  MX_TIM1_Init();
 8001266:	f000 fb35 	bl	80018d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 800126a:	f000 fc4d 	bl	8001b08 <MX_TIM4_Init>
  MX_UART7_Init();
 800126e:	f000 fdb5 	bl	8001ddc <MX_UART7_Init>
  MX_USART2_UART_Init();
 8001272:	f000 fe4b 	bl	8001f0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001276:	f000 fe95 	bl	8001fa4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800127a:	f000 fedf 	bl	800203c <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800127e:	f001 f8ed 	bl	800245c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001282:	f7ff fa3f 	bl	8000704 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001286:	f000 f8f7 	bl	8001478 <MX_SPI3_Init>
  MX_TIM2_Init();
 800128a:	f000 fbe3 	bl	8001a54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800128e:	f000 fdf1 	bl	8001e74 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_Yellow_GPIO_Port, LED2_Yellow_Pin);
 8001292:	2102      	movs	r1, #2
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <main+0xa8>)
 8001296:	f003 fee0 	bl	800505a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800129a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129e:	f001 fa45 	bl	800272c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_Yellow_GPIO_Port, LED2_Yellow_Pin);
 80012a2:	e7f6      	b.n	8001292 <main+0x92>
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58021000 	.word	0x58021000

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b09c      	sub	sp, #112	; 0x70
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	224c      	movs	r2, #76	; 0x4c
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f009 fe70 	bl	800afa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2220      	movs	r2, #32
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f009 fe6a 	bl	800afa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012cc:	2004      	movs	r0, #4
 80012ce:	f004 f97d 	bl	80055cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <SystemClock_Config+0x108>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <SystemClock_Config+0x108>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <SystemClock_Config+0x108>)
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <SystemClock_Config+0x10c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <SystemClock_Config+0x10c>)
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <SystemClock_Config+0x10c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001308:	bf00      	nop
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <SystemClock_Config+0x10c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001316:	d1f8      	bne.n	800130a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <SystemClock_Config+0x110>)
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	f023 0303 	bic.w	r3, r3, #3
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <SystemClock_Config+0x110>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001328:	2303      	movs	r3, #3
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800132c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001332:	2301      	movs	r3, #1
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001336:	2340      	movs	r3, #64	; 0x40
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	2302      	movs	r3, #2
 8001340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001346:	2318      	movs	r3, #24
 8001348:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800134e:	2304      	movs	r3, #4
 8001350:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001352:	2302      	movs	r3, #2
 8001354:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001356:	230c      	movs	r3, #12
 8001358:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800135a:	2300      	movs	r3, #0
 800135c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4618      	mov	r0, r3
 8001368:	f004 f99a 	bl	80056a0 <HAL_RCC_OscConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001372:	f000 f825 	bl	80013c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	233f      	movs	r3, #63	; 0x3f
 8001378:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2101      	movs	r1, #1
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fd90 	bl	8005ec0 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80013a6:	f000 f80b 	bl	80013c0 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3770      	adds	r7, #112	; 0x70
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58000400 	.word	0x58000400
 80013b8:	58024800 	.word	0x58024800
 80013bc:	58024400 	.word	0x58024400

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013d2:	4a28      	ldr	r2, [pc, #160]	; (8001474 <MX_SPI2_Init+0xa8>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80013de:	4b24      	ldr	r3, [pc, #144]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013e4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013e8:	2203      	movs	r2, #3
 80013ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_SPI2_Init+0xa4>)
 80013fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_SPI2_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_SPI2_Init+0xa4>)
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001428:	2200      	movs	r2, #0
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_SPI2_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <MX_SPI2_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_SPI2_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_SPI2_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_SPI2_Init+0xa4>)
 800145e:	f007 fa41 	bl	80088e4 <HAL_SPI_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001468:	f7ff ffaa 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24000358 	.word	0x24000358
 8001474:	40003800 	.word	0x40003800

08001478 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <MX_SPI3_Init+0xa4>)
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <MX_SPI3_Init+0xa8>)
 8001480:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <MX_SPI3_Init+0xa4>)
 8001484:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001488:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <MX_SPI3_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_SPI3_Init+0xa4>)
 8001492:	2203      	movs	r2, #3
 8001494:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_SPI3_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_SPI3_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <MX_SPI3_Init+0xa4>)
 80014a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_SPI3_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_SPI3_Init+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_SPI3_Init+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_SPI3_Init+0xa4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_SPI3_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_SPI3_Init+0xa4>)
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_SPI3_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_SPI3_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_SPI3_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_SPI3_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_SPI3_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_SPI3_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_SPI3_Init+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_SPI3_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_SPI3_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_SPI3_Init+0xa4>)
 8001508:	f007 f9ec 	bl	80088e4 <HAL_SPI_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001512:	f7ff ff55 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	240003e0 	.word	0x240003e0
 8001520:	40003c00 	.word	0x40003c00

08001524 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0bc      	sub	sp, #240	; 0xf0
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800153c:	f107 0320 	add.w	r3, r7, #32
 8001540:	22bc      	movs	r2, #188	; 0xbc
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f009 fd2b 	bl	800afa0 <memset>
  if(spiHandle->Instance==SPI2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6d      	ldr	r2, [pc, #436]	; (8001704 <HAL_SPI_MspInit+0x1e0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d167      	bne.n	8001624 <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800155a:	2300      	movs	r3, #0
 800155c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	4618      	mov	r0, r3
 8001564:	f005 f838 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800156e:	f7ff ff27 	bl	80013c0 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001578:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001582:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	4a5c      	ldr	r2, [pc, #368]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015be:	4b52      	ldr	r3, [pc, #328]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e6:	2305      	movs	r3, #5
 80015e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015f0:	4619      	mov	r1, r3
 80015f2:	4846      	ldr	r0, [pc, #280]	; (800170c <HAL_SPI_MspInit+0x1e8>)
 80015f4:	f003 fb68 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015f8:	2308      	movs	r3, #8
 80015fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001610:	2305      	movs	r3, #5
 8001612:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001616:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800161a:	4619      	mov	r1, r3
 800161c:	483c      	ldr	r0, [pc, #240]	; (8001710 <HAL_SPI_MspInit+0x1ec>)
 800161e:	f003 fb53 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001622:	e06b      	b.n	80016fc <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <HAL_SPI_MspInit+0x1f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d166      	bne.n	80016fc <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001634:	2300      	movs	r3, #0
 8001636:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f004 ffcb 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_SPI_MspInit+0x128>
      Error_Handler();
 8001648:	f7ff feba 	bl	80013c0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800164e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001658:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800165e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001670:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_SPI_MspInit+0x1e4>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016a6:	2304      	movs	r3, #4
 80016a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80016be:	2307      	movs	r3, #7
 80016c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c8:	4619      	mov	r1, r3
 80016ca:	4810      	ldr	r0, [pc, #64]	; (800170c <HAL_SPI_MspInit+0x1e8>)
 80016cc:	f003 fafc 	bl	8004cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016ea:	2306      	movs	r3, #6
 80016ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016f4:	4619      	mov	r1, r3
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <HAL_SPI_MspInit+0x1f4>)
 80016f8:	f003 fae6 	bl	8004cc8 <HAL_GPIO_Init>
}
 80016fc:	bf00      	nop
 80016fe:	37f0      	adds	r7, #240	; 0xf0
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40003800 	.word	0x40003800
 8001708:	58024400 	.word	0x58024400
 800170c:	58020400 	.word	0x58020400
 8001710:	58020c00 	.word	0x58020c00
 8001714:	40003c00 	.word	0x40003c00
 8001718:	58020800 	.word	0x58020800

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_MspInit+0x5c>)
 8001724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_MspInit+0x5c>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_MspInit+0x5c>)
 8001734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_MspInit+0x5c>)
 8001742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001746:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_MspInit+0x5c>)
 8001748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x5c>)
 8001752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 800175e:	2010      	movs	r0, #16
 8001760:	f001 f814 	bl	800278c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001764:	f001 f83a 	bl	80027dc <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001768:	2000      	movs	r0, #0
 800176a:	f001 f823 	bl	80027b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	58024400 	.word	0x58024400

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 ff90 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <MX_SWPMI1_Init>:

SWPMI_HandleTypeDef hswpmi1;

/* SWPMI1 init function */
void MX_SWPMI1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_SWPMI1_Init+0x38>)
 80017d6:	4a0d      	ldr	r2, [pc, #52]	; (800180c <MX_SWPMI1_Init+0x3c>)
 80017d8:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_SWPMI1_Init+0x38>)
 80017dc:	2202      	movs	r2, #2
 80017de:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 15;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_SWPMI1_Init+0x38>)
 80017e2:	220f      	movs	r2, #15
 80017e4:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_SWPMI1_Init+0x38>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_SWPMI1_Init+0x38>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_SWPMI1_Init+0x38>)
 80017f4:	f007 f993 	bl	8008b1e <HAL_SWPMI_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 80017fe:	f7ff fddf 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	24000468 	.word	0x24000468
 800180c:	40008800 	.word	0x40008800

08001810 <HAL_SWPMI_MspInit>:

void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* swpmiHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0b8      	sub	sp, #224	; 0xe0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	22bc      	movs	r2, #188	; 0xbc
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f009 fbb5 	bl	800afa0 <memset>
  if(swpmiHandle->Instance==SWPMI1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <HAL_SWPMI_MspInit+0xb8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d13f      	bne.n	80018c0 <HAL_SWPMI_MspInit+0xb0>
  /* USER CODE BEGIN SWPMI1_MspInit 0 */

  /* USER CODE END SWPMI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 8001840:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001844:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_D2PCLK1;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4618      	mov	r0, r3
 8001852:	f004 fec1 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 800185c:	f7ff fdb0 	bl	80013c0 <Error_Handler>
    }

    /* SWPMI1 clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_SWPMI_MspInit+0xbc>)
 8001862:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001866:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_SWPMI_MspInit+0xbc>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_SWPMI_MspInit+0xbc>)
 8001872:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_SWPMI_MspInit+0xbc>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_SWPMI_MspInit+0xbc>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_SWPMI_MspInit+0xbc>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    /**SWPMI1 GPIO Configuration
    PC6     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800189c:	2340      	movs	r3, #64	; 0x40
 800189e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018b8:	4619      	mov	r1, r3
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <HAL_SWPMI_MspInit+0xc0>)
 80018bc:	f003 fa04 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }
}
 80018c0:	bf00      	nop
 80018c2:	37e0      	adds	r7, #224	; 0xe0
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40008800 	.word	0x40008800
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020800 	.word	0x58020800

080018d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b09e      	sub	sp, #120	; 0x78
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018de:	2224      	movs	r2, #36	; 0x24
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f009 fb5c 	bl	800afa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	222c      	movs	r2, #44	; 0x2c
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f009 fb46 	bl	800afa0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001914:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001916:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <MX_TIM1_Init+0x17c>)
 8001918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800191a:	4b4c      	ldr	r3, [pc, #304]	; (8001a4c <MX_TIM1_Init+0x178>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001926:	4b49      	ldr	r3, [pc, #292]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <MX_TIM1_Init+0x178>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001940:	4842      	ldr	r0, [pc, #264]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001942:	f007 f998 	bl	8008c76 <HAL_TIM_PWM_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800194c:	f7ff fd38 	bl	80013c0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001950:	2301      	movs	r3, #1
 8001952:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001954:	2300      	movs	r3, #0
 8001956:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001958:	2301      	movs	r3, #1
 800195a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC1Filter = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	667b      	str	r3, [r7, #100]	; 0x64
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001964:	2300      	movs	r3, #0
 8001966:	66bb      	str	r3, [r7, #104]	; 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001968:	2301      	movs	r3, #1
 800196a:	66fb      	str	r3, [r7, #108]	; 0x6c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	673b      	str	r3, [r7, #112]	; 0x70
  sConfig.IC2Filter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001978:	4619      	mov	r1, r3
 800197a:	4834      	ldr	r0, [pc, #208]	; (8001a4c <MX_TIM1_Init+0x178>)
 800197c:	f007 f9d2 	bl	8008d24 <HAL_TIM_Encoder_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001986:	f7ff fd1b 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800199a:	4619      	mov	r1, r3
 800199c:	482b      	ldr	r0, [pc, #172]	; (8001a4c <MX_TIM1_Init+0x178>)
 800199e:	f007 fee9 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80019a8:	f7ff fd0a 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	2208      	movs	r2, #8
 80019ce:	4619      	mov	r1, r3
 80019d0:	481e      	ldr	r0, [pc, #120]	; (8001a4c <MX_TIM1_Init+0x178>)
 80019d2:	f007 fa57 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80019dc:	f7ff fcf0 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	220c      	movs	r2, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <MX_TIM1_Init+0x178>)
 80019ea:	f007 fa4b 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80019f4:	f7ff fce4 	bl	80013c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001a2e:	f007 ff29 	bl	8009884 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8001a38:	f7ff fcc2 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM1_Init+0x178>)
 8001a3e:	f000 f93f 	bl	8001cc0 <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3778      	adds	r7, #120	; 0x78
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	240004f0 	.word	0x240004f0
 8001a50:	40010000 	.word	0x40010000

08001a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001aa2:	f007 f8e8 	bl	8008c76 <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001aac:	f7ff fc88 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001ac0:	f007 fe58 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001aca:	f7ff fc79 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ace:	2360      	movs	r3, #96	; 0x60
 8001ad0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001ae6:	f007 f9cd 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001af0:	f7ff fc66 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MX_TIM2_Init+0xb0>)
 8001af6:	f000 f8e3 	bl	8001cc0 <HAL_TIM_MspPostInit>

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2400053c 	.word	0x2400053c

08001b08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b2e:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <MX_TIM4_Init+0xc8>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b52:	481e      	ldr	r0, [pc, #120]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b54:	f007 f88f 	bl	8008c76 <HAL_TIM_PWM_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001b5e:	f7ff fc2f 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4816      	ldr	r0, [pc, #88]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b72:	f007 fdff 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b7c:	f7ff fc20 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b80:	2360      	movs	r3, #96	; 0x60
 8001b82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b90:	463b      	mov	r3, r7
 8001b92:	2208      	movs	r2, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001b98:	f007 f974 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001ba2:	f7ff fc0d 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001bae:	f007 f969 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001bb8:	f7ff fc02 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM4_Init+0xc4>)
 8001bbe:	f000 f87f 	bl	8001cc0 <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	; 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	240004a4 	.word	0x240004a4
 8001bd0:	40000800 	.word	0x40000800

08001bd4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2f      	ldr	r2, [pc, #188]	; (8001cb0 <HAL_TIM_PWM_MspInit+0xdc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d12f      	bne.n	8001c56 <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfc:	4a2d      	ldr	r2, [pc, #180]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1a:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001c32:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	481a      	ldr	r0, [pc, #104]	; (8001cb8 <HAL_TIM_PWM_MspInit+0xe4>)
 8001c50:	f003 f83a 	bl	8004cc8 <HAL_GPIO_Init>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c54:	e028      	b.n	8001ca8 <HAL_TIM_PWM_MspInit+0xd4>
  else if(tim_pwmHandle->Instance==TIM2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d10f      	bne.n	8001c80 <HAL_TIM_PWM_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
}
 8001c7e:	e013      	b.n	8001ca8 <HAL_TIM_PWM_MspInit+0xd4>
  else if(tim_pwmHandle->Instance==TIM4)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_TIM_PWM_MspInit+0xe8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10e      	bne.n	8001ca8 <HAL_TIM_PWM_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c90:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_TIM_PWM_MspInit+0xe0>)
 8001c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3730      	adds	r7, #48	; 0x30
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	58021000 	.word	0x58021000
 8001cbc:	40000800 	.word	0x40000800

08001cc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_TIM_MspPostInit+0x104>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d120      	bne.n	8001d24 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	4a37      	ldr	r2, [pc, #220]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001d00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482b      	ldr	r0, [pc, #172]	; (8001dcc <HAL_TIM_MspPostInit+0x10c>)
 8001d1e:	f002 ffd3 	bl	8004cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d22:	e04a      	b.n	8001dba <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d120      	bne.n	8001d70 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3e:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 8001d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <HAL_TIM_MspPostInit+0x110>)
 8001d6a:	f002 ffad 	bl	8004cc8 <HAL_GPIO_Init>
}
 8001d6e:	e024      	b.n	8001dba <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM4)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_TIM_MspPostInit+0x114>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d11f      	bne.n	8001dba <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_TIM_MspPostInit+0x108>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001daa:	2302      	movs	r3, #2
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <HAL_TIM_MspPostInit+0x118>)
 8001db6:	f002 ff87 	bl	8004cc8 <HAL_GPIO_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58021000 	.word	0x58021000
 8001dd0:	58020000 	.word	0x58020000
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	58020c00 	.word	0x58020c00

08001ddc <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <MX_UART7_Init+0x90>)
 8001de2:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <MX_UART7_Init+0x94>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <MX_UART7_Init+0x90>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <MX_UART7_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_UART7_Init+0x90>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_UART7_Init+0x90>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001e24:	4811      	ldr	r0, [pc, #68]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e26:	f007 fdab 	bl	8009980 <HAL_UART_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001e30:	f7ff fac6 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e34:	2100      	movs	r1, #0
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e38:	f008 fcf8 	bl	800a82c <HAL_UARTEx_SetTxFifoThreshold>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001e42:	f7ff fabd 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e46:	2100      	movs	r1, #0
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e4a:	f008 fd2d 	bl	800a8a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001e54:	f7ff fab4 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_UART7_Init+0x90>)
 8001e5a:	f008 fcae 	bl	800a7ba <HAL_UARTEx_DisableFifoMode>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001e64:	f7ff faac 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	24000588 	.word	0x24000588
 8001e70:	40007800 	.word	0x40007800

08001e74 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001e7a:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <MX_USART1_UART_Init+0x94>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ebc:	4811      	ldr	r0, [pc, #68]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001ebe:	f007 fd5f 	bl	8009980 <HAL_UART_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ec8:	f7ff fa7a 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ecc:	2100      	movs	r1, #0
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001ed0:	f008 fcac 	bl	800a82c <HAL_UARTEx_SetTxFifoThreshold>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eda:	f7ff fa71 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4808      	ldr	r0, [pc, #32]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001ee2:	f008 fce1 	bl	800a8a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001eec:	f7ff fa68 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MX_USART1_UART_Init+0x90>)
 8001ef2:	f008 fc62 	bl	800a7ba <HAL_UARTEx_DisableFifoMode>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001efc:	f7ff fa60 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	240006a8 	.word	0x240006a8
 8001f08:	40011000 	.word	0x40011000

08001f0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f12:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <MX_USART2_UART_Init+0x94>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f56:	f007 fd13 	bl	8009980 <HAL_UART_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f60:	f7ff fa2e 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f64:	2100      	movs	r1, #0
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f68:	f008 fc60 	bl	800a82c <HAL_UARTEx_SetTxFifoThreshold>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f72:	f7ff fa25 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f7a:	f008 fc95 	bl	800a8a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f84:	f7ff fa1c 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_USART2_UART_Init+0x90>)
 8001f8a:	f008 fc16 	bl	800a7ba <HAL_UARTEx_DisableFifoMode>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f94:	f7ff fa14 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	240007c8 	.word	0x240007c8
 8001fa0:	40004400 	.word	0x40004400

08001fa4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <MX_USART3_UART_Init+0x94>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fec:	4811      	ldr	r0, [pc, #68]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fee:	f007 fcc7 	bl	8009980 <HAL_UART_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ff8:	f7ff f9e2 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	480d      	ldr	r0, [pc, #52]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8002000:	f008 fc14 	bl	800a82c <HAL_UARTEx_SetTxFifoThreshold>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800200a:	f7ff f9d9 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8002012:	f008 fc49 	bl	800a8a8 <HAL_UARTEx_SetRxFifoThreshold>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800201c:	f7ff f9d0 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8002022:	f008 fbca 	bl	800a7ba <HAL_UARTEx_DisableFifoMode>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800202c:	f7ff f9c8 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	24000618 	.word	0x24000618
 8002038:	40004800 	.word	0x40004800

0800203c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <MX_USART6_UART_Init+0x94>)
 8002044:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <MX_USART6_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <MX_USART6_UART_Init+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_USART6_UART_Init+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002084:	4811      	ldr	r0, [pc, #68]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002086:	f007 fc7b 	bl	8009980 <HAL_UART_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002090:	f7ff f996 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002094:	2100      	movs	r1, #0
 8002096:	480d      	ldr	r0, [pc, #52]	; (80020cc <MX_USART6_UART_Init+0x90>)
 8002098:	f008 fbc8 	bl	800a82c <HAL_UARTEx_SetTxFifoThreshold>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80020a2:	f7ff f98d 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4808      	ldr	r0, [pc, #32]	; (80020cc <MX_USART6_UART_Init+0x90>)
 80020aa:	f008 fbfd 	bl	800a8a8 <HAL_UARTEx_SetRxFifoThreshold>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80020b4:	f7ff f984 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_USART6_UART_Init+0x90>)
 80020ba:	f008 fb7e 	bl	800a7ba <HAL_UARTEx_DisableFifoMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80020c4:	f7ff f97c 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	24000738 	.word	0x24000738
 80020d0:	40011400 	.word	0x40011400

080020d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0c2      	sub	sp, #264	; 0x108
 80020d8:	af00      	add	r7, sp, #0
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f2:	22bc      	movs	r2, #188	; 0xbc
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f008 ff52 	bl	800afa0 <memset>
  if(uartHandle->Instance==UART7)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4acb      	ldr	r2, [pc, #812]	; (8002430 <HAL_UART_MspInit+0x35c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d143      	bne.n	8002190 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002108:	2302      	movs	r3, #2
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002112:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fa5e 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 8002122:	f7ff f94d 	bl	80013c0 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002126:	4bc3      	ldr	r3, [pc, #780]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212c:	4ac1      	ldr	r2, [pc, #772]	; (8002434 <HAL_UART_MspInit+0x360>)
 800212e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002136:	4bbf      	ldr	r3, [pc, #764]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002144:	4bbb      	ldr	r3, [pc, #748]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	4aba      	ldr	r2, [pc, #744]	; (8002434 <HAL_UART_MspInit+0x360>)
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002154:	4bb7      	ldr	r3, [pc, #732]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002162:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002166:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800217c:	2307      	movs	r3, #7
 800217e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002182:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002186:	4619      	mov	r1, r3
 8002188:	48ab      	ldr	r0, [pc, #684]	; (8002438 <HAL_UART_MspInit+0x364>)
 800218a:	f002 fd9d 	bl	8004cc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800218e:	e149      	b.n	8002424 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART1)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4aa9      	ldr	r2, [pc, #676]	; (800243c <HAL_UART_MspInit+0x368>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d167      	bne.n	800226c <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800219c:	2301      	movs	r3, #1
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fa14 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_UART_MspInit+0xe6>
      Error_Handler();
 80021b6:	f7ff f903 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ba:	4b9e      	ldr	r3, [pc, #632]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c0:	4a9c      	ldr	r2, [pc, #624]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ca:	4b9a      	ldr	r3, [pc, #616]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d8:	4b96      	ldr	r3, [pc, #600]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021de:	4a95      	ldr	r2, [pc, #596]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e8:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b8f      	ldr	r3, [pc, #572]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fc:	4a8d      	ldr	r2, [pc, #564]	; (8002434 <HAL_UART_MspInit+0x360>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002206:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002218:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222e:	2307      	movs	r3, #7
 8002230:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002238:	4619      	mov	r1, r3
 800223a:	4881      	ldr	r0, [pc, #516]	; (8002440 <HAL_UART_MspInit+0x36c>)
 800223c:	f002 fd44 	bl	8004cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002258:	2307      	movs	r3, #7
 800225a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002262:	4619      	mov	r1, r3
 8002264:	4877      	ldr	r0, [pc, #476]	; (8002444 <HAL_UART_MspInit+0x370>)
 8002266:	f002 fd2f 	bl	8004cc8 <HAL_GPIO_Init>
}
 800226a:	e0db      	b.n	8002424 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART2)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_UART_MspInit+0x374>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d142      	bne.n	80022fe <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002278:	2302      	movs	r3, #2
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002286:	4618      	mov	r0, r3
 8002288:	f004 f9a6 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8002292:	f7ff f895 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800229c:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_UART_MspInit+0x360>)
 800229e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_UART_MspInit+0x360>)
 80022a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b4:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_UART_MspInit+0x360>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	4a5e      	ldr	r2, [pc, #376]	; (8002434 <HAL_UART_MspInit+0x360>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c4:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <HAL_UART_MspInit+0x360>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022d2:	2360      	movs	r3, #96	; 0x60
 80022d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ea:	2307      	movs	r3, #7
 80022ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4855      	ldr	r0, [pc, #340]	; (800244c <HAL_UART_MspInit+0x378>)
 80022f8:	f002 fce6 	bl	8004cc8 <HAL_GPIO_Init>
}
 80022fc:	e092      	b.n	8002424 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART3)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_UART_MspInit+0x37c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d143      	bne.n	8002392 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800230a:	2302      	movs	r3, #2
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002318:	4618      	mov	r0, r3
 800231a:	f004 f95d 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8002324:	f7ff f84c 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_UART_MspInit+0x360>)
 800232a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800232e:	4a41      	ldr	r2, [pc, #260]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002338:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <HAL_UART_MspInit+0x360>)
 800233a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	4a39      	ldr	r2, [pc, #228]	; (8002434 <HAL_UART_MspInit+0x360>)
 800234e:	f043 0308 	orr.w	r3, r3, #8
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002356:	4b37      	ldr	r3, [pc, #220]	; (8002434 <HAL_UART_MspInit+0x360>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002364:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002368:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800237e:	2307      	movs	r3, #7
 8002380:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002384:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002388:	4619      	mov	r1, r3
 800238a:	4830      	ldr	r0, [pc, #192]	; (800244c <HAL_UART_MspInit+0x378>)
 800238c:	f002 fc9c 	bl	8004cc8 <HAL_GPIO_Init>
}
 8002390:	e048      	b.n	8002424 <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART6)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2e      	ldr	r2, [pc, #184]	; (8002454 <HAL_UART_MspInit+0x380>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d142      	bne.n	8002424 <HAL_UART_MspInit+0x350>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800239e:	2301      	movs	r3, #1
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 f913 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_MspInit+0x2e8>
      Error_Handler();
 80023b8:	f7ff f802 	bl	80013c0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_UART_MspInit+0x360>)
 80023be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_UART_MspInit+0x360>)
 80023c4:	f043 0320 	orr.w	r3, r3, #32
 80023c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_UART_MspInit+0x360>)
 80023ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_UART_MspInit+0x360>)
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <HAL_UART_MspInit+0x360>)
 80023e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_UART_MspInit+0x360>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80023f8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80023fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002412:	2307      	movs	r3, #7
 8002414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002418:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800241c:	4619      	mov	r1, r3
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <HAL_UART_MspInit+0x384>)
 8002420:	f002 fc52 	bl	8004cc8 <HAL_GPIO_Init>
}
 8002424:	bf00      	nop
 8002426:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40007800 	.word	0x40007800
 8002434:	58024400 	.word	0x58024400
 8002438:	58021000 	.word	0x58021000
 800243c:	40011000 	.word	0x40011000
 8002440:	58020000 	.word	0x58020000
 8002444:	58020400 	.word	0x58020400
 8002448:	40004400 	.word	0x40004400
 800244c:	58020c00 	.word	0x58020c00
 8002450:	40004800 	.word	0x40004800
 8002454:	40011400 	.word	0x40011400
 8002458:	58021800 	.word	0x58021800

0800245c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002464:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002468:	2209      	movs	r2, #9
 800246a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800246e:	2202      	movs	r2, #2
 8002470:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800247a:	2202      	movs	r2, #2
 800247c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002492:	2201      	movs	r2, #1
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002498:	2201      	movs	r2, #1
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024a4:	f002 ff49 	bl	800533a <HAL_PCD_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80024ae:	f7fe ff87 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	24000858 	.word	0x24000858
 80024bc:	40080000 	.word	0x40080000

080024c0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0b8      	sub	sp, #224	; 0xe0
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	22bc      	movs	r2, #188	; 0xbc
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f008 fd5d 	bl	800afa0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <HAL_PCD_MspInit+0xe8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d156      	bne.n	800259e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80024f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f004 f868 	bl	80065d8 <HAL_RCCEx_PeriphCLKConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800250e:	f7fe ff57 	bl	80013c0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002512:	f003 f8b5 	bl	8005680 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_PCD_MspInit+0xec>)
 8002518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_PCD_MspInit+0xec>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_PCD_MspInit+0xec>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002534:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800254e:	230a      	movs	r3, #10
 8002550:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002558:	4619      	mov	r1, r3
 800255a:	4815      	ldr	r0, [pc, #84]	; (80025b0 <HAL_PCD_MspInit+0xf0>)
 800255c:	f002 fbb4 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <HAL_PCD_MspInit+0xf0>)
 800257c:	f002 fba4 	bl	8004cc8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_PCD_MspInit+0xec>)
 8002582:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_PCD_MspInit+0xec>)
 8002588:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800258c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_PCD_MspInit+0xec>)
 8002592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800259e:	bf00      	nop
 80025a0:	37e0      	adds	r7, #224	; 0xe0
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40080000 	.word	0x40080000
 80025ac:	58024400 	.word	0x58024400
 80025b0:	58020000 	.word	0x58020000

080025b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025b8:	f7fe f80a 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025bc:	480c      	ldr	r0, [pc, #48]	; (80025f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025be:	490d      	ldr	r1, [pc, #52]	; (80025f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c4:	e002      	b.n	80025cc <LoopCopyDataInit>

080025c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ca:	3304      	adds	r3, #4

080025cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d0:	d3f9      	bcc.n	80025c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025d4:	4c0a      	ldr	r4, [pc, #40]	; (8002600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025d8:	e001      	b.n	80025de <LoopFillZerobss>

080025da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025dc:	3204      	adds	r2, #4

080025de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e0:	d3fb      	bcc.n	80025da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025e2:	f008 fcab 	bl	800af3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025e6:	f7fe fe0b 	bl	8001200 <main>
  bx  lr
 80025ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025ec:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80025f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025f4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80025f8:	0800b05c 	.word	0x0800b05c
  ldr r2, =_sbss
 80025fc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8002600:	24000c64 	.word	0x24000c64

08002604 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002604:	e7fe      	b.n	8002604 <ADC3_IRQHandler>
	...

08002608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260e:	2003      	movs	r0, #3
 8002610:	f001 fa58 	bl	8003ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002614:	f003 fe0a 	bl	800622c <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_Init+0x68>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	4913      	ldr	r1, [pc, #76]	; (8002674 <HAL_Init+0x6c>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_Init+0x68>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <HAL_Init+0x6c>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <HAL_Init+0x70>)
 800264a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_Init+0x74>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f814 	bl	8002680 <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e002      	b.n	8002668 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002662:	f7ff f85b 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024400 	.word	0x58024400
 8002674:	0800b014 	.word	0x0800b014
 8002678:	24000004 	.word	0x24000004
 800267c:	24000000 	.word	0x24000000

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_InitTick+0x60>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e021      	b.n	80026d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_InitTick+0x64>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_InitTick+0x60>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 fa2f 	bl	8003b0e <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f001 fa07 	bl	8003ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_InitTick+0x68>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2400000c 	.word	0x2400000c
 80026e4:	24000000 	.word	0x24000000
 80026e8:	24000008 	.word	0x24000008

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2400000c 	.word	0x2400000c
 8002710:	24000c60 	.word	0x24000c60

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	24000c60 	.word	0x24000c60

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2400000c 	.word	0x2400000c

08002774 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_GetREVID+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0c1b      	lsrs	r3, r3, #16
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	5c001000 	.word	0x5c001000

0800278c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800279c:	4904      	ldr	r1, [pc, #16]	; (80027b0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	58003c00 	.word	0x58003c00

080027b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 0202 	bic.w	r2, r3, #2
 80027c4:	4904      	ldr	r1, [pc, #16]	; (80027d8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	58003c00 	.word	0x58003c00

080027dc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027ee:	f7ff ff91 	bl	8002714 <HAL_GetTick>
 80027f2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80027f4:	e008      	b.n	8002808 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80027f6:	f7ff ff8d 	bl	8002714 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b0a      	cmp	r3, #10
 8002802:	d901      	bls.n	8002808 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	58003c00 	.word	0x58003c00

08002824 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002834:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	58000400 	.word	0x58000400

0800284c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	461a      	mov	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	611a      	str	r2, [r3, #16]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	431a      	orrs	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]
  }
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3330      	adds	r3, #48	; 0x30
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	211f      	movs	r1, #31
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 011f 	and.w	r1, r3, #31
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	431a      	orrs	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3314      	adds	r3, #20
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0e5b      	lsrs	r3, r3, #25
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	0d1b      	lsrs	r3, r3, #20
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2107      	movs	r1, #7
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0318 	and.w	r3, r3, #24
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a30:	40d9      	lsrs	r1, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	400b      	ands	r3, r1
 8002a36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	000fffff 	.word	0x000fffff

08002a54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6093      	str	r3, [r2, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	5fffffc0 	.word	0x5fffffc0

08002a78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8c:	d101      	bne.n	8002a92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	6fffffc0 	.word	0x6fffffc0

08002ac8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <LL_ADC_IsEnabled+0x18>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <LL_ADC_IsEnabled+0x1a>
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d101      	bne.n	8002b54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e18e      	b.n	8002e9c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fd fe33 	bl	80007f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff67 	bl	8002a78 <LL_ADC_IsDeepPowerDownEnabled>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff4d 	bl	8002a54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff82 	bl	8002ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff66 	bl	8002aa0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd4:	4b9a      	ldr	r3, [pc, #616]	; (8002e40 <HAL_ADC_Init+0x2dc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	4a9a      	ldr	r2, [pc, #616]	; (8002e44 <HAL_ADC_Init+0x2e0>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	3301      	adds	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002be6:	e002      	b.n	8002bee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f9      	bne.n	8002be8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff65 	bl	8002ac8 <LL_ADC_IsInternalRegulatorEnabled>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff76 	bl	8002b16 <LL_ADC_REG_IsConversionOngoing>
 8002c2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f040 8128 	bne.w	8002e8a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8124 	bne.w	8002e8a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c4a:	f043 0202 	orr.w	r2, r3, #2
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff4a 	bl	8002af0 <LL_ADC_IsEnabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d136      	bne.n	8002cd0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <HAL_ADC_Init+0x2e4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_ADC_Init+0x112>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a76      	ldr	r2, [pc, #472]	; (8002e4c <HAL_ADC_Init+0x2e8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10e      	bne.n	8002c94 <HAL_ADC_Init+0x130>
 8002c76:	4874      	ldr	r0, [pc, #464]	; (8002e48 <HAL_ADC_Init+0x2e4>)
 8002c78:	f7ff ff3a 	bl	8002af0 <LL_ADC_IsEnabled>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	4873      	ldr	r0, [pc, #460]	; (8002e4c <HAL_ADC_Init+0x2e8>)
 8002c80:	f7ff ff36 	bl	8002af0 <LL_ADC_IsEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4323      	orrs	r3, r4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e008      	b.n	8002ca6 <HAL_ADC_Init+0x142>
 8002c94:	486e      	ldr	r0, [pc, #440]	; (8002e50 <HAL_ADC_Init+0x2ec>)
 8002c96:	f7ff ff2b 	bl	8002af0 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d012      	beq.n	8002cd0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a66      	ldr	r2, [pc, #408]	; (8002e48 <HAL_ADC_Init+0x2e4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_ADC_Init+0x15a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a64      	ldr	r2, [pc, #400]	; (8002e4c <HAL_ADC_Init+0x2e8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x15e>
 8002cbe:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_ADC_Init+0x2f0>)
 8002cc0:	e000      	b.n	8002cc4 <HAL_ADC_Init+0x160>
 8002cc2:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_ADC_Init+0x2f4>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7ff fdbe 	bl	800284c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002cd0:	f7ff fd50 	bl	8002774 <HAL_GetREVID>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d914      	bls.n	8002d08 <HAL_ADC_Init+0x1a4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d110      	bne.n	8002d08 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7d5b      	ldrb	r3, [r3, #21]
 8002cea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cf0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cf6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7f1b      	ldrb	r3, [r3, #28]
 8002cfc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002cfe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d00:	f043 030c 	orr.w	r3, r3, #12
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e00d      	b.n	8002d24 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7d5b      	ldrb	r3, [r3, #21]
 8002d0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7f1b      	ldrb	r3, [r3, #28]
 8002d1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7f1b      	ldrb	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	045b      	lsls	r3, r3, #17
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_ADC_Init+0x2f8>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	69b9      	ldr	r1, [r7, #24]
 8002d66:	430b      	orrs	r3, r1
 8002d68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fed1 	bl	8002b16 <LL_ADC_REG_IsConversionOngoing>
 8002d74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fede 	bl	8002b3c <LL_ADC_INJ_IsConversionOngoing>
 8002d80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d14a      	bne.n	8002e1e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d147      	bne.n	8002e1e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7d1b      	ldrb	r3, [r3, #20]
 8002d92:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_ADC_Init+0x2fc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d11b      	bne.n	8002df2 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	4b27      	ldr	r3, [pc, #156]	; (8002e64 <HAL_ADC_Init+0x300>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	0411      	lsls	r1, r2, #16
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002de2:	430a      	orrs	r2, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	611a      	str	r2, [r3, #16]
 8002df0:	e007      	b.n	8002e02 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb93 	bl	8003544 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d120      	bne.n	8002e68 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f023 010f 	bic.w	r1, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3e:	e01b      	b.n	8002e78 <HAL_ADC_Init+0x314>
 8002e40:	24000000 	.word	0x24000000
 8002e44:	053e2d63 	.word	0x053e2d63
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022100 	.word	0x40022100
 8002e50:	58026000 	.word	0x58026000
 8002e54:	40022300 	.word	0x40022300
 8002e58:	58026300 	.word	0x58026300
 8002e5c:	fff0c003 	.word	0xfff0c003
 8002e60:	ffffbffc 	.word	0xffffbffc
 8002e64:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020f 	bic.w	r2, r2, #15
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f023 0303 	bic.w	r3, r3, #3
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
 8002e88:	e007      	b.n	8002e9a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3724      	adds	r7, #36	; 0x24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd90      	pop	{r4, r7, pc}

08002ea4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b0a1      	sub	sp, #132	; 0x84
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a9d      	ldr	r2, [pc, #628]	; (8003134 <HAL_ADC_ConfigChannel+0x290>)
 8002ebe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x2a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e321      	b.n	8003512 <HAL_ADC_ConfigChannel+0x66e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fe1b 	bl	8002b16 <LL_ADC_REG_IsConversionOngoing>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8306 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x62>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2201      	movs	r2, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	e016      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x90>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f16:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e003      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	69d1      	ldr	r1, [r2, #28]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7ff fd04 	bl	800295c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fddc 	bl	8002b16 <LL_ADC_REG_IsConversionOngoing>
 8002f5e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fde9 	bl	8002b3c <LL_ADC_INJ_IsConversionOngoing>
 8002f6a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80b3 	bne.w	80030da <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80af 	bne.w	80030da <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6819      	ldr	r1, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f7ff fd13 	bl	80029b4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f8e:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_ADC_ConfigChannel+0x294>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x110>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	e01d      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x14c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x136>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	e00a      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x14c>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d027      	beq.n	800304a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6919      	ldr	r1, [r3, #16]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003008:	f7ff fc54 	bl	80028b4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	7e5b      	ldrb	r3, [r3, #25]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x17e>
 800301c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003020:	e000      	b.n	8003024 <HAL_ADC_ConfigChannel+0x180>
 8003022:	2300      	movs	r3, #0
 8003024:	461a      	mov	r2, r3
 8003026:	f7ff fc7e 	bl	8002926 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6919      	ldr	r1, [r3, #16]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	7e1b      	ldrb	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x19c>
 800303a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800303e:	e000      	b.n	8003042 <HAL_ADC_ConfigChannel+0x19e>
 8003040:	2300      	movs	r3, #0
 8003042:	461a      	mov	r2, r3
 8003044:	f7ff fc56 	bl	80028f4 <LL_ADC_SetDataRightShift>
 8003048:	e047      	b.n	80030da <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	069b      	lsls	r3, r3, #26
 800305a:	429a      	cmp	r2, r3
 800305c:	d107      	bne.n	800306e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800306c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	069b      	lsls	r3, r3, #26
 800307e:	429a      	cmp	r2, r3
 8003080:	d107      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003090:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	069b      	lsls	r3, r3, #26
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d107      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030b4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	069b      	lsls	r3, r3, #26
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d107      	bne.n	80030da <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fd06 	bl	8002af0 <LL_ADC_IsEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 820d 	bne.w	8003506 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f7ff fc87 	bl	8002a0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_ADC_ConfigChannel+0x290>)
 8003104:	4293      	cmp	r3, r2
 8003106:	f040 8133 	bne.w	8003370 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003116:	2b00      	cmp	r3, #0
 8003118:	d110      	bne.n	800313c <HAL_ADC_ConfigChannel+0x298>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	0e9b      	lsrs	r3, r3, #26
 8003120:	3301      	adds	r3, #1
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b09      	cmp	r3, #9
 8003128:	bf94      	ite	ls
 800312a:	2301      	movls	r3, #1
 800312c:	2300      	movhi	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e01e      	b.n	8003170 <HAL_ADC_ConfigChannel+0x2cc>
 8003132:	bf00      	nop
 8003134:	47ff0000 	.word	0x47ff0000
 8003138:	5c001000 	.word	0x5c001000
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800314e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2b09      	cmp	r3, #9
 8003168:	bf94      	ite	ls
 800316a:	2301      	movls	r3, #1
 800316c:	2300      	movhi	r3, #0
 800316e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	2b00      	cmp	r3, #0
 8003172:	d079      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x2ec>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800318e:	e015      	b.n	80031bc <HAL_ADC_ConfigChannel+0x318>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80031a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80031ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x338>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	e017      	b.n	800320c <HAL_ADC_ConfigChannel+0x368>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80031ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e003      	b.n	8003200 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80031f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x38e>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	051b      	lsls	r3, r3, #20
 8003230:	e018      	b.n	8003264 <HAL_ADC_ConfigChannel+0x3c0>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e003      	b.n	8003256 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003264:	430b      	orrs	r3, r1
 8003266:	e07e      	b.n	8003366 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x3e0>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	3301      	adds	r3, #1
 800327c:	069b      	lsls	r3, r3, #26
 800327e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003282:	e015      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x40c>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	069b      	lsls	r3, r3, #26
 80032ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x42c>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	e017      	b.n	8003300 <HAL_ADC_ConfigChannel+0x45c>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	61bb      	str	r3, [r7, #24]
  return result;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	ea42 0103 	orr.w	r1, r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_ADC_ConfigChannel+0x488>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	3b1e      	subs	r3, #30
 8003324:	051b      	lsls	r3, r3, #20
 8003326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800332a:	e01b      	b.n	8003364 <HAL_ADC_ConfigChannel+0x4c0>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	60fb      	str	r3, [r7, #12]
  return result;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e003      	b.n	8003350 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	3b1e      	subs	r3, #30
 800335e:	051b      	lsls	r3, r3, #20
 8003360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003364:	430b      	orrs	r3, r1
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	4619      	mov	r1, r3
 800336c:	f7ff fb22 	bl	80029b4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f280 80c6 	bge.w	8003506 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_ADC_ConfigChannel+0x4ea>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_ADC_ConfigChannel+0x67c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x4ee>
 800338e:	4b65      	ldr	r3, [pc, #404]	; (8003524 <HAL_ADC_ConfigChannel+0x680>)
 8003390:	e000      	b.n	8003394 <HAL_ADC_ConfigChannel+0x4f0>
 8003392:	4b65      	ldr	r3, [pc, #404]	; (8003528 <HAL_ADC_ConfigChannel+0x684>)
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fa7f 	bl	8002898 <LL_ADC_GetCommonPathInternalCh>
 800339a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a5e      	ldr	r2, [pc, #376]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_ADC_ConfigChannel+0x50c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_ADC_ConfigChannel+0x67c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d10e      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x52a>
 80033b0:	485a      	ldr	r0, [pc, #360]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 80033b2:	f7ff fb9d 	bl	8002af0 <LL_ADC_IsEnabled>
 80033b6:	4604      	mov	r4, r0
 80033b8:	4859      	ldr	r0, [pc, #356]	; (8003520 <HAL_ADC_ConfigChannel+0x67c>)
 80033ba:	f7ff fb99 	bl	8002af0 <LL_ADC_IsEnabled>
 80033be:	4603      	mov	r3, r0
 80033c0:	4323      	orrs	r3, r4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e008      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x53c>
 80033ce:	4857      	ldr	r0, [pc, #348]	; (800352c <HAL_ADC_ConfigChannel+0x688>)
 80033d0:	f7ff fb8e 	bl	8002af0 <LL_ADC_IsEnabled>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d07d      	beq.n	80034e0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_ADC_ConfigChannel+0x68c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d130      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x5ac>
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d12b      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4b      	ldr	r2, [pc, #300]	; (800352c <HAL_ADC_ConfigChannel+0x688>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 8081 	bne.w	8003506 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a44      	ldr	r2, [pc, #272]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_ADC_ConfigChannel+0x574>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a43      	ldr	r2, [pc, #268]	; (8003520 <HAL_ADC_ConfigChannel+0x67c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x578>
 8003418:	4a42      	ldr	r2, [pc, #264]	; (8003524 <HAL_ADC_ConfigChannel+0x680>)
 800341a:	e000      	b.n	800341e <HAL_ADC_ConfigChannel+0x57a>
 800341c:	4a42      	ldr	r2, [pc, #264]	; (8003528 <HAL_ADC_ConfigChannel+0x684>)
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff fa23 	bl	8002872 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342c:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_ADC_ConfigChannel+0x690>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	4a41      	ldr	r2, [pc, #260]	; (8003538 <HAL_ADC_ConfigChannel+0x694>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003440:	e002      	b.n	8003448 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3b01      	subs	r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f9      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800344e:	e05a      	b.n	8003506 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a39      	ldr	r2, [pc, #228]	; (800353c <HAL_ADC_ConfigChannel+0x698>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d11e      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x5f4>
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d119      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <HAL_ADC_ConfigChannel+0x688>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d14b      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2a      	ldr	r2, [pc, #168]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x5de>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <HAL_ADC_ConfigChannel+0x67c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x5e2>
 8003482:	4a28      	ldr	r2, [pc, #160]	; (8003524 <HAL_ADC_ConfigChannel+0x680>)
 8003484:	e000      	b.n	8003488 <HAL_ADC_ConfigChannel+0x5e4>
 8003486:	4a28      	ldr	r2, [pc, #160]	; (8003528 <HAL_ADC_ConfigChannel+0x684>)
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7ff f9ee 	bl	8002872 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003496:	e036      	b.n	8003506 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_ADC_ConfigChannel+0x69c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d131      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x662>
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d12c      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_ADC_ConfigChannel+0x688>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d127      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_ADC_ConfigChannel+0x626>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_ADC_ConfigChannel+0x67c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x62a>
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_ADC_ConfigChannel+0x680>)
 80034cc:	e000      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x62c>
 80034ce:	4a16      	ldr	r2, [pc, #88]	; (8003528 <HAL_ADC_ConfigChannel+0x684>)
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f7ff f9ca 	bl	8002872 <LL_ADC_SetCommonPathInternalCh>
 80034de:	e012      	b.n	8003506 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80034f2:	e008      	b.n	8003506 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800350e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003512:	4618      	mov	r0, r3
 8003514:	3784      	adds	r7, #132	; 0x84
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	40022000 	.word	0x40022000
 8003520:	40022100 	.word	0x40022100
 8003524:	40022300 	.word	0x40022300
 8003528:	58026300 	.word	0x58026300
 800352c:	58026000 	.word	0x58026000
 8003530:	cb840000 	.word	0xcb840000
 8003534:	24000000 	.word	0x24000000
 8003538:	053e2d63 	.word	0x053e2d63
 800353c:	c7520000 	.word	0xc7520000
 8003540:	cfb80000 	.word	0xcfb80000

08003544 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a79      	ldr	r2, [pc, #484]	; (8003738 <ADC_ConfigureBoostMode+0x1f4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <ADC_ConfigureBoostMode+0x1c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a78      	ldr	r2, [pc, #480]	; (800373c <ADC_ConfigureBoostMode+0x1f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d109      	bne.n	8003574 <ADC_ConfigureBoostMode+0x30>
 8003560:	4b77      	ldr	r3, [pc, #476]	; (8003740 <ADC_ConfigureBoostMode+0x1fc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e008      	b.n	8003586 <ADC_ConfigureBoostMode+0x42>
 8003574:	4b73      	ldr	r3, [pc, #460]	; (8003744 <ADC_ConfigureBoostMode+0x200>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01c      	beq.n	80035c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800358a:	f002 ffc9 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 800358e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003598:	d010      	beq.n	80035bc <ADC_ConfigureBoostMode+0x78>
 800359a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800359e:	d871      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x140>
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d002      	beq.n	80035ac <ADC_ConfigureBoostMode+0x68>
 80035a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035aa:	d16b      	bne.n	8003684 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	60fb      	str	r3, [r7, #12]
        break;
 80035ba:	e066      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	60fb      	str	r3, [r7, #12]
        break;
 80035c2:	e062      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80035c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035c8:	f003 ff46 	bl	8007458 <HAL_RCCEx_GetPeriphCLKFreq>
 80035cc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035d6:	d051      	beq.n	800367c <ADC_ConfigureBoostMode+0x138>
 80035d8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035dc:	d854      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 80035de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035e2:	d047      	beq.n	8003674 <ADC_ConfigureBoostMode+0x130>
 80035e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035e8:	d84e      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 80035ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035ee:	d03d      	beq.n	800366c <ADC_ConfigureBoostMode+0x128>
 80035f0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035f4:	d848      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 80035f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fa:	d033      	beq.n	8003664 <ADC_ConfigureBoostMode+0x120>
 80035fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003600:	d842      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 8003602:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003606:	d029      	beq.n	800365c <ADC_ConfigureBoostMode+0x118>
 8003608:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800360c:	d83c      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 800360e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003612:	d01a      	beq.n	800364a <ADC_ConfigureBoostMode+0x106>
 8003614:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003618:	d836      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 800361a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800361e:	d014      	beq.n	800364a <ADC_ConfigureBoostMode+0x106>
 8003620:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003624:	d830      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 8003626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362a:	d00e      	beq.n	800364a <ADC_ConfigureBoostMode+0x106>
 800362c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003630:	d82a      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 8003632:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003636:	d008      	beq.n	800364a <ADC_ConfigureBoostMode+0x106>
 8003638:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800363c:	d824      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x144>
 800363e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003642:	d002      	beq.n	800364a <ADC_ConfigureBoostMode+0x106>
 8003644:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003648:	d11e      	bne.n	8003688 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0c9b      	lsrs	r3, r3, #18
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	fbb2 f3f3 	udiv	r3, r2, r3
 8003658:	60fb      	str	r3, [r7, #12]
        break;
 800365a:	e016      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	60fb      	str	r3, [r7, #12]
        break;
 8003662:	e012      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	60fb      	str	r3, [r7, #12]
        break;
 800366a:	e00e      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	60fb      	str	r3, [r7, #12]
        break;
 8003672:	e00a      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	09db      	lsrs	r3, r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
        break;
 800367a:	e006      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	60fb      	str	r3, [r7, #12]
        break;
 8003682:	e002      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
        break;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003688:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800368a:	f7ff f873 	bl	8002774 <HAL_GetREVID>
 800368e:	4603      	mov	r3, r0
 8003690:	f241 0203 	movw	r2, #4099	; 0x1003
 8003694:	4293      	cmp	r3, r2
 8003696:	d815      	bhi.n	80036c4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <ADC_ConfigureBoostMode+0x204>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d908      	bls.n	80036b2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036b0:	e03e      	b.n	8003730 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	e035      	b.n	8003730 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <ADC_ConfigureBoostMode+0x208>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d808      	bhi.n	80036e4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036e0:	609a      	str	r2, [r3, #8]
}
 80036e2:	e025      	b.n	8003730 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <ADC_ConfigureBoostMode+0x20c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d80a      	bhi.n	8003702 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	e016      	b.n	8003730 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <ADC_ConfigureBoostMode+0x210>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d80a      	bhi.n	8003720 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	609a      	str	r2, [r3, #8]
}
 800371e:	e007      	b.n	8003730 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40022000 	.word	0x40022000
 800373c:	40022100 	.word	0x40022100
 8003740:	40022300 	.word	0x40022300
 8003744:	58026300 	.word	0x58026300
 8003748:	01312d00 	.word	0x01312d00
 800374c:	005f5e10 	.word	0x005f5e10
 8003750:	00bebc20 	.word	0x00bebc20
 8003754:	017d7840 	.word	0x017d7840

08003758 <LL_ADC_IsEnabled>:
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <LL_ADC_IsEnabled+0x18>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <LL_ADC_IsEnabled+0x1a>
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_ADC_REG_IsConversionOngoing>:
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d101      	bne.n	8003796 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b09f      	sub	sp, #124	; 0x7c
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0be      	b.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5c      	ldr	r2, [pc, #368]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d102      	bne.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037dc:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	e001      	b.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e09d      	b.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ffb9 	bl	800377e <LL_ADC_REG_IsConversionOngoing>
 800380c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ffb3 	bl	800377e <LL_ADC_REG_IsConversionOngoing>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17f      	bne.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800381e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003820:	2b00      	cmp	r3, #0
 8003822:	d17c      	bne.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a47      	ldr	r2, [pc, #284]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a46      	ldr	r2, [pc, #280]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800383a:	e000      	b.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800383c:	4b45      	ldr	r3, [pc, #276]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800383e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d039      	beq.n	80038bc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	431a      	orrs	r2, r3
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003858:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10e      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800386e:	4836      	ldr	r0, [pc, #216]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003870:	f7ff ff72 	bl	8003758 <LL_ADC_IsEnabled>
 8003874:	4604      	mov	r4, r0
 8003876:	4835      	ldr	r0, [pc, #212]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003878:	f7ff ff6e 	bl	8003758 <LL_ADC_IsEnabled>
 800387c:	4603      	mov	r3, r0
 800387e:	4323      	orrs	r3, r4
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e008      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800388c:	4832      	ldr	r0, [pc, #200]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800388e:	f7ff ff63 	bl	8003758 <LL_ADC_IsEnabled>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d047      	beq.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	6811      	ldr	r1, [r2, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	431a      	orrs	r2, r3
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038ba:	e03a      	b.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10e      	bne.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80038dc:	481a      	ldr	r0, [pc, #104]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038de:	f7ff ff3b 	bl	8003758 <LL_ADC_IsEnabled>
 80038e2:	4604      	mov	r4, r0
 80038e4:	4819      	ldr	r0, [pc, #100]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038e6:	f7ff ff37 	bl	8003758 <LL_ADC_IsEnabled>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4323      	orrs	r3, r4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e008      	b.n	800390c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80038fa:	4817      	ldr	r0, [pc, #92]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038fc:	f7ff ff2c 	bl	8003758 <LL_ADC_IsEnabled>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003916:	4013      	ands	r3, r2
 8003918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800391a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800391c:	e009      	b.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003930:	e000      	b.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003932:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800393c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003940:	4618      	mov	r0, r3
 8003942:	377c      	adds	r7, #124	; 0x7c
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	40022000 	.word	0x40022000
 800394c:	40022100 	.word	0x40022100
 8003950:	40022300 	.word	0x40022300
 8003954:	58026300 	.word	0x58026300
 8003958:	58026000 	.word	0x58026000
 800395c:	fffff0e0 	.word	0xfffff0e0

08003960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 800398a:	4313      	orrs	r3, r2
 800398c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	60d3      	str	r3, [r2, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00
 80039a4:	05fa0000 	.word	0x05fa0000

080039a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a90:	d301      	bcc.n	8003a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00f      	b.n	8003ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a96:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <SysTick_Config+0x40>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f7ff ff8e 	bl	80039c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <SysTick_Config+0x40>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <SysTick_Config+0x40>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff47 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae8:	f7ff ff5e 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff ff90 	bl	8003a18 <NVIC_EncodePriority>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff5f 	bl	80039c4 <__NVIC_SetPriority>
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffb2 	bl	8003a80 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e014      	b.n	8003b62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	791b      	ldrb	r3, [r3, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc ff43 	bl	80009d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	795b      	ldrb	r3, [r3, #5]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_DAC_ConfigChannel+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e11d      	b.n	8003dc0 <HAL_DAC_ConfigChannel+0x254>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d174      	bne.n	8003c82 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b98:	f7fe fdbc 	bl	8002714 <HAL_GetTick>
 8003b9c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d134      	bne.n	8003c0e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ba4:	e011      	b.n	8003bca <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ba6:	f7fe fdb5 	bl	8002714 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d90a      	bls.n	8003bca <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f043 0208 	orr.w	r2, r3, #8
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0fa      	b.n	8003dc0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd0:	4b7d      	ldr	r3, [pc, #500]	; (8003dc8 <HAL_DAC_ConfigChannel+0x25c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e6      	bne.n	8003ba6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f7fe fda7 	bl	800272c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	6992      	ldr	r2, [r2, #24]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
 8003be8:	e01e      	b.n	8003c28 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bea:	f7fe fd93 	bl	8002714 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d90a      	bls.n	8003c0e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f043 0208 	orr.w	r2, r3, #8
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2203      	movs	r2, #3
 8003c08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0d8      	b.n	8003dc0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dbe8      	blt.n	8003bea <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7fe fd87 	bl	800272c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	6992      	ldr	r2, [r2, #24]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	ea02 0103 	and.w	r1, r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	21ff      	movs	r1, #255	; 0xff
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	ea02 0103 	and.w	r1, r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d11d      	bne.n	8003cc6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	221f      	movs	r2, #31
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e00f      	b.n	8003d10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d102      	bne.n	8003cfe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e008      	b.n	8003d10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	e001      	b.n	8003d10 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	400a      	ands	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4013      	ands	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	22c0      	movs	r2, #192	; 0xc0
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43da      	mvns	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	400a      	ands	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20008000 	.word	0x20008000

08003dcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0c6      	b.n	8003f6c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc fe8c 	bl	8000b04 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2223      	movs	r2, #35	; 0x23
 8003df0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df2:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <HAL_ETH_Init+0x1a8>)
 8003df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003df8:	4a5e      	ldr	r2, [pc, #376]	; (8003f74 <HAL_ETH_Init+0x1a8>)
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e02:	4b5c      	ldr	r3, [pc, #368]	; (8003f74 <HAL_ETH_Init+0x1a8>)
 8003e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7a1b      	ldrb	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fe fd03 	bl	8002824 <HAL_SYSCFG_ETHInterfaceSelect>
 8003e1e:	e003      	b.n	8003e28 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003e20:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003e24:	f7fe fcfe 	bl	8002824 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e40:	f7fe fc68 	bl	8002714 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e46:	e00f      	b.n	8003e68 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003e48:	f7fe fc64 	bl	8002714 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e56:	d907      	bls.n	8003e68 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	22e0      	movs	r2, #224	; 0xe0
 8003e62:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e081      	b.n	8003f6c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fac0 	bl	8004400 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e80:	f002 fb4e 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8003e84:	4603      	mov	r3, r0
 8003e86:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <HAL_ETH_Init+0x1ac>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9a      	lsrs	r2, r3, #18
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3a01      	subs	r2, #1
 8003e94:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fa13 	bl	80042c4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003eb4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	22e0      	movs	r2, #224	; 0xe0
 8003ed0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e04a      	b.n	8003f6c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ede:	4413      	add	r3, r2
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_ETH_Init+0x1b0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6952      	ldr	r2, [r2, #20]
 8003eea:	0052      	lsls	r2, r2, #1
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	6809      	ldr	r1, [r1, #0]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	f241 1308 	movw	r3, #4360	; 0x1108
 8003ef6:	440b      	add	r3, r1
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fad8 	bl	80044b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fb1c 	bl	800453e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	3305      	adds	r3, #5
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	021a      	lsls	r2, r3, #8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	3303      	adds	r3, #3
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	061a      	lsls	r2, r3, #24
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	3302      	adds	r3, #2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	041b      	lsls	r3, r3, #16
 8003f38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003f52:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003f54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2210      	movs	r2, #16
 8003f62:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2210      	movs	r2, #16
 8003f68:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	58024400 	.word	0x58024400
 8003f78:	431bde83 	.word	0x431bde83
 8003f7c:	ffff8001 	.word	0xffff8001

08003f80 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003f92:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	791b      	ldrb	r3, [r3, #4]
 8003f98:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003f9a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	7b1b      	ldrb	r3, [r3, #12]
 8003fa0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003fa2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	7b5b      	ldrb	r3, [r3, #13]
 8003fa8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003faa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	7b9b      	ldrb	r3, [r3, #14]
 8003fb0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003fb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	7bdb      	ldrb	r3, [r3, #15]
 8003fb8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003fba:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	7c12      	ldrb	r2, [r2, #16]
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d102      	bne.n	8003fca <ETH_SetMACConfig+0x4a>
 8003fc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003fc8:	e000      	b.n	8003fcc <ETH_SetMACConfig+0x4c>
 8003fca:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003fcc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	7c52      	ldrb	r2, [r2, #17]
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	d102      	bne.n	8003fdc <ETH_SetMACConfig+0x5c>
 8003fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fda:	e000      	b.n	8003fde <ETH_SetMACConfig+0x5e>
 8003fdc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003fde:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	7c9b      	ldrb	r3, [r3, #18]
 8003fe4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003fe6:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003fec:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003ff2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	7f1b      	ldrb	r3, [r3, #28]
 8003ff8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003ffa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7f5b      	ldrb	r3, [r3, #29]
 8004000:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004002:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	7f92      	ldrb	r2, [r2, #30]
 8004008:	2a00      	cmp	r2, #0
 800400a:	d102      	bne.n	8004012 <ETH_SetMACConfig+0x92>
 800400c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004010:	e000      	b.n	8004014 <ETH_SetMACConfig+0x94>
 8004012:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004014:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	7fdb      	ldrb	r3, [r3, #31]
 800401a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800401c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004024:	2a00      	cmp	r2, #0
 8004026:	d102      	bne.n	800402e <ETH_SetMACConfig+0xae>
 8004028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800402c:	e000      	b.n	8004030 <ETH_SetMACConfig+0xb0>
 800402e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004030:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004036:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004040:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b56      	ldr	r3, [pc, #344]	; (80041ac <ETH_SetMACConfig+0x22c>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	430b      	orrs	r3, r1
 800405c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800406a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800406c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004074:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004076:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800407e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004080:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004088:	2a00      	cmp	r2, #0
 800408a:	d102      	bne.n	8004092 <ETH_SetMACConfig+0x112>
 800408c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004090:	e000      	b.n	8004094 <ETH_SetMACConfig+0x114>
 8004092:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004094:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <ETH_SetMACConfig+0x230>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	430b      	orrs	r3, r1
 80040b0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <ETH_SetMACConfig+0x234>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	430b      	orrs	r3, r1
 80040d4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040dc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040e2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d101      	bne.n	80040f2 <ETH_SetMACConfig+0x172>
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	e000      	b.n	80040f4 <ETH_SetMACConfig+0x174>
 80040f2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80040f4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004106:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800410a:	4013      	ands	r3, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	430b      	orrs	r3, r1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800411c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004124:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f023 0103 	bic.w	r1, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	430a      	orrs	r2, r1
 800413e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800414a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004166:	2a00      	cmp	r2, #0
 8004168:	d101      	bne.n	800416e <ETH_SetMACConfig+0x1ee>
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	e000      	b.n	8004170 <ETH_SetMACConfig+0x1f0>
 800416e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004170:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004178:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800417a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004182:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004190:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	430a      	orrs	r2, r1
 800419c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	00048083 	.word	0x00048083
 80041b0:	c0f88000 	.word	0xc0f88000
 80041b4:	fffffef0 	.word	0xfffffef0

080041b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <ETH_SetDMAConfig+0xf8>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	6809      	ldr	r1, [r1, #0]
 80041d8:	431a      	orrs	r2, r3
 80041da:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80041de:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041ea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	7b1b      	ldrb	r3, [r3, #12]
 80041f0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80041fe:	4413      	add	r3, r2
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <ETH_SetDMAConfig+0xfc>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6811      	ldr	r1, [r2, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	431a      	orrs	r2, r3
 800420e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004212:	440b      	add	r3, r1
 8004214:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	7b5b      	ldrb	r3, [r3, #13]
 800421a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <ETH_SetDMAConfig+0x100>)
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6811      	ldr	r1, [r2, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	431a      	orrs	r2, r3
 800423a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800423e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	7d1b      	ldrb	r3, [r3, #20]
 8004248:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800424a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	7f5b      	ldrb	r3, [r3, #29]
 8004250:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f241 1304 	movw	r3, #4356	; 0x1104
 800425e:	4413      	add	r3, r2
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <ETH_SetDMAConfig+0x104>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	431a      	orrs	r2, r3
 800426e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004272:	440b      	add	r3, r1
 8004274:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	7f1b      	ldrb	r3, [r3, #28]
 800427a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	f241 1308 	movw	r3, #4360	; 0x1108
 800428c:	4413      	add	r3, r2
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <ETH_SetDMAConfig+0x108>)
 8004292:	4013      	ands	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6811      	ldr	r1, [r2, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	431a      	orrs	r2, r3
 800429c:	f241 1308 	movw	r3, #4360	; 0x1108
 80042a0:	440b      	add	r3, r1
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	ffff87fd 	.word	0xffff87fd
 80042b4:	ffff2ffe 	.word	0xffff2ffe
 80042b8:	fffec000 	.word	0xfffec000
 80042bc:	ffc0efef 	.word	0xffc0efef
 80042c0:	7fc0ffff 	.word	0x7fc0ffff

080042c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b0a4      	sub	sp, #144	; 0x90
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80042d2:	2300      	movs	r3, #0
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800430c:	2300      	movs	r3, #0
 800430e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800431c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004320:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004328:	2300      	movs	r3, #0
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800433e:	2300      	movs	r3, #0
 8004340:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004342:	2300      	movs	r3, #0
 8004344:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004346:	2300      	movs	r3, #0
 8004348:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800434a:	2300      	movs	r3, #0
 800434c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800435c:	2320      	movs	r3, #32
 800435e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800436e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004380:	2302      	movs	r3, #2
 8004382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800438c:	2300      	movs	r3, #0
 800438e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800439e:	2300      	movs	r3, #0
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fde6 	bl	8003f80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80043b8:	2301      	movs	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80043e4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fee1 	bl	80041b8 <ETH_SetDMAConfig>
}
 80043f6:	bf00      	nop
 80043f8:	3790      	adds	r7, #144	; 0x90
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004410:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004418:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800441a:	f002 f881 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 800441e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d908      	bls.n	800443a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d804      	bhi.n	800443a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	e027      	b.n	800448a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d908      	bls.n	8004454 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d204      	bcs.n	8004454 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e01a      	b.n	800448a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d303      	bcc.n	8004464 <ETH_MAC_MDIO_ClkConfig+0x64>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d911      	bls.n	8004488 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d908      	bls.n	800447e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d804      	bhi.n	800447e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	e005      	b.n	800448a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e000      	b.n	800448a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004488:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004494:	bf00      	nop
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	01312cff 	.word	0x01312cff
 80044a0:	02160ebf 	.word	0x02160ebf
 80044a4:	03938700 	.word	0x03938700
 80044a8:	05f5e0ff 	.word	0x05f5e0ff
 80044ac:	08f0d17f 	.word	0x08f0d17f

080044b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e01d      	b.n	80044fa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	440b      	add	r3, r1
 80044ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2200      	movs	r2, #0
 80044e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	3206      	adds	r2, #6
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d9de      	bls.n	80044be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	f241 132c 	movw	r3, #4396	; 0x112c
 800450e:	4413      	add	r3, r2
 8004510:	2203      	movs	r2, #3
 8004512:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68d9      	ldr	r1, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f241 1314 	movw	r3, #4372	; 0x1114
 8004520:	4413      	add	r3, r2
 8004522:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004530:	601a      	str	r2, [r3, #0]
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e024      	b.n	8004596 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6919      	ldr	r1, [r3, #16]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	440b      	add	r3, r1
 800455c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2200      	movs	r2, #0
 8004568:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2200      	movs	r2, #0
 8004580:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3310      	adds	r3, #16
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d9d7      	bls.n	800454c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	f241 1330 	movw	r3, #4400	; 0x1130
 80045c2:	4413      	add	r3, r2
 80045c4:	2203      	movs	r2, #3
 80045c6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6919      	ldr	r1, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	f241 131c 	movw	r3, #4380	; 0x111c
 80045d4:	4413      	add	r3, r2
 80045d6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f241 1328 	movw	r3, #4392	; 0x1128
 80045e8:	4413      	add	r3, r2
 80045ea:	6019      	str	r1, [r3, #0]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b098      	sub	sp, #96	; 0x60
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004600:	4a84      	ldr	r2, [pc, #528]	; (8004814 <HAL_FDCAN_Init+0x21c>)
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	4611      	mov	r1, r2
 8004608:	224c      	movs	r2, #76	; 0x4c
 800460a:	4618      	mov	r0, r3
 800460c:	f006 fcba 	bl	800af84 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e1ca      	b.n	80049b0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a7e      	ldr	r2, [pc, #504]	; (8004818 <HAL_FDCAN_Init+0x220>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d106      	bne.n	8004632 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fb8e 	bl	8000d68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0210 	bic.w	r2, r2, #16
 800465a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800465c:	f7fe f85a 	bl	8002714 <HAL_GetTick>
 8004660:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004662:	e014      	b.n	800468e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004664:	f7fe f856 	bl	8002714 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b0a      	cmp	r3, #10
 8004670:	d90d      	bls.n	800468e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004678:	f043 0201 	orr.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2203      	movs	r2, #3
 8004686:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e190      	b.n	80049b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b08      	cmp	r3, #8
 800469a:	d0e3      	beq.n	8004664 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ac:	f7fe f832 	bl	8002714 <HAL_GetTick>
 80046b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046b2:	e014      	b.n	80046de <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80046b4:	f7fe f82e 	bl	8002714 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b0a      	cmp	r3, #10
 80046c0:	d90d      	bls.n	80046de <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e168      	b.n	80049b0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0e3      	beq.n	80046b4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0202 	orr.w	r2, r2, #2
 80046fa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7c1b      	ldrb	r3, [r3, #16]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d108      	bne.n	8004716 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004712:	619a      	str	r2, [r3, #24]
 8004714:	e007      	b.n	8004726 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004724:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7c5b      	ldrb	r3, [r3, #17]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d108      	bne.n	8004740 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800473c:	619a      	str	r2, [r3, #24]
 800473e:	e007      	b.n	8004750 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800474e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7c9b      	ldrb	r3, [r3, #18]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004766:	619a      	str	r2, [r3, #24]
 8004768:	e007      	b.n	800477a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004778:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800479e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0210 	bic.w	r2, r2, #16
 80047ae:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d108      	bne.n	80047ca <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0204 	orr.w	r2, r2, #4
 80047c6:	619a      	str	r2, [r3, #24]
 80047c8:	e030      	b.n	800482c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02c      	beq.n	800482c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d020      	beq.n	800481c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047e8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0210 	orr.w	r2, r2, #16
 80047f8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d114      	bne.n	800482c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0220 	orr.w	r2, r2, #32
 8004810:	619a      	str	r2, [r3, #24]
 8004812:	e00b      	b.n	800482c <HAL_FDCAN_Init+0x234>
 8004814:	0800afc8 	.word	0x0800afc8
 8004818:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0220 	orr.w	r2, r2, #32
 800482a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	3b01      	subs	r3, #1
 8004832:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	3b01      	subs	r3, #1
 800483a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800483c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004844:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	3b01      	subs	r3, #1
 800484e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004854:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004856:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004860:	d115      	bne.n	800488e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	3b01      	subs	r3, #1
 800486e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004870:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	3b01      	subs	r3, #1
 8004878:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800487a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	3b01      	subs	r3, #1
 8004884:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800488a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800488c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b4:	4413      	add	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80048c2:	f023 0107 	bic.w	r1, r3, #7
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048d0:	4413      	add	r3, r2
 80048d2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d012      	beq.n	800490e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048f0:	f023 0107 	bic.w	r1, r3, #7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80048fe:	4413      	add	r3, r2
 8004900:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004912:	2b00      	cmp	r3, #0
 8004914:	d013      	beq.n	800493e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800491e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800492c:	4413      	add	r3, r2
 800492e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004932:	011a      	lsls	r2, r3, #4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004942:	2b00      	cmp	r3, #0
 8004944:	d013      	beq.n	800496e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800494e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800495c:	4413      	add	r3, r2
 800495e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004962:	021a      	lsls	r2, r3, #8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <HAL_FDCAN_Init+0x3c0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d107      	bne.n	8004988 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f022 0203 	bic.w	r2, r2, #3
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f80b 	bl	80049bc <FDCAN_CalcultateRamBlockAddresses>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80049ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3760      	adds	r7, #96	; 0x60
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	4000a000 	.word	0x4000a000

080049bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049d2:	4ba7      	ldr	r3, [pc, #668]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	0091      	lsls	r1, r2, #2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	430b      	orrs	r3, r1
 80049e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ec:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	041a      	lsls	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4413      	add	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a12:	4b97      	ldr	r3, [pc, #604]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	0091      	lsls	r1, r2, #2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004a54:	4b86      	ldr	r3, [pc, #536]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	0091      	lsls	r1, r2, #2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a6e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	041a      	lsls	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a9c:	4b74      	ldr	r3, [pc, #464]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	0091      	lsls	r1, r2, #2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ab6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abe:	041a      	lsls	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004ae4:	4b62      	ldr	r3, [pc, #392]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	0091      	lsls	r1, r2, #2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	4413      	add	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004b10:	4b57      	ldr	r3, [pc, #348]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	0091      	lsls	r1, r2, #2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b2a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	041a      	lsls	r2, r3, #16
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4413      	add	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004b52:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0091      	lsls	r1, r2, #2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b6c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	041a      	lsls	r2, r3, #16
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b88:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	061a      	lsls	r2, r3, #24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba0:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009a      	lsls	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	441a      	add	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d915      	bls.n	8004c98 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c6c:	e006      	b.n	8004c7c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c6e:	bf00      	nop
 8004c70:	ffff0003 	.word	0xffff0003
 8004c74:	10002b00 	.word	0x10002b00
 8004c78:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e010      	b.n	8004cba <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e005      	b.n	8004cac <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3f3      	bcc.n	8004ca0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop

08004cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cd6:	4b89      	ldr	r3, [pc, #548]	; (8004efc <HAL_GPIO_Init+0x234>)
 8004cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cda:	e194      	b.n	8005006 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8186 	beq.w	8005000 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d00b      	beq.n	8004d14 <HAL_GPIO_Init+0x4c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d007      	beq.n	8004d14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d08:	2b11      	cmp	r3, #17
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d130      	bne.n	8004d76 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	2203      	movs	r2, #3
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 0201 	and.w	r2, r3, #1
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	2203      	movs	r2, #3
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_GPIO_Init+0xee>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b12      	cmp	r3, #18
 8004db4:	d123      	bne.n	8004dfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	08da      	lsrs	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3208      	adds	r2, #8
 8004dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0203 	and.w	r2, r3, #3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80e0 	beq.w	8005000 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e40:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <HAL_GPIO_Init+0x238>)
 8004e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e46:	4a2e      	ldr	r2, [pc, #184]	; (8004f00 <HAL_GPIO_Init+0x238>)
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_GPIO_Init+0x238>)
 8004e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e5e:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <HAL_GPIO_Init+0x23c>)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	3302      	adds	r3, #2
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	220f      	movs	r2, #15
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_GPIO_Init+0x240>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d052      	beq.n	8004f30 <HAL_GPIO_Init+0x268>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_GPIO_Init+0x244>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d031      	beq.n	8004ef6 <HAL_GPIO_Init+0x22e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_GPIO_Init+0x248>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02b      	beq.n	8004ef2 <HAL_GPIO_Init+0x22a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <HAL_GPIO_Init+0x24c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d025      	beq.n	8004eee <HAL_GPIO_Init+0x226>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <HAL_GPIO_Init+0x250>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <HAL_GPIO_Init+0x222>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <HAL_GPIO_Init+0x254>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d019      	beq.n	8004ee6 <HAL_GPIO_Init+0x21e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_GPIO_Init+0x258>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x21a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_GPIO_Init+0x25c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x216>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_GPIO_Init+0x260>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x212>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_GPIO_Init+0x264>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x20e>
 8004ed2:	2309      	movs	r3, #9
 8004ed4:	e02d      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	e02b      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004eda:	2308      	movs	r3, #8
 8004edc:	e029      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ede:	2307      	movs	r3, #7
 8004ee0:	e027      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	e025      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ee6:	2305      	movs	r3, #5
 8004ee8:	e023      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004eea:	2304      	movs	r3, #4
 8004eec:	e021      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e01f      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e01d      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e01b      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004efa:	bf00      	nop
 8004efc:	58000080 	.word	0x58000080
 8004f00:	58024400 	.word	0x58024400
 8004f04:	58000400 	.word	0x58000400
 8004f08:	58020000 	.word	0x58020000
 8004f0c:	58020400 	.word	0x58020400
 8004f10:	58020800 	.word	0x58020800
 8004f14:	58020c00 	.word	0x58020c00
 8004f18:	58021000 	.word	0x58021000
 8004f1c:	58021400 	.word	0x58021400
 8004f20:	58021800 	.word	0x58021800
 8004f24:	58021c00 	.word	0x58021c00
 8004f28:	58022000 	.word	0x58022000
 8004f2c:	58022400 	.word	0x58022400
 8004f30:	2300      	movs	r3, #0
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	f002 0203 	and.w	r2, r2, #3
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	4093      	lsls	r3, r2
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f42:	4938      	ldr	r1, [pc, #224]	; (8005024 <HAL_GPIO_Init+0x35c>)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f ae63 	bne.w	8004cdc <HAL_GPIO_Init+0x14>
  }
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	3724      	adds	r7, #36	; 0x24
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	58000400 	.word	0x58000400

08005028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
 8005034:	4613      	mov	r3, r2
 8005036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005038:	787b      	ldrb	r3, [r7, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005044:	e003      	b.n	800504e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	041a      	lsls	r2, r3, #16
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	619a      	str	r2, [r3, #24]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4013      	ands	r3, r2
 8005072:	041a      	lsls	r2, r3, #16
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43d9      	mvns	r1, r3
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	400b      	ands	r3, r1
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	619a      	str	r2, [r3, #24]
}
 8005082:	bf00      	nop
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <HAL_HSEM_FastTake+0x2c>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3320      	adds	r3, #32
 800509e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a2:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <HAL_HSEM_FastTake+0x30>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	58026400 	.word	0x58026400
 80050c0:	80000300 	.word	0x80000300

080050c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80050ce:	4906      	ldr	r1, [pc, #24]	; (80050e8 <HAL_HSEM_Release+0x24>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	58026400 	.word	0x58026400

080050ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07f      	b.n	80051fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fb ffc4 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2224      	movs	r2, #36	; 0x24
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800513c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800514c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	e006      	b.n	8005174 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005172:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d104      	bne.n	8005186 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_I2C_Init+0x11c>)
 8005192:	430b      	orrs	r3, r1
 8005194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	ea42 0103 	orr.w	r1, r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69d9      	ldr	r1, [r3, #28]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	02008000 	.word	0x02008000

0800520c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d138      	bne.n	8005294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800522c:	2302      	movs	r3, #2
 800522e:	e032      	b.n	8005296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800525e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6819      	ldr	r1, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e000      	b.n	8005296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d139      	bne.n	800532c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e033      	b.n	800532e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2224      	movs	r2, #36	; 0x24
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800533a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533c:	b08f      	sub	sp, #60	; 0x3c
 800533e:	af0a      	add	r7, sp, #40	; 0x28
 8005340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e116      	b.n	800557a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fd f8aa 	bl	80024c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2203      	movs	r2, #3
 8005370:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f005 fb86 	bl	800aa9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	687e      	ldr	r6, [r7, #4]
 8005398:	466d      	mov	r5, sp
 800539a:	f106 0410 	add.w	r4, r6, #16
 800539e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80053ae:	1d33      	adds	r3, r6, #4
 80053b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053b2:	6838      	ldr	r0, [r7, #0]
 80053b4:	f005 fb04 	bl	800a9c0 <USB_CoreInit>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0d7      	b.n	800557a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f005 fb74 	bl	800aabe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e04a      	b.n	8005472 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	333d      	adds	r3, #61	; 0x3d
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	333c      	adds	r3, #60	; 0x3c
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	b298      	uxth	r0, r3
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	3342      	adds	r3, #66	; 0x42
 8005418:	4602      	mov	r2, r0
 800541a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800541c:	7bfa      	ldrb	r2, [r7, #15]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	1a9b      	subs	r3, r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	333f      	adds	r3, #63	; 0x3f
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	3344      	adds	r3, #68	; 0x44
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3348      	adds	r3, #72	; 0x48
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005458:	7bfa      	ldrb	r2, [r7, #15]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	1a9b      	subs	r3, r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	3350      	adds	r3, #80	; 0x50
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	3301      	adds	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	7bfa      	ldrb	r2, [r7, #15]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d3af      	bcc.n	80053dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e044      	b.n	800550c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005482:	7bfa      	ldrb	r2, [r7, #15]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054ae:	7bfa      	ldrb	r2, [r7, #15]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054f0:	7bfa      	ldrb	r2, [r7, #15]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	3301      	adds	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d3b5      	bcc.n	8005482 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	687e      	ldr	r6, [r7, #4]
 800551e:	466d      	mov	r5, sp
 8005520:	f106 0410 	add.w	r4, r6, #16
 8005524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800552a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800552c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005530:	e885 0003 	stmia.w	r5, {r0, r1}
 8005534:	1d33      	adds	r3, r6, #4
 8005536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005538:	6838      	ldr	r0, [r7, #0]
 800553a:	f005 faeb 	bl	800ab14 <USB_DevInit>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e014      	b.n	800557a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b01      	cmp	r3, #1
 8005566:	d102      	bne.n	800556e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f80b 	bl	8005584 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f005 fc8d 	bl	800ae92 <USB_DevDisconnect>

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005584 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	10000003 	.word	0x10000003

080055cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80055d4:	4b29      	ldr	r3, [pc, #164]	; (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d00a      	beq.n	80055f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d001      	beq.n	80055f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e040      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e03e      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80055fe:	491f      	ldr	r1, [pc, #124]	; (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4313      	orrs	r3, r2
 8005604:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005606:	f7fd f885 	bl	8002714 <HAL_GetTick>
 800560a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800560c:	e009      	b.n	8005622 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800560e:	f7fd f881 	bl	8002714 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800561c:	d901      	bls.n	8005622 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e028      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005622:	4b16      	ldr	r3, [pc, #88]	; (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562e:	d1ee      	bne.n	800560e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b1e      	cmp	r3, #30
 8005634:	d008      	beq.n	8005648 <HAL_PWREx_ConfigSupply+0x7c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b2e      	cmp	r3, #46	; 0x2e
 800563a:	d005      	beq.n	8005648 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b1d      	cmp	r3, #29
 8005640:	d002      	beq.n	8005648 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b2d      	cmp	r3, #45	; 0x2d
 8005646:	d114      	bne.n	8005672 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005648:	f7fd f864 	bl	8002714 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800564e:	e009      	b.n	8005664 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005650:	f7fd f860 	bl	8002714 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565e:	d901      	bls.n	8005664 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e007      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d1ee      	bne.n	8005650 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	58024800 	.word	0x58024800

08005680 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800568a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568e:	60d3      	str	r3, [r2, #12]
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	58024800 	.word	0x58024800

080056a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	; 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e3ff      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8087 	beq.w	80057ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c0:	4b99      	ldr	r3, [pc, #612]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056ca:	4b97      	ldr	r3, [pc, #604]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d007      	beq.n	80056e6 <HAL_RCC_OscConfig+0x46>
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	2b18      	cmp	r3, #24
 80056da:	d110      	bne.n	80056fe <HAL_RCC_OscConfig+0x5e>
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d10b      	bne.n	80056fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e6:	4b90      	ldr	r3, [pc, #576]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d06c      	beq.n	80057cc <HAL_RCC_OscConfig+0x12c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d168      	bne.n	80057cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e3d9      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005706:	d106      	bne.n	8005716 <HAL_RCC_OscConfig+0x76>
 8005708:	4b87      	ldr	r3, [pc, #540]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a86      	ldr	r2, [pc, #536]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e02e      	b.n	8005774 <HAL_RCC_OscConfig+0xd4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_RCC_OscConfig+0x98>
 800571e:	4b82      	ldr	r3, [pc, #520]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a81      	ldr	r2, [pc, #516]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b7f      	ldr	r3, [pc, #508]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a7e      	ldr	r2, [pc, #504]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e01d      	b.n	8005774 <HAL_RCC_OscConfig+0xd4>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005740:	d10c      	bne.n	800575c <HAL_RCC_OscConfig+0xbc>
 8005742:	4b79      	ldr	r3, [pc, #484]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a78      	ldr	r2, [pc, #480]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	4b76      	ldr	r3, [pc, #472]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a75      	ldr	r2, [pc, #468]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e00b      	b.n	8005774 <HAL_RCC_OscConfig+0xd4>
 800575c:	4b72      	ldr	r3, [pc, #456]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a71      	ldr	r2, [pc, #452]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4b6f      	ldr	r3, [pc, #444]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a6e      	ldr	r2, [pc, #440]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800576e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d013      	beq.n	80057a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fc ffca 	bl	8002714 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005784:	f7fc ffc6 	bl	8002714 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e38d      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005796:	4b64      	ldr	r3, [pc, #400]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0xe4>
 80057a2:	e014      	b.n	80057ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fc ffb6 	bl	8002714 <HAL_GetTick>
 80057a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fc ffb2 	bl	8002714 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e379      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057be:	4b5a      	ldr	r3, [pc, #360]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x10c>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80ae 	beq.w	8005938 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057dc:	4b52      	ldr	r3, [pc, #328]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057e6:	4b50      	ldr	r3, [pc, #320]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <HAL_RCC_OscConfig+0x162>
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	2b18      	cmp	r3, #24
 80057f6:	d13a      	bne.n	800586e <HAL_RCC_OscConfig+0x1ce>
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d135      	bne.n	800586e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005802:	4b49      	ldr	r3, [pc, #292]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_RCC_OscConfig+0x17a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e34b      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581a:	f7fc ffab 	bl	8002774 <HAL_GetREVID>
 800581e:	4603      	mov	r3, r0
 8005820:	f241 0203 	movw	r2, #4099	; 0x1003
 8005824:	4293      	cmp	r3, r2
 8005826:	d817      	bhi.n	8005858 <HAL_RCC_OscConfig+0x1b8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d108      	bne.n	8005842 <HAL_RCC_OscConfig+0x1a2>
 8005830:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005838:	4a3b      	ldr	r2, [pc, #236]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800583e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005840:	e07a      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	031b      	lsls	r3, r3, #12
 8005850:	4935      	ldr	r1, [pc, #212]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005852:	4313      	orrs	r3, r2
 8005854:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005856:	e06f      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005858:	4b33      	ldr	r3, [pc, #204]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	061b      	lsls	r3, r3, #24
 8005866:	4930      	ldr	r1, [pc, #192]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005868:	4313      	orrs	r3, r2
 800586a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800586c:	e064      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d045      	beq.n	8005902 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005876:	4b2c      	ldr	r3, [pc, #176]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 0219 	bic.w	r2, r3, #25
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4929      	ldr	r1, [pc, #164]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc ff44 	bl	8002714 <HAL_GetTick>
 800588c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005890:	f7fc ff40 	bl	8002714 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e307      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058a2:	4b21      	ldr	r3, [pc, #132]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ae:	f7fc ff61 	bl	8002774 <HAL_GetREVID>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d817      	bhi.n	80058ec <HAL_RCC_OscConfig+0x24c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d108      	bne.n	80058d6 <HAL_RCC_OscConfig+0x236>
 80058c4:	4b18      	ldr	r3, [pc, #96]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80058cc:	4a16      	ldr	r2, [pc, #88]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d2:	6053      	str	r3, [r2, #4]
 80058d4:	e030      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	031b      	lsls	r3, r3, #12
 80058e4:	4910      	ldr	r1, [pc, #64]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]
 80058ea:	e025      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	061b      	lsls	r3, r3, #24
 80058fa:	490b      	ldr	r1, [pc, #44]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	604b      	str	r3, [r1, #4]
 8005900:	e01a      	b.n	8005938 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a08      	ldr	r2, [pc, #32]	; (8005928 <HAL_RCC_OscConfig+0x288>)
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590e:	f7fc ff01 	bl	8002714 <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005914:	e00a      	b.n	800592c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005916:	f7fc fefd 	bl	8002714 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d903      	bls.n	800592c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e2c4      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
 8005928:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800592c:	4ba4      	ldr	r3, [pc, #656]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1ee      	bne.n	8005916 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a9 	beq.w	8005a98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005946:	4b9e      	ldr	r3, [pc, #632]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800594e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005950:	4b9b      	ldr	r3, [pc, #620]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d007      	beq.n	800596c <HAL_RCC_OscConfig+0x2cc>
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b18      	cmp	r3, #24
 8005960:	d13a      	bne.n	80059d8 <HAL_RCC_OscConfig+0x338>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d135      	bne.n	80059d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800596c:	4b94      	ldr	r3, [pc, #592]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCC_OscConfig+0x2e4>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d001      	beq.n	8005984 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e296      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005984:	f7fc fef6 	bl	8002774 <HAL_GetREVID>
 8005988:	4603      	mov	r3, r0
 800598a:	f241 0203 	movw	r2, #4099	; 0x1003
 800598e:	4293      	cmp	r3, r2
 8005990:	d817      	bhi.n	80059c2 <HAL_RCC_OscConfig+0x322>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	2b20      	cmp	r3, #32
 8005998:	d108      	bne.n	80059ac <HAL_RCC_OscConfig+0x30c>
 800599a:	4b89      	ldr	r3, [pc, #548]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80059a2:	4a87      	ldr	r2, [pc, #540]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059aa:	e075      	b.n	8005a98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059ac:	4b84      	ldr	r3, [pc, #528]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	069b      	lsls	r3, r3, #26
 80059ba:	4981      	ldr	r1, [pc, #516]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059c0:	e06a      	b.n	8005a98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059c2:	4b7f      	ldr	r3, [pc, #508]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	061b      	lsls	r3, r3, #24
 80059d0:	497b      	ldr	r1, [pc, #492]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059d6:	e05f      	b.n	8005a98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d042      	beq.n	8005a66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059e0:	4b77      	ldr	r3, [pc, #476]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a76      	ldr	r2, [pc, #472]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 80059e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fc fe92 	bl	8002714 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059f4:	f7fc fe8e 	bl	8002714 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e255      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a06:	4b6e      	ldr	r3, [pc, #440]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a12:	f7fc feaf 	bl	8002774 <HAL_GetREVID>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d817      	bhi.n	8005a50 <HAL_RCC_OscConfig+0x3b0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d108      	bne.n	8005a3a <HAL_RCC_OscConfig+0x39a>
 8005a28:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a30:	4a63      	ldr	r2, [pc, #396]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a36:	6053      	str	r3, [r2, #4]
 8005a38:	e02e      	b.n	8005a98 <HAL_RCC_OscConfig+0x3f8>
 8005a3a:	4b61      	ldr	r3, [pc, #388]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	069b      	lsls	r3, r3, #26
 8005a48:	495d      	ldr	r1, [pc, #372]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	604b      	str	r3, [r1, #4]
 8005a4e:	e023      	b.n	8005a98 <HAL_RCC_OscConfig+0x3f8>
 8005a50:	4b5b      	ldr	r3, [pc, #364]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	061b      	lsls	r3, r3, #24
 8005a5e:	4958      	ldr	r1, [pc, #352]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60cb      	str	r3, [r1, #12]
 8005a64:	e018      	b.n	8005a98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a66:	4b56      	ldr	r3, [pc, #344]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a55      	ldr	r2, [pc, #340]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fc fe4f 	bl	8002714 <HAL_GetTick>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a7a:	f7fc fe4b 	bl	8002714 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e212      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a8c:	4b4c      	ldr	r3, [pc, #304]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1f0      	bne.n	8005a7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d036      	beq.n	8005b12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d019      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aac:	4b44      	ldr	r3, [pc, #272]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab0:	4a43      	ldr	r2, [pc, #268]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab8:	f7fc fe2c 	bl	8002714 <HAL_GetTick>
 8005abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ac0:	f7fc fe28 	bl	8002714 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e1ef      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ad2:	4b3b      	ldr	r3, [pc, #236]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x420>
 8005ade:	e018      	b.n	8005b12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae0:	4b37      	ldr	r3, [pc, #220]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae4:	4a36      	ldr	r2, [pc, #216]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fc fe12 	bl	8002714 <HAL_GetTick>
 8005af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af4:	f7fc fe0e 	bl	8002714 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e1d5      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b06:	4b2e      	ldr	r3, [pc, #184]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d036      	beq.n	8005b8c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d019      	beq.n	8005b5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b26:	4b26      	ldr	r3, [pc, #152]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a25      	ldr	r2, [pc, #148]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b32:	f7fc fdef 	bl	8002714 <HAL_GetTick>
 8005b36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b3a:	f7fc fdeb 	bl	8002714 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e1b2      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <HAL_RCC_OscConfig+0x49a>
 8005b58:	e018      	b.n	8005b8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b5a:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b66:	f7fc fdd5 	bl	8002714 <HAL_GetTick>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b6e:	f7fc fdd1 	bl	8002714 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e198      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <HAL_RCC_OscConfig+0x520>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f0      	bne.n	8005b6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8085 	beq.w	8005ca4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <HAL_RCC_OscConfig+0x524>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <HAL_RCC_OscConfig+0x524>)
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ba6:	f7fc fdb5 	bl	8002714 <HAL_GetTick>
 8005baa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bac:	e00c      	b.n	8005bc8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bae:	f7fc fdb1 	bl	8002714 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b64      	cmp	r3, #100	; 0x64
 8005bba:	d905      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e178      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bc8:	4b96      	ldr	r3, [pc, #600]	; (8005e24 <HAL_RCC_OscConfig+0x784>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ec      	beq.n	8005bae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x54a>
 8005bdc:	4b92      	ldr	r3, [pc, #584]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be0:	4a91      	ldr	r2, [pc, #580]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	6713      	str	r3, [r2, #112]	; 0x70
 8005be8:	e02d      	b.n	8005c46 <HAL_RCC_OscConfig+0x5a6>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x56c>
 8005bf2:	4b8d      	ldr	r3, [pc, #564]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	4a8c      	ldr	r2, [pc, #560]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfe:	4b8a      	ldr	r3, [pc, #552]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	4a89      	ldr	r2, [pc, #548]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0a:	e01c      	b.n	8005c46 <HAL_RCC_OscConfig+0x5a6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d10c      	bne.n	8005c2e <HAL_RCC_OscConfig+0x58e>
 8005c14:	4b84      	ldr	r3, [pc, #528]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a83      	ldr	r2, [pc, #524]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c20:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	4a80      	ldr	r2, [pc, #512]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2c:	e00b      	b.n	8005c46 <HAL_RCC_OscConfig+0x5a6>
 8005c2e:	4b7e      	ldr	r3, [pc, #504]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a7d      	ldr	r2, [pc, #500]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3a:	4b7b      	ldr	r3, [pc, #492]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	4a7a      	ldr	r2, [pc, #488]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d015      	beq.n	8005c7a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4e:	f7fc fd61 	bl	8002714 <HAL_GetTick>
 8005c52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c54:	e00a      	b.n	8005c6c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c56:	f7fc fd5d 	bl	8002714 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e122      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c6c:	4b6e      	ldr	r3, [pc, #440]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ee      	beq.n	8005c56 <HAL_RCC_OscConfig+0x5b6>
 8005c78:	e014      	b.n	8005ca4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7a:	f7fc fd4b 	bl	8002714 <HAL_GetTick>
 8005c7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c82:	f7fc fd47 	bl	8002714 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e10c      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c98:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ee      	bne.n	8005c82 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8101 	beq.w	8005eb0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005cae:	4b5e      	ldr	r3, [pc, #376]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb6:	2b18      	cmp	r3, #24
 8005cb8:	f000 80bc 	beq.w	8005e34 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	f040 8095 	bne.w	8005df0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc6:	4b58      	ldr	r3, [pc, #352]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a57      	ldr	r2, [pc, #348]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd2:	f7fc fd1f 	bl	8002714 <HAL_GetTick>
 8005cd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cda:	f7fc fd1b 	bl	8002714 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0e2      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cec:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cf8:	4b4b      	ldr	r3, [pc, #300]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <HAL_RCC_OscConfig+0x78c>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d08:	0112      	lsls	r2, r2, #4
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	4946      	ldr	r1, [pc, #280]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	628b      	str	r3, [r1, #40]	; 0x28
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	3b01      	subs	r3, #1
 8005d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	3b01      	subs	r3, #1
 8005d22:	025b      	lsls	r3, r3, #9
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d42:	4939      	ldr	r1, [pc, #228]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005d48:	4b37      	ldr	r3, [pc, #220]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a36      	ldr	r2, [pc, #216]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d54:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d58:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <HAL_RCC_OscConfig+0x790>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d60:	00d2      	lsls	r2, r2, #3
 8005d62:	4931      	ldr	r1, [pc, #196]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d68:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f023 020c 	bic.w	r2, r3, #12
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	492c      	ldr	r1, [pc, #176]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d7a:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f023 0202 	bic.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	4928      	ldr	r1, [pc, #160]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d8c:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	4a25      	ldr	r2, [pc, #148]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d98:	4b23      	ldr	r3, [pc, #140]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005da4:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	4a1f      	ldr	r2, [pc, #124]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005daa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fc fca4 	bl	8002714 <HAL_GetTick>
 8005dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fc fca0 	bl	8002714 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e067      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x730>
 8005dee:	e05f      	b.n	8005eb0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df0:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfc:	f7fc fc8a 	bl	8002714 <HAL_GetTick>
 8005e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e04:	f7fc fc86 	bl	8002714 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e04d      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e16:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <HAL_RCC_OscConfig+0x788>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x764>
 8005e22:	e045      	b.n	8005eb0 <HAL_RCC_OscConfig+0x810>
 8005e24:	58024800 	.word	0x58024800
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	fffffc0c 	.word	0xfffffc0c
 8005e30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <HAL_RCC_OscConfig+0x81c>)
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e3a:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <HAL_RCC_OscConfig+0x81c>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d031      	beq.n	8005eac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0203 	and.w	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d12a      	bne.n	8005eac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d122      	bne.n	8005eac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d11a      	bne.n	8005eac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	0a5b      	lsrs	r3, r3, #9
 8005e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d111      	bne.n	8005eac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d108      	bne.n	8005eac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	0e1b      	lsrs	r3, r3, #24
 8005e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3730      	adds	r7, #48	; 0x30
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400

08005ec0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e19c      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b8a      	ldr	r3, [pc, #552]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 030f 	and.w	r3, r3, #15
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d910      	bls.n	8005f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b87      	ldr	r3, [pc, #540]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 020f 	bic.w	r2, r3, #15
 8005eea:	4985      	ldr	r1, [pc, #532]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef2:	4b83      	ldr	r3, [pc, #524]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d001      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e184      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	4b7b      	ldr	r3, [pc, #492]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f20:	4b78      	ldr	r3, [pc, #480]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	4975      	ldr	r1, [pc, #468]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d010      	beq.n	8005f60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	4b70      	ldr	r3, [pc, #448]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d908      	bls.n	8005f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f4e:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	496a      	ldr	r1, [pc, #424]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	4b64      	ldr	r3, [pc, #400]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d908      	bls.n	8005f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f7c:	4b61      	ldr	r3, [pc, #388]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	495e      	ldr	r1, [pc, #376]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d010      	beq.n	8005fbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	4b59      	ldr	r3, [pc, #356]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d908      	bls.n	8005fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005faa:	4b56      	ldr	r3, [pc, #344]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	4953      	ldr	r1, [pc, #332]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d010      	beq.n	8005fea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	4b4d      	ldr	r3, [pc, #308]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 030f 	and.w	r3, r3, #15
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d908      	bls.n	8005fea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd8:	4b4a      	ldr	r3, [pc, #296]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f023 020f 	bic.w	r2, r3, #15
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4947      	ldr	r1, [pc, #284]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d055      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ff6:	4b43      	ldr	r3, [pc, #268]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	4940      	ldr	r1, [pc, #256]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8006004:	4313      	orrs	r3, r2
 8006006:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d107      	bne.n	8006020 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006010:	4b3c      	ldr	r3, [pc, #240]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d121      	bne.n	8006060 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e0f6      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d107      	bne.n	8006038 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006028:	4b36      	ldr	r3, [pc, #216]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d115      	bne.n	8006060 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0ea      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d107      	bne.n	8006050 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006040:	4b30      	ldr	r3, [pc, #192]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0de      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e0d6      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f023 0207 	bic.w	r2, r3, #7
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4925      	ldr	r1, [pc, #148]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006072:	f7fc fb4f 	bl	8002714 <HAL_GetTick>
 8006076:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006078:	e00a      	b.n	8006090 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800607a:	f7fc fb4b 	bl	8002714 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e0be      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006090:	4b1c      	ldr	r3, [pc, #112]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	429a      	cmp	r2, r3
 80060a0:	d1eb      	bne.n	800607a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	4b14      	ldr	r3, [pc, #80]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d208      	bcs.n	80060d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060be:	4b11      	ldr	r3, [pc, #68]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	f023 020f 	bic.w	r2, r3, #15
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	490e      	ldr	r1, [pc, #56]	; (8006104 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d214      	bcs.n	8006108 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 020f 	bic.w	r2, r3, #15
 80060e6:	4906      	ldr	r1, [pc, #24]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b04      	ldr	r3, [pc, #16]	; (8006100 <HAL_RCC_ClockConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e086      	b.n	800620e <HAL_RCC_ClockConfig+0x34e>
 8006100:	52002000 	.word	0x52002000
 8006104:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d010      	beq.n	8006136 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	4b3f      	ldr	r3, [pc, #252]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006120:	429a      	cmp	r2, r3
 8006122:	d208      	bcs.n	8006136 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006124:	4b3c      	ldr	r3, [pc, #240]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4939      	ldr	r1, [pc, #228]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006132:	4313      	orrs	r3, r2
 8006134:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	4b34      	ldr	r3, [pc, #208]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800614e:	429a      	cmp	r2, r3
 8006150:	d208      	bcs.n	8006164 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006152:	4b31      	ldr	r3, [pc, #196]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	492e      	ldr	r1, [pc, #184]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006160:	4313      	orrs	r3, r2
 8006162:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	d010      	beq.n	8006192 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	4b28      	ldr	r3, [pc, #160]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617c:	429a      	cmp	r2, r3
 800617e:	d208      	bcs.n	8006192 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	4922      	ldr	r1, [pc, #136]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 800618e:	4313      	orrs	r3, r2
 8006190:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d010      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d208      	bcs.n	80061c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061ae:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	4917      	ldr	r1, [pc, #92]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061c0:	f000 f834 	bl	800622c <HAL_RCC_GetSysClockFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	4912      	ldr	r1, [pc, #72]	; (800621c <HAL_RCC_ClockConfig+0x35c>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
 80061dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061de:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <HAL_RCC_ClockConfig+0x358>)
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	4a0d      	ldr	r2, [pc, #52]	; (800621c <HAL_RCC_ClockConfig+0x35c>)
 80061e8:	5cd3      	ldrb	r3, [r2, r3]
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <HAL_RCC_ClockConfig+0x360>)
 80061f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061f8:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <HAL_RCC_ClockConfig+0x364>)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80061fe:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <HAL_RCC_ClockConfig+0x368>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fc fa3c 	bl	8002680 <HAL_InitTick>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	58024400 	.word	0x58024400
 800621c:	0800b014 	.word	0x0800b014
 8006220:	24000004 	.word	0x24000004
 8006224:	24000000 	.word	0x24000000
 8006228:	24000008 	.word	0x24000008

0800622c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	; 0x24
 8006230:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006232:	4bb3      	ldr	r3, [pc, #716]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800623a:	2b18      	cmp	r3, #24
 800623c:	f200 8155 	bhi.w	80064ea <HAL_RCC_GetSysClockFreq+0x2be>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	080062ad 	.word	0x080062ad
 800624c:	080064eb 	.word	0x080064eb
 8006250:	080064eb 	.word	0x080064eb
 8006254:	080064eb 	.word	0x080064eb
 8006258:	080064eb 	.word	0x080064eb
 800625c:	080064eb 	.word	0x080064eb
 8006260:	080064eb 	.word	0x080064eb
 8006264:	080064eb 	.word	0x080064eb
 8006268:	080062d3 	.word	0x080062d3
 800626c:	080064eb 	.word	0x080064eb
 8006270:	080064eb 	.word	0x080064eb
 8006274:	080064eb 	.word	0x080064eb
 8006278:	080064eb 	.word	0x080064eb
 800627c:	080064eb 	.word	0x080064eb
 8006280:	080064eb 	.word	0x080064eb
 8006284:	080064eb 	.word	0x080064eb
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080064eb 	.word	0x080064eb
 8006290:	080064eb 	.word	0x080064eb
 8006294:	080064eb 	.word	0x080064eb
 8006298:	080064eb 	.word	0x080064eb
 800629c:	080064eb 	.word	0x080064eb
 80062a0:	080064eb 	.word	0x080064eb
 80062a4:	080064eb 	.word	0x080064eb
 80062a8:	080062df 	.word	0x080062df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ac:	4b94      	ldr	r3, [pc, #592]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062b8:	4b91      	ldr	r3, [pc, #580]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	08db      	lsrs	r3, r3, #3
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	4a90      	ldr	r2, [pc, #576]	; (8006504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80062ca:	e111      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062cc:	4b8d      	ldr	r3, [pc, #564]	; (8006504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062ce:	61bb      	str	r3, [r7, #24]
    break;
 80062d0:	e10e      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80062d2:	4b8d      	ldr	r3, [pc, #564]	; (8006508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062d4:	61bb      	str	r3, [r7, #24]
    break;
 80062d6:	e10b      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80062d8:	4b8c      	ldr	r3, [pc, #560]	; (800650c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062da:	61bb      	str	r3, [r7, #24]
    break;
 80062dc:	e108      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062de:	4b88      	ldr	r3, [pc, #544]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80062e8:	4b85      	ldr	r3, [pc, #532]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062f4:	4b82      	ldr	r3, [pc, #520]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80062fe:	4b80      	ldr	r3, [pc, #512]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	08db      	lsrs	r3, r3, #3
 8006304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80e1 	beq.w	80064e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b02      	cmp	r3, #2
 8006326:	f000 8083 	beq.w	8006430 <HAL_RCC_GetSysClockFreq+0x204>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b02      	cmp	r3, #2
 800632e:	f200 80a1 	bhi.w	8006474 <HAL_RCC_GetSysClockFreq+0x248>
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0x114>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d056      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800633e:	e099      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006340:	4b6f      	ldr	r3, [pc, #444]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d02d      	beq.n	80063a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800634c:	4b6c      	ldr	r3, [pc, #432]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	08db      	lsrs	r3, r3, #3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	4a6b      	ldr	r2, [pc, #428]	; (8006504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	ee07 3a90 	vmov	s15, r3
 8006364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006376:	4b62      	ldr	r3, [pc, #392]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006386:	ed97 6a02 	vldr	s12, [r7, #8]
 800638a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800638e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800639a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80063a6:	e087      	b.n	80064b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006514 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ba:	4b51      	ldr	r3, [pc, #324]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006510 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ea:	e065      	b.n	80064b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006518 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fe:	4b40      	ldr	r3, [pc, #256]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006412:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006510 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800642e:	e043      	b.n	80064b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800651c <HAL_RCC_GetSysClockFreq+0x2f0>
 800643e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006442:	4b2f      	ldr	r3, [pc, #188]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006452:	ed97 6a02 	vldr	s12, [r7, #8]
 8006456:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800645a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006472:	e021      	b.n	80064b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006518 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006486:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006496:	ed97 6a02 	vldr	s12, [r7, #8]
 800649a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800649e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80064b8:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	3301      	adds	r3, #1
 80064c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064dc:	ee17 3a90 	vmov	r3, s15
 80064e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80064e2:	e005      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61bb      	str	r3, [r7, #24]
    break;
 80064e8:	e002      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064ec:	61bb      	str	r3, [r7, #24]
    break;
 80064ee:	bf00      	nop
  }

  return sysclockfreq;
 80064f0:	69bb      	ldr	r3, [r7, #24]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3724      	adds	r7, #36	; 0x24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	58024400 	.word	0x58024400
 8006504:	03d09000 	.word	0x03d09000
 8006508:	003d0900 	.word	0x003d0900
 800650c:	007a1200 	.word	0x007a1200
 8006510:	46000000 	.word	0x46000000
 8006514:	4c742400 	.word	0x4c742400
 8006518:	4a742400 	.word	0x4a742400
 800651c:	4af42400 	.word	0x4af42400

08006520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006526:	f7ff fe81 	bl	800622c <HAL_RCC_GetSysClockFreq>
 800652a:	4602      	mov	r2, r0
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_RCC_GetHCLKFreq+0x50>)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	490f      	ldr	r1, [pc, #60]	; (8006574 <HAL_RCC_GetHCLKFreq+0x54>)
 8006538:	5ccb      	ldrb	r3, [r1, r3]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	fa22 f303 	lsr.w	r3, r2, r3
 8006542:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <HAL_RCC_GetHCLKFreq+0x50>)
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <HAL_RCC_GetHCLKFreq+0x54>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	4a07      	ldr	r2, [pc, #28]	; (8006578 <HAL_RCC_GetHCLKFreq+0x58>)
 800655c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800655e:	4a07      	ldr	r2, [pc, #28]	; (800657c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006564:	4b04      	ldr	r3, [pc, #16]	; (8006578 <HAL_RCC_GetHCLKFreq+0x58>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024400 	.word	0x58024400
 8006574:	0800b014 	.word	0x0800b014
 8006578:	24000004 	.word	0x24000004
 800657c:	24000000 	.word	0x24000000

08006580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006584:	f7ff ffcc 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006588:	4602      	mov	r2, r0
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	091b      	lsrs	r3, r3, #4
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	4904      	ldr	r1, [pc, #16]	; (80065a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006596:	5ccb      	ldrb	r3, [r1, r3]
 8006598:	f003 031f 	and.w	r3, r3, #31
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	58024400 	.word	0x58024400
 80065a8:	0800b014 	.word	0x0800b014

080065ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80065b0:	f7ff ffb6 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4904      	ldr	r1, [pc, #16]	; (80065d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	58024400 	.word	0x58024400
 80065d4:	0800b014 	.word	0x0800b014

080065d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065e4:	2300      	movs	r3, #0
 80065e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03f      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065fc:	d02a      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80065fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006602:	d824      	bhi.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006608:	d018      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800660a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800660e:	d81e      	bhi.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006618:	d007      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800661a:	e018      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661c:	4bab      	ldr	r3, [pc, #684]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	4aaa      	ldr	r2, [pc, #680]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006628:	e015      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3304      	adds	r3, #4
 800662e:	2102      	movs	r1, #2
 8006630:	4618      	mov	r0, r3
 8006632:	f001 fff3 	bl	800861c <RCCEx_PLL2_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800663a:	e00c      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3324      	adds	r3, #36	; 0x24
 8006640:	2102      	movs	r1, #2
 8006642:	4618      	mov	r0, r3
 8006644:	f002 f89c 	bl	8008780 <RCCEx_PLL3_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	75fb      	strb	r3, [r7, #23]
      break;
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800665c:	4b9b      	ldr	r3, [pc, #620]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006660:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006668:	4998      	ldr	r1, [pc, #608]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800666a:	4313      	orrs	r3, r2
 800666c:	650b      	str	r3, [r1, #80]	; 0x50
 800666e:	e001      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006684:	2b04      	cmp	r3, #4
 8006686:	d826      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006688:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066a5 	.word	0x080066a5
 8006694:	080066b3 	.word	0x080066b3
 8006698:	080066c5 	.word	0x080066c5
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066dd 	.word	0x080066dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066a4:	4b89      	ldr	r3, [pc, #548]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4a88      	ldr	r2, [pc, #544]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066b0:	e015      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 ffaf 	bl	800861c <RCCEx_PLL2_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066c2:	e00c      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3324      	adds	r3, #36	; 0x24
 80066c8:	2100      	movs	r1, #0
 80066ca:	4618      	mov	r0, r3
 80066cc:	f002 f858 	bl	8008780 <RCCEx_PLL3_Config>
 80066d0:	4603      	mov	r3, r0
 80066d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
      break;
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80066dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066e4:	4b79      	ldr	r3, [pc, #484]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	f023 0207 	bic.w	r2, r3, #7
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f0:	4976      	ldr	r1, [pc, #472]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	650b      	str	r3, [r1, #80]	; 0x50
 80066f6:	e001      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006704:	2b00      	cmp	r3, #0
 8006706:	d042      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d02b      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	d825      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006718:	2bc0      	cmp	r3, #192	; 0xc0
 800671a:	d028      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800671c:	2bc0      	cmp	r3, #192	; 0xc0
 800671e:	d821      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d016      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	d81d      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d007      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006730:	e018      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006732:	4b66      	ldr	r3, [pc, #408]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	4a65      	ldr	r2, [pc, #404]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800673e:	e017      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f001 ff68 	bl	800861c <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006750:	e00e      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3324      	adds	r3, #36	; 0x24
 8006756:	2100      	movs	r1, #0
 8006758:	4618      	mov	r0, r3
 800675a:	f002 f811 	bl	8008780 <RCCEx_PLL3_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006762:	e005      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
      break;
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800676e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006776:	4b55      	ldr	r3, [pc, #340]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006782:	4952      	ldr	r1, [pc, #328]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006784:	4313      	orrs	r3, r2
 8006786:	650b      	str	r3, [r1, #80]	; 0x50
 8006788:	e001      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	2b00      	cmp	r3, #0
 8006798:	d049      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067a4:	d030      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80067a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067aa:	d82a      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80067ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067b0:	d02c      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80067b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067b6:	d824      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80067b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067bc:	d018      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80067be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067c2:	d81e      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80067c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067cc:	d007      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80067ce:	e018      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d0:	4b3e      	ldr	r3, [pc, #248]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	4a3d      	ldr	r2, [pc, #244]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80067d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067dc:	e017      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 ff19 	bl	800861c <RCCEx_PLL2_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067ee:	e00e      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 ffc2 	bl	8008780 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006800:	e005      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
      break;
 8006806:	e002      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006808:	bf00      	nop
 800680a:	e000      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800680c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006822:	492a      	ldr	r1, [pc, #168]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006824:	4313      	orrs	r3, r2
 8006826:	658b      	str	r3, [r1, #88]	; 0x58
 8006828:	e001      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006836:	2b00      	cmp	r3, #0
 8006838:	d04c      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006844:	d030      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800684a:	d82a      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800684c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006850:	d02c      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006856:	d824      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800685c:	d018      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800685e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006862:	d81e      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800686c:	d007      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800686e:	e018      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006870:	4b16      	ldr	r3, [pc, #88]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	4a15      	ldr	r2, [pc, #84]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800687c:	e017      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fec9 	bl	800861c <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800688e:	e00e      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f001 ff72 	bl	8008780 <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068a0:	e005      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
      break;
 80068a6:	e002      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80068ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10d      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068c2:	4902      	ldr	r1, [pc, #8]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	658b      	str	r3, [r1, #88]	; 0x58
 80068c8:	e004      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d032      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d01c      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068e8:	2b30      	cmp	r3, #48	; 0x30
 80068ea:	d817      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d00c      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d813      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d016      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80068f8:	2b10      	cmp	r3, #16
 80068fa:	d10f      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fc:	4baf      	ldr	r3, [pc, #700]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	4aae      	ldr	r2, [pc, #696]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006908:	e00e      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	2102      	movs	r1, #2
 8006910:	4618      	mov	r0, r3
 8006912:	f001 fe83 	bl	800861c <RCCEx_PLL2_Config>
 8006916:	4603      	mov	r3, r0
 8006918:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800691a:	e005      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
      break;
 8006920:	e002      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800692e:	4ba3      	ldr	r3, [pc, #652]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800693a:	49a0      	ldr	r1, [pc, #640]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800693c:	4313      	orrs	r3, r2
 800693e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006940:	e001      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d047      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800695a:	d030      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800695c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006960:	d82a      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006962:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006966:	d02c      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800696c:	d824      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006972:	d018      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006978:	d81e      	bhi.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d007      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006984:	e018      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006986:	4b8d      	ldr	r3, [pc, #564]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	4a8c      	ldr	r2, [pc, #560]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800698c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006990:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006992:	e017      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f001 fe3e 	bl	800861c <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069a4:	e00e      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fee7 	bl	8008780 <RCCEx_PLL3_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80069b6:	e005      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]
      break;
 80069bc:	e002      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80069c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d109      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069ca:	4b7c      	ldr	r3, [pc, #496]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	4979      	ldr	r1, [pc, #484]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	650b      	str	r3, [r1, #80]	; 0x50
 80069dc:	e001      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d049      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069f6:	d02e      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80069f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069fc:	d828      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80069fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a02:	d02a      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a08:	d822      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006a0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a0e:	d026      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006a10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a14:	d81c      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a1a:	d010      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a20:	d816      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01d      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2a:	d111      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	2101      	movs	r1, #1
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fdf2 	bl	800861c <RCCEx_PLL2_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a3c:	e012      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3324      	adds	r3, #36	; 0x24
 8006a42:	2101      	movs	r1, #1
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fe9b 	bl	8008780 <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006a4e:	e009      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
      break;
 8006a54:	e006      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a56:	bf00      	nop
 8006a58:	e004      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e002      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e000      	b.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a6a:	4b54      	ldr	r3, [pc, #336]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a76:	4951      	ldr	r1, [pc, #324]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	650b      	str	r3, [r1, #80]	; 0x50
 8006a7c:	e001      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d04b      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a98:	d02e      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9e:	d828      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa4:	d02a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aaa:	d822      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006aac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab0:	d026      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006ab2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ab6:	d81c      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac2:	d816      	bhi.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01d      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006acc:	d111      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fda1 	bl	800861c <RCCEx_PLL2_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ade:	e012      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3324      	adds	r3, #36	; 0x24
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 fe4a 	bl	8008780 <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006af0:	e009      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
      break;
 8006af6:	e006      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006af8:	bf00      	nop
 8006afa:	e004      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b0c:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b1a:	4928      	ldr	r1, [pc, #160]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	658b      	str	r3, [r1, #88]	; 0x58
 8006b20:	e001      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d02f      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b3a:	d00e      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b40:	d814      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d015      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b4a:	d10f      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b58:	e00c      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	2101      	movs	r1, #1
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 fd5b 	bl	800861c <RCCEx_PLL2_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b70:	e000      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b86:	490d      	ldr	r1, [pc, #52]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	650b      	str	r3, [r1, #80]	; 0x50
 8006b8c:	e001      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d033      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d81c      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006be7 	.word	0x08006be7
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bcf 	.word	0x08006bcf
 8006bb8:	08006be7 	.word	0x08006be7
 8006bbc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4bb8      	ldr	r3, [pc, #736]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4ab7      	ldr	r2, [pc, #732]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006bcc:	e00c      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fd21 	bl	800861c <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bee:	4bad      	ldr	r3, [pc, #692]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf2:	f023 0203 	bic.w	r2, r3, #3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfa:	49aa      	ldr	r1, [pc, #680]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c00:	e001      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8086 	beq.w	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c14:	4ba4      	ldr	r3, [pc, #656]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4aa3      	ldr	r2, [pc, #652]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c20:	f7fb fd78 	bl	8002714 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c26:	e009      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c28:	f7fb fd74 	bl	8002714 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b64      	cmp	r3, #100	; 0x64
 8006c34:	d902      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	75fb      	strb	r3, [r7, #23]
        break;
 8006c3a:	e005      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c3c:	4b9a      	ldr	r3, [pc, #616]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ef      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d166      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c4e:	4b95      	ldr	r3, [pc, #596]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c58:	4053      	eors	r3, r2
 8006c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d013      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c62:	4b90      	ldr	r3, [pc, #576]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c6c:	4b8d      	ldr	r3, [pc, #564]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4a8c      	ldr	r2, [pc, #560]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c78:	4b8a      	ldr	r3, [pc, #552]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4a89      	ldr	r2, [pc, #548]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c84:	4a87      	ldr	r2, [pc, #540]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c94:	d115      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c96:	f7fb fd3d 	bl	8002714 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c9c:	e00b      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fb fd39 	bl	8002714 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d902      	bls.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	75fb      	strb	r3, [r7, #23]
            break;
 8006cb4:	e005      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cb6:	4b7b      	ldr	r3, [pc, #492]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0ed      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d126      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006cd8:	4b72      	ldr	r3, [pc, #456]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ce6:	0919      	lsrs	r1, r3, #4
 8006ce8:	4b70      	ldr	r3, [pc, #448]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006cea:	400b      	ands	r3, r1
 8006cec:	496d      	ldr	r1, [pc, #436]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	610b      	str	r3, [r1, #16]
 8006cf2:	e005      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006cf4:	4b6b      	ldr	r3, [pc, #428]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	4a6a      	ldr	r2, [pc, #424]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cfa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cfe:	6113      	str	r3, [r2, #16]
 8006d00:	4b68      	ldr	r3, [pc, #416]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d0e:	4965      	ldr	r1, [pc, #404]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	670b      	str	r3, [r1, #112]	; 0x70
 8006d14:	e004      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	75bb      	strb	r3, [r7, #22]
 8006d1a:	e001      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d07e      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d30:	2b28      	cmp	r3, #40	; 0x28
 8006d32:	d867      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006e0b 	.word	0x08006e0b
 8006d40:	08006e05 	.word	0x08006e05
 8006d44:	08006e05 	.word	0x08006e05
 8006d48:	08006e05 	.word	0x08006e05
 8006d4c:	08006e05 	.word	0x08006e05
 8006d50:	08006e05 	.word	0x08006e05
 8006d54:	08006e05 	.word	0x08006e05
 8006d58:	08006e05 	.word	0x08006e05
 8006d5c:	08006de1 	.word	0x08006de1
 8006d60:	08006e05 	.word	0x08006e05
 8006d64:	08006e05 	.word	0x08006e05
 8006d68:	08006e05 	.word	0x08006e05
 8006d6c:	08006e05 	.word	0x08006e05
 8006d70:	08006e05 	.word	0x08006e05
 8006d74:	08006e05 	.word	0x08006e05
 8006d78:	08006e05 	.word	0x08006e05
 8006d7c:	08006df3 	.word	0x08006df3
 8006d80:	08006e05 	.word	0x08006e05
 8006d84:	08006e05 	.word	0x08006e05
 8006d88:	08006e05 	.word	0x08006e05
 8006d8c:	08006e05 	.word	0x08006e05
 8006d90:	08006e05 	.word	0x08006e05
 8006d94:	08006e05 	.word	0x08006e05
 8006d98:	08006e05 	.word	0x08006e05
 8006d9c:	08006e0b 	.word	0x08006e0b
 8006da0:	08006e05 	.word	0x08006e05
 8006da4:	08006e05 	.word	0x08006e05
 8006da8:	08006e05 	.word	0x08006e05
 8006dac:	08006e05 	.word	0x08006e05
 8006db0:	08006e05 	.word	0x08006e05
 8006db4:	08006e05 	.word	0x08006e05
 8006db8:	08006e05 	.word	0x08006e05
 8006dbc:	08006e0b 	.word	0x08006e0b
 8006dc0:	08006e05 	.word	0x08006e05
 8006dc4:	08006e05 	.word	0x08006e05
 8006dc8:	08006e05 	.word	0x08006e05
 8006dcc:	08006e05 	.word	0x08006e05
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	08006e0b 	.word	0x08006e0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	2101      	movs	r1, #1
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fc18 	bl	800861c <RCCEx_PLL2_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006df0:	e00c      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3324      	adds	r3, #36	; 0x24
 8006df6:	2101      	movs	r1, #1
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fcc1 	bl	8008780 <RCCEx_PLL3_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e02:	e003      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	e000      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e12:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1e:	4921      	ldr	r1, [pc, #132]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	654b      	str	r3, [r1, #84]	; 0x54
 8006e24:	e001      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d03e      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e3a:	2b05      	cmp	r3, #5
 8006e3c:	d820      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e87 	.word	0x08006e87
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e6f 	.word	0x08006e6f
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e87 	.word	0x08006e87
 8006e58:	08006e87 	.word	0x08006e87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3304      	adds	r3, #4
 8006e60:	2101      	movs	r1, #1
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fbda 	bl	800861c <RCCEx_PLL2_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e6c:	e00c      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	2101      	movs	r1, #1
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 fc83 	bl	8008780 <RCCEx_PLL3_Config>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e7e:	e003      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]
      break;
 8006e84:	e000      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d110      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e8e:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	f023 0207 	bic.w	r2, r3, #7
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9a:	4902      	ldr	r1, [pc, #8]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	654b      	str	r3, [r1, #84]	; 0x54
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006ea2:	bf00      	nop
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	58024800 	.word	0x58024800
 8006eac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d039      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	2b05      	cmp	r3, #5
 8006ec8:	d820      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006f13 	.word	0x08006f13
 8006ed4:	08006ee9 	.word	0x08006ee9
 8006ed8:	08006efb 	.word	0x08006efb
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	2101      	movs	r1, #1
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fb94 	bl	800861c <RCCEx_PLL2_Config>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ef8:	e00c      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3324      	adds	r3, #36	; 0x24
 8006efe:	2101      	movs	r1, #1
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 fc3d 	bl	8008780 <RCCEx_PLL3_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006f0a:	e003      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f1a:	4bb7      	ldr	r3, [pc, #732]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1e:	f023 0207 	bic.w	r2, r3, #7
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f28:	49b3      	ldr	r1, [pc, #716]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f2e:	e001      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d04b      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f4a:	d02e      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f50:	d828      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d02a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5c:	d822      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f62:	d026      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f68:	d81c      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6e:	d010      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f74:	d816      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01d      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7e:	d111      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 fb48 	bl	800861c <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f90:	e012      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3324      	adds	r3, #36	; 0x24
 8006f96:	2102      	movs	r1, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fbf1 	bl	8008780 <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006fa2:	e009      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006faa:	bf00      	nop
 8006fac:	e004      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fbe:	4b8e      	ldr	r3, [pc, #568]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fcc:	498a      	ldr	r1, [pc, #552]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	654b      	str	r3, [r1, #84]	; 0x54
 8006fd2:	e001      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d04b      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006fee:	d02e      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006ff0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ff4:	d828      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d02a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d822      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007006:	d026      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800700c:	d81c      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800700e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007012:	d010      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007018:	d816      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01d      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800701e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007022:	d111      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f001 faf6 	bl	800861c <RCCEx_PLL2_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007034:	e012      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3324      	adds	r3, #36	; 0x24
 800703a:	2102      	movs	r1, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fb9f 	bl	8008780 <RCCEx_PLL3_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007046:	e009      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	75fb      	strb	r3, [r7, #23]
      break;
 800704c:	e006      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800704e:	bf00      	nop
 8007050:	e004      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800705a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007062:	4b65      	ldr	r3, [pc, #404]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007066:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007070:	4961      	ldr	r1, [pc, #388]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007072:	4313      	orrs	r3, r2
 8007074:	658b      	str	r3, [r1, #88]	; 0x58
 8007076:	e001      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007084:	2b00      	cmp	r3, #0
 8007086:	d04b      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800708e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007092:	d02e      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007094:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007098:	d828      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800709a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709e:	d02a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80070a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a4:	d822      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80070a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070aa:	d026      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80070ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070b0:	d81c      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80070b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b6:	d010      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80070b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070bc:	d816      	bhi.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d01d      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80070c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c6:	d111      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 faa4 	bl	800861c <RCCEx_PLL2_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070d8:	e012      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	2102      	movs	r1, #2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 fb4d 	bl	8008780 <RCCEx_PLL3_Config>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80070ea:	e009      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	75fb      	strb	r3, [r7, #23]
      break;
 80070f0:	e006      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070f2:	bf00      	nop
 80070f4:	e004      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070f6:	bf00      	nop
 80070f8:	e002      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070fa:	bf00      	nop
 80070fc:	e000      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80070fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007106:	4b3c      	ldr	r3, [pc, #240]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007114:	4938      	ldr	r1, [pc, #224]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007116:	4313      	orrs	r3, r2
 8007118:	658b      	str	r3, [r1, #88]	; 0x58
 800711a:	e001      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d10a      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3324      	adds	r3, #36	; 0x24
 800713c:	2102      	movs	r1, #2
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fb1e 	bl	8008780 <RCCEx_PLL3_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800714e:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007152:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800715c:	4926      	ldr	r1, [pc, #152]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800715e:	4313      	orrs	r3, r2
 8007160:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01a      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007178:	d10a      	bne.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3324      	adds	r3, #36	; 0x24
 800717e:	2102      	movs	r1, #2
 8007180:	4618      	mov	r0, r3
 8007182:	f001 fafd 	bl	8008780 <RCCEx_PLL3_Config>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007190:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800719e:	4916      	ldr	r1, [pc, #88]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d036      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ba:	d01f      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80071bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c0:	d817      	bhi.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ca:	d009      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80071cc:	e011      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3304      	adds	r3, #4
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 fa21 	bl	800861c <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071de:	e00e      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	2102      	movs	r1, #2
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 faca 	bl	8008780 <RCCEx_PLL3_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80071f0:	e005      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	75fb      	strb	r3, [r7, #23]
      break;
 80071f6:	e002      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80071f8:	58024400 	.word	0x58024400
      break;
 80071fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007204:	4b93      	ldr	r3, [pc, #588]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007212:	4990      	ldr	r1, [pc, #576]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	658b      	str	r3, [r1, #88]	; 0x58
 8007218:	e001      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d033      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007230:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007234:	d01c      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007236:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800723a:	d816      	bhi.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800723c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007240:	d003      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007246:	d007      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007248:	e00f      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800724a:	4b82      	ldr	r3, [pc, #520]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	4a81      	ldr	r2, [pc, #516]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007254:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007256:	e00c      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fa8e 	bl	8008780 <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007268:	e003      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
      break;
 800726e:	e000      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007278:	4b76      	ldr	r3, [pc, #472]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800727a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007286:	4973      	ldr	r1, [pc, #460]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	654b      	str	r3, [r1, #84]	; 0x54
 800728c:	e001      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d029      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80072a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072aa:	d007      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80072ac:	e00f      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ae:	4b69      	ldr	r3, [pc, #420]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	4a68      	ldr	r2, [pc, #416]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80072ba:	e00b      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 f9aa 	bl	800861c <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80072cc:	e002      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
      break;
 80072d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80072da:	4b5e      	ldr	r3, [pc, #376]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e6:	495b      	ldr	r1, [pc, #364]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072ec:	e001      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3324      	adds	r3, #36	; 0x24
 8007302:	2102      	movs	r1, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f001 fa3b 	bl	8008780 <RCCEx_PLL3_Config>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d030      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007328:	d017      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800732a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732e:	d811      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007334:	d013      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800733a:	d80b      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d010      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007344:	d106      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007346:	4b43      	ldr	r3, [pc, #268]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	4a42      	ldr	r2, [pc, #264]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800734c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007352:	e007      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
      break;
 8007358:	e004      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800736a:	4b3a      	ldr	r3, [pc, #232]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007376:	4937      	ldr	r1, [pc, #220]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	654b      	str	r3, [r1, #84]	; 0x54
 800737c:	e001      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d008      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800738e:	4b31      	ldr	r3, [pc, #196]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007392:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	492e      	ldr	r1, [pc, #184]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80073ac:	4b29      	ldr	r3, [pc, #164]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80073ba:	4926      	ldr	r1, [pc, #152]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d8:	491e      	ldr	r1, [pc, #120]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00d      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	4a19      	ldr	r2, [pc, #100]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073f4:	6113      	str	r3, [r2, #16]
 80073f6:	4b17      	ldr	r3, [pc, #92]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80073f8:	691a      	ldr	r2, [r3, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007400:	4914      	ldr	r1, [pc, #80]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007402:	4313      	orrs	r3, r2
 8007404:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da08      	bge.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741a:	490e      	ldr	r1, [pc, #56]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800741c:	4313      	orrs	r3, r2
 800741e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800742e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	4906      	ldr	r1, [pc, #24]	; (8007454 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800743c:	4313      	orrs	r3, r2
 800743e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007440:	7dbb      	ldrb	r3, [r7, #22]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	58024400 	.word	0x58024400

08007458 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b090      	sub	sp, #64	; 0x40
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007466:	f040 8095 	bne.w	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800746a:	4bae      	ldr	r3, [pc, #696]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800746c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	633b      	str	r3, [r7, #48]	; 0x30
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	2b04      	cmp	r3, #4
 8007478:	f200 8088 	bhi.w	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007499 	.word	0x08007499
 8007488:	080074c1 	.word	0x080074c1
 800748c:	080074e9 	.word	0x080074e9
 8007490:	08007585 	.word	0x08007585
 8007494:	08007511 	.word	0x08007511

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007498:	4ba2      	ldr	r3, [pc, #648]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074a4:	d108      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 ff64 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074b4:	f000 bc95 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074bc:	f000 bc91 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074c0:	4b98      	ldr	r3, [pc, #608]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074cc:	d108      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ce:	f107 0318 	add.w	r3, r7, #24
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fca8 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074dc:	f000 bc81 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e4:	f000 bc7d 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074e8:	4b8e      	ldr	r3, [pc, #568]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f4:	d108      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fde8 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007504:	f000 bc6d 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800750c:	f000 bc69 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007510:	4b84      	ldr	r3, [pc, #528]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007518:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800751a:	4b82      	ldr	r3, [pc, #520]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b04      	cmp	r3, #4
 8007524:	d10c      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800752c:	4b7d      	ldr	r3, [pc, #500]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	08db      	lsrs	r3, r3, #3
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	4a7c      	ldr	r2, [pc, #496]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753e:	e01f      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007540:	4b78      	ldr	r3, [pc, #480]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800754c:	d106      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007554:	d102      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007556:	4b75      	ldr	r3, [pc, #468]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800755a:	e011      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800755c:	4b71      	ldr	r3, [pc, #452]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007568:	d106      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007570:	d102      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007572:	4b6f      	ldr	r3, [pc, #444]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007576:	e003      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800757c:	f000 bc31 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007580:	f000 bc2f 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007584:	4b6b      	ldr	r3, [pc, #428]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007588:	f000 bc2b 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007590:	f000 bc27 	b.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759a:	f040 8095 	bne.w	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800759e:	4b61      	ldr	r3, [pc, #388]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80075a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ae:	d04d      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b6:	f200 8084 	bhi.w	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	2bc0      	cmp	r3, #192	; 0xc0
 80075be:	d07d      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d87d      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d02d      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d877      	bhi.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d012      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80075de:	e070      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075e0:	4b50      	ldr	r3, [pc, #320]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ec:	d107      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fec0 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075fc:	e3f1      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007602:	e3ee      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007604:	4b47      	ldr	r3, [pc, #284]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800760c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007610:	d107      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007612:	f107 0318 	add.w	r3, r7, #24
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fc06 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007620:	e3df      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007626:	e3dc      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007628:	4b3e      	ldr	r3, [pc, #248]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007634:	d107      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007636:	f107 030c 	add.w	r3, r7, #12
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fd48 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007644:	e3cd      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800764a:	e3ca      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800764c:	4b35      	ldr	r3, [pc, #212]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800764e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007654:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007656:	4b33      	ldr	r3, [pc, #204]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b04      	cmp	r3, #4
 8007660:	d10c      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007668:	4b2e      	ldr	r3, [pc, #184]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	08db      	lsrs	r3, r3, #3
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767a:	e01e      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800767c:	4b29      	ldr	r3, [pc, #164]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007688:	d106      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007690:	d102      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007692:	4b26      	ldr	r3, [pc, #152]	; (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007696:	e010      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007698:	4b22      	ldr	r3, [pc, #136]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a4:	d106      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ac:	d102      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80076ae:	4b20      	ldr	r3, [pc, #128]	; (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b2:	e002      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80076b8:	e393      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80076ba:	e392      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c0:	e38f      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c6:	e38c      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ce:	f040 80a7 	bne.w	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80076d2:	4b14      	ldr	r3, [pc, #80]	; (8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80076d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80076da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076e2:	d05f      	beq.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076ea:	f200 8096 	bhi.w	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076f4:	f000 808e 	beq.w	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076fe:	f200 808c 	bhi.w	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007708:	d03a      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007710:	f200 8083 	bhi.w	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007720:	d01c      	beq.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8007722:	e07a      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007724:	58024400 	.word	0x58024400
 8007728:	03d09000 	.word	0x03d09000
 800772c:	003d0900 	.word	0x003d0900
 8007730:	007a1200 	.word	0x007a1200
 8007734:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007738:	4baa      	ldr	r3, [pc, #680]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007744:	d107      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fe14 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007754:	e345      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800775a:	e342      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800775c:	4ba1      	ldr	r3, [pc, #644]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007768:	d107      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800776a:	f107 0318 	add.w	r3, r7, #24
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fb5a 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007778:	e333      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777e:	e330      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007780:	4b98      	ldr	r3, [pc, #608]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778c:	d107      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800778e:	f107 030c 	add.w	r3, r7, #12
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fc9c 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800779c:	e321      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a2:	e31e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077a4:	4b8f      	ldr	r3, [pc, #572]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077ae:	4b8d      	ldr	r3, [pc, #564]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077c0:	4b88      	ldr	r3, [pc, #544]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	08db      	lsrs	r3, r3, #3
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	4a87      	ldr	r2, [pc, #540]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
 80077d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d2:	e01e      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077d4:	4b83      	ldr	r3, [pc, #524]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e0:	d106      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80077e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077e8:	d102      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80077ea:	4b80      	ldr	r3, [pc, #512]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ee:	e010      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077f0:	4b7c      	ldr	r3, [pc, #496]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fc:	d106      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007804:	d102      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007806:	4b7a      	ldr	r3, [pc, #488]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800780a:	e002      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007810:	e2e7      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007812:	e2e6      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007814:	4b77      	ldr	r3, [pc, #476]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007818:	e2e3      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781e:	e2e0      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007826:	f040 809c 	bne.w	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800782a:	4b6e      	ldr	r3, [pc, #440]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007832:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800783a:	d054      	beq.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007842:	f200 808b 	bhi.w	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800784c:	f000 8083 	beq.w	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007856:	f200 8081 	bhi.w	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007860:	d02f      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007868:	d878      	bhi.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007876:	d012      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007878:	e070      	b.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800787a:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007886:	d107      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800788c:	4618      	mov	r0, r3
 800788e:	f000 fd73 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007896:	e2a4      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789c:	e2a1      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800789e:	4b51      	ldr	r3, [pc, #324]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078aa:	d107      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ac:	f107 0318 	add.w	r3, r7, #24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fab9 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80078ba:	e292      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c0:	e28f      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078c2:	4b48      	ldr	r3, [pc, #288]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ce:	d107      	bne.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fbfb 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078de:	e280      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e4:	e27d      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078e6:	4b3f      	ldr	r3, [pc, #252]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078f0:	4b3c      	ldr	r3, [pc, #240]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d10c      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007902:	4b38      	ldr	r3, [pc, #224]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	08db      	lsrs	r3, r3, #3
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	4a36      	ldr	r2, [pc, #216]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007914:	e01e      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007916:	4b33      	ldr	r3, [pc, #204]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007922:	d106      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800792a:	d102      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800792c:	4b2f      	ldr	r3, [pc, #188]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007930:	e010      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007932:	4b2c      	ldr	r3, [pc, #176]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800793e:	d106      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007946:	d102      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007948:	4b29      	ldr	r3, [pc, #164]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794c:	e002      	b.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007952:	e246      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007954:	e245      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007956:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795a:	e242      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007960:	e23f      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007968:	f040 80a8 	bne.w	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800796c:	4b1d      	ldr	r3, [pc, #116]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007974:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800797c:	d060      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007984:	f200 8097 	bhi.w	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800798e:	f000 808f 	beq.w	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007998:	f200 808d 	bhi.w	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a2:	d03b      	beq.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079aa:	f200 8084 	bhi.w	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ba:	d01d      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80079bc:	e07b      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079ca:	d107      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fcd1 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079da:	e202      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e0:	e1ff      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80079e2:	bf00      	nop
 80079e4:	58024400 	.word	0x58024400
 80079e8:	03d09000 	.word	0x03d09000
 80079ec:	003d0900 	.word	0x003d0900
 80079f0:	007a1200 	.word	0x007a1200
 80079f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079f8:	4ba3      	ldr	r3, [pc, #652]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a04:	d107      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a06:	f107 0318 	add.w	r3, r7, #24
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fa0c 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a14:	e1e5      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1a:	e1e2      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a1c:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a28:	d107      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a2a:	f107 030c 	add.w	r3, r7, #12
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fb4e 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a38:	e1d3      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a3e:	e1d0      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a40:	4b91      	ldr	r3, [pc, #580]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a4a:	4b8f      	ldr	r3, [pc, #572]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a5c:	4b8a      	ldr	r3, [pc, #552]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	08db      	lsrs	r3, r3, #3
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	4a89      	ldr	r2, [pc, #548]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a6e:	e01e      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a70:	4b85      	ldr	r3, [pc, #532]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7c:	d106      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a84:	d102      	bne.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a86:	4b82      	ldr	r3, [pc, #520]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a8a:	e010      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a8c:	4b7e      	ldr	r3, [pc, #504]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a98:	d106      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa0:	d102      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007aa2:	4b7c      	ldr	r3, [pc, #496]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa6:	e002      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007aac:	e199      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007aae:	e198      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ab0:	4b79      	ldr	r3, [pc, #484]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab4:	e195      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aba:	e192      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ac2:	d173      	bne.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007ac4:	4b70      	ldr	r3, [pc, #448]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007acc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ad4:	d02f      	beq.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007adc:	d863      	bhi.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aea:	d012      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007aec:	e05b      	b.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aee:	4b66      	ldr	r3, [pc, #408]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007afa:	d107      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007afc:	f107 0318 	add.w	r3, r7, #24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f991 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b0a:	e16a      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b10:	e167      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b12:	4b5d      	ldr	r3, [pc, #372]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1e:	d107      	bne.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fad3 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b2e:	e158      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b34:	e155      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b36:	4b54      	ldr	r3, [pc, #336]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b40:	4b51      	ldr	r3, [pc, #324]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d10c      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b52:	4b4d      	ldr	r3, [pc, #308]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	08db      	lsrs	r3, r3, #3
 8007b58:	f003 0303 	and.w	r3, r3, #3
 8007b5c:	4a4b      	ldr	r2, [pc, #300]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b64:	e01e      	b.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b66:	4b48      	ldr	r3, [pc, #288]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b72:	d106      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b7a:	d102      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b7c:	4b44      	ldr	r3, [pc, #272]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b80:	e010      	b.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b82:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b8e:	d106      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b96:	d102      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b98:	4b3e      	ldr	r3, [pc, #248]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b9c:	e002      	b.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ba2:	e11e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ba4:	e11d      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007baa:	e11a      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb2:	d133      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007bb4:	4b34      	ldr	r3, [pc, #208]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bca:	d012      	beq.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007bcc:	e023      	b.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bda:	d107      	bne.n	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fbc9 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bea:	e0fa      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf0:	e0f7      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf2:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c00:	f107 0318 	add.w	r3, r7, #24
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 f90f 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c0e:	e0e8      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c14:	e0e5      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1a:	e0e2      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c22:	f040 808f 	bne.w	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007c2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c36:	d075      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c3e:	d87e      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d060      	beq.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4e:	d876      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c56:	d045      	beq.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c5e:	d86e      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c66:	d02b      	beq.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c6e:	d866      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d004      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7c:	d00e      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007c7e:	e05e      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007c80:	f000 f8bc 	bl	8007dfc <HAL_RCCEx_GetD3PCLK1Freq>
 8007c84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007c86:	e0ac      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	03d09000 	.word	0x03d09000
 8007c90:	003d0900 	.word	0x003d0900
 8007c94:	007a1200 	.word	0x007a1200
 8007c98:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c9c:	4b53      	ldr	r3, [pc, #332]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ca8:	d107      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007caa:	f107 0318 	add.w	r3, r7, #24
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 f8ba 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007cb8:	e093      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cbe:	e090      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cc0:	4b4a      	ldr	r3, [pc, #296]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ccc:	d107      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f9fc 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007cdc:	e081      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce2:	e07e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ce4:	4b41      	ldr	r3, [pc, #260]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d109      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cf0:	4b3e      	ldr	r3, [pc, #248]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	08db      	lsrs	r3, r3, #3
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	4a3d      	ldr	r2, [pc, #244]	; (8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d02:	e06e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d08:	e06b      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007d0a:	4b38      	ldr	r3, [pc, #224]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d16:	d102      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007d18:	4b36      	ldr	r3, [pc, #216]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d1c:	e061      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d22:	e05e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d24:	4b31      	ldr	r3, [pc, #196]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d30:	d102      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007d32:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d36:	e054      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3c:	e051      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d42:	e04e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d4a:	d148      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007d4c:	4b27      	ldr	r3, [pc, #156]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d5c:	d02a      	beq.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d64:	d838      	bhi.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d004      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d72:	d00d      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007d74:	e030      	b.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d76:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d82:	d102      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007d84:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007d88:	e02b      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d8e:	e028      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d90:	4b16      	ldr	r3, [pc, #88]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d9c:	d107      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fae8 	bl	8008378 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007dac:	e019      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db2:	e016      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007db4:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc0:	d107      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dc2:	f107 0318 	add.w	r3, r7, #24
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f82e 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007dd0:	e007      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dd6:	e004      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ddc:	e001      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3740      	adds	r7, #64	; 0x40
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	58024400 	.word	0x58024400
 8007df0:	03d09000 	.word	0x03d09000
 8007df4:	003d0900 	.word	0x003d0900
 8007df8:	007a1200 	.word	0x007a1200

08007dfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007e00:	f7fe fb8e 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8007e04:	4602      	mov	r2, r0
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	4904      	ldr	r1, [pc, #16]	; (8007e24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007e12:	5ccb      	ldrb	r3, [r1, r3]
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	58024400 	.word	0x58024400
 8007e24:	0800b014 	.word	0x0800b014

08007e28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b089      	sub	sp, #36	; 0x24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e30:	4ba1      	ldr	r3, [pc, #644]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	f003 0303 	and.w	r3, r3, #3
 8007e38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007e3a:	4b9f      	ldr	r3, [pc, #636]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	0b1b      	lsrs	r3, r3, #12
 8007e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007e46:	4b9c      	ldr	r3, [pc, #624]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	091b      	lsrs	r3, r3, #4
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007e52:	4b99      	ldr	r3, [pc, #612]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e56:	08db      	lsrs	r3, r3, #3
 8007e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8111 	beq.w	8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	f000 8083 	beq.w	8007f84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	f200 80a1 	bhi.w	8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d056      	beq.n	8007f40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e92:	e099      	b.n	8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e94:	4b88      	ldr	r3, [pc, #544]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02d      	beq.n	8007efc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ea0:	4b85      	ldr	r3, [pc, #532]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	08db      	lsrs	r3, r3, #3
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	4a84      	ldr	r2, [pc, #528]	; (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eca:	4b7b      	ldr	r3, [pc, #492]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ede:	eddf 5a78 	vldr	s11, [pc, #480]	; 80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007efa:	e087      	b.n	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0e:	4b6a      	ldr	r3, [pc, #424]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f22:	eddf 5a67 	vldr	s11, [pc, #412]	; 80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f3e:	e065      	b.n	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f52:	4b59      	ldr	r3, [pc, #356]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f66:	eddf 5a56 	vldr	s11, [pc, #344]	; 80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f82:	e043      	b.n	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b48      	ldr	r3, [pc, #288]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007faa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fc6:	e021      	b.n	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b37      	ldr	r3, [pc, #220]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800800a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800800c:	4b2a      	ldr	r3, [pc, #168]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	0a5b      	lsrs	r3, r3, #9
 8008012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008026:	edd7 6a07 	vldr	s13, [r7, #28]
 800802a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800802e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008032:	ee17 2a90 	vmov	r2, s15
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800803a:	4b1f      	ldr	r3, [pc, #124]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008044:	ee07 3a90 	vmov	s15, r3
 8008048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008054:	edd7 6a07 	vldr	s13, [r7, #28]
 8008058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800805c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008060:	ee17 2a90 	vmov	r2, s15
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008068:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	0e1b      	lsrs	r3, r3, #24
 800806e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800807e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008082:	edd7 6a07 	vldr	s13, [r7, #28]
 8008086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800808a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808e:	ee17 2a90 	vmov	r2, s15
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008096:	e008      	b.n	80080aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	609a      	str	r2, [r3, #8]
}
 80080aa:	bf00      	nop
 80080ac:	3724      	adds	r7, #36	; 0x24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	58024400 	.word	0x58024400
 80080bc:	03d09000 	.word	0x03d09000
 80080c0:	46000000 	.word	0x46000000
 80080c4:	4c742400 	.word	0x4c742400
 80080c8:	4a742400 	.word	0x4a742400
 80080cc:	4af42400 	.word	0x4af42400

080080d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b089      	sub	sp, #36	; 0x24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080d8:	4ba1      	ldr	r3, [pc, #644]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	f003 0303 	and.w	r3, r3, #3
 80080e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80080e2:	4b9f      	ldr	r3, [pc, #636]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	0d1b      	lsrs	r3, r3, #20
 80080e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080ee:	4b9c      	ldr	r3, [pc, #624]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f2:	0a1b      	lsrs	r3, r3, #8
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80080fa:	4b99      	ldr	r3, [pc, #612]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fe:	08db      	lsrs	r3, r3, #3
 8008100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8111 	beq.w	8008340 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2b02      	cmp	r3, #2
 8008122:	f000 8083 	beq.w	800822c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b02      	cmp	r3, #2
 800812a:	f200 80a1 	bhi.w	8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d056      	beq.n	80081e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800813a:	e099      	b.n	8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800813c:	4b88      	ldr	r3, [pc, #544]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0320 	and.w	r3, r3, #32
 8008144:	2b00      	cmp	r3, #0
 8008146:	d02d      	beq.n	80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008148:	4b85      	ldr	r3, [pc, #532]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	08db      	lsrs	r3, r3, #3
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	4a84      	ldr	r2, [pc, #528]	; (8008364 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
 8008158:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008172:	4b7b      	ldr	r3, [pc, #492]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008182:	ed97 6a03 	vldr	s12, [r7, #12]
 8008186:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800818a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80081a2:	e087      	b.n	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	ee07 3a90 	vmov	s15, r3
 80081aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800836c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80081b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b6:	4b6a      	ldr	r3, [pc, #424]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081e6:	e065      	b.n	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fa:	4b59      	ldr	r3, [pc, #356]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820a:	ed97 6a03 	vldr	s12, [r7, #12]
 800820e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800822a:	e043      	b.n	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823e:	4b48      	ldr	r3, [pc, #288]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008252:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800826e:	e021      	b.n	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800827e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008282:	4b37      	ldr	r3, [pc, #220]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008292:	ed97 6a03 	vldr	s12, [r7, #12]
 8008296:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008368 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800829a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80082b4:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	0a5b      	lsrs	r3, r3, #9
 80082ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80082d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082da:	ee17 2a90 	vmov	r2, s15
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80082e2:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	0c1b      	lsrs	r3, r3, #16
 80082e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008308:	ee17 2a90 	vmov	r2, s15
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008310:	4b13      	ldr	r3, [pc, #76]	; (8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	0e1b      	lsrs	r3, r3, #24
 8008316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800832a:	edd7 6a07 	vldr	s13, [r7, #28]
 800832e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008336:	ee17 2a90 	vmov	r2, s15
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800833e:	e008      	b.n	8008352 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	609a      	str	r2, [r3, #8]
}
 8008352:	bf00      	nop
 8008354:	3724      	adds	r7, #36	; 0x24
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	58024400 	.word	0x58024400
 8008364:	03d09000 	.word	0x03d09000
 8008368:	46000000 	.word	0x46000000
 800836c:	4c742400 	.word	0x4c742400
 8008370:	4a742400 	.word	0x4a742400
 8008374:	4af42400 	.word	0x4af42400

08008378 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008378:	b480      	push	{r7}
 800837a:	b089      	sub	sp, #36	; 0x24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008380:	4ba0      	ldr	r3, [pc, #640]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800838a:	4b9e      	ldr	r3, [pc, #632]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838e:	091b      	lsrs	r3, r3, #4
 8008390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008394:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008396:	4b9b      	ldr	r3, [pc, #620]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80083a0:	4b98      	ldr	r3, [pc, #608]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a4:	08db      	lsrs	r3, r3, #3
 80083a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 8111 	beq.w	80085e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	f000 8083 	beq.w	80084d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	f200 80a1 	bhi.w	8008516 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d056      	beq.n	800848e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80083e0:	e099      	b.n	8008516 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083e2:	4b88      	ldr	r3, [pc, #544]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02d      	beq.n	800844a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083ee:	4b85      	ldr	r3, [pc, #532]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	08db      	lsrs	r3, r3, #3
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	4a83      	ldr	r2, [pc, #524]	; (8008608 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80083fa:	fa22 f303 	lsr.w	r3, r2, r3
 80083fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008418:	4b7a      	ldr	r3, [pc, #488]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008428:	ed97 6a03 	vldr	s12, [r7, #12]
 800842c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800860c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800843c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008444:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008448:	e087      	b.n	800855a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008454:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845c:	4b69      	ldr	r3, [pc, #420]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008470:	eddf 5a66 	vldr	s11, [pc, #408]	; 800860c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800847c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008488:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800848c:	e065      	b.n	800855a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	ee07 3a90 	vmov	s15, r3
 8008494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008498:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008614 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800849c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a0:	4b58      	ldr	r3, [pc, #352]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a8:	ee07 3a90 	vmov	s15, r3
 80084ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800860c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084d0:	e043      	b.n	800855a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008618 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80084e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e4:	4b47      	ldr	r3, [pc, #284]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ec:	ee07 3a90 	vmov	s15, r3
 80084f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800860c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008510:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008514:	e021      	b.n	800855a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	ee07 3a90 	vmov	s15, r3
 800851c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008520:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008610 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008528:	4b36      	ldr	r3, [pc, #216]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008538:	ed97 6a03 	vldr	s12, [r7, #12]
 800853c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800860c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008554:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008558:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800855a:	4b2a      	ldr	r3, [pc, #168]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	0a5b      	lsrs	r3, r3, #9
 8008560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008574:	edd7 6a07 	vldr	s13, [r7, #28]
 8008578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800857c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008580:	ee17 2a90 	vmov	r2, s15
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008588:	4b1e      	ldr	r3, [pc, #120]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	0c1b      	lsrs	r3, r3, #16
 800858e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800859e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80085a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ae:	ee17 2a90 	vmov	r2, s15
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80085b6:	4b13      	ldr	r3, [pc, #76]	; (8008604 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c0:	ee07 3a90 	vmov	s15, r3
 80085c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085dc:	ee17 2a90 	vmov	r2, s15
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80085e4:	e008      	b.n	80085f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	609a      	str	r2, [r3, #8]
}
 80085f8:	bf00      	nop
 80085fa:	3724      	adds	r7, #36	; 0x24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	58024400 	.word	0x58024400
 8008608:	03d09000 	.word	0x03d09000
 800860c:	46000000 	.word	0x46000000
 8008610:	4c742400 	.word	0x4c742400
 8008614:	4a742400 	.word	0x4a742400
 8008618:	4af42400 	.word	0x4af42400

0800861c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800862a:	4b53      	ldr	r3, [pc, #332]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 800862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b03      	cmp	r3, #3
 8008634:	d101      	bne.n	800863a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e099      	b.n	800876e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800863a:	4b4f      	ldr	r3, [pc, #316]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a4e      	ldr	r2, [pc, #312]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008640:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008646:	f7fa f865 	bl	8002714 <HAL_GetTick>
 800864a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800864c:	e008      	b.n	8008660 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800864e:	f7fa f861 	bl	8002714 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e086      	b.n	800876e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008660:	4b45      	ldr	r3, [pc, #276]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f0      	bne.n	800864e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800866c:	4b42      	ldr	r3, [pc, #264]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	031b      	lsls	r3, r3, #12
 800867a:	493f      	ldr	r1, [pc, #252]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 800867c:	4313      	orrs	r3, r2
 800867e:	628b      	str	r3, [r1, #40]	; 0x28
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	3b01      	subs	r3, #1
 8008686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	3b01      	subs	r3, #1
 8008690:	025b      	lsls	r3, r3, #9
 8008692:	b29b      	uxth	r3, r3
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	3b01      	subs	r3, #1
 800869c:	041b      	lsls	r3, r3, #16
 800869e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	061b      	lsls	r3, r3, #24
 80086ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086b0:	4931      	ldr	r1, [pc, #196]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80086b6:	4b30      	ldr	r3, [pc, #192]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	492d      	ldr	r1, [pc, #180]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80086c8:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	f023 0220 	bic.w	r2, r3, #32
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	4928      	ldr	r1, [pc, #160]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80086da:	4b27      	ldr	r3, [pc, #156]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	4a26      	ldr	r2, [pc, #152]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086e0:	f023 0310 	bic.w	r3, r3, #16
 80086e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ea:	4b24      	ldr	r3, [pc, #144]	; (800877c <RCCEx_PLL2_Config+0x160>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	69d2      	ldr	r2, [r2, #28]
 80086f2:	00d2      	lsls	r2, r2, #3
 80086f4:	4920      	ldr	r1, [pc, #128]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80086fa:	4b1f      	ldr	r3, [pc, #124]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008700:	f043 0310 	orr.w	r3, r3, #16
 8008704:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800870c:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	4a19      	ldr	r2, [pc, #100]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008718:	e00f      	b.n	800873a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d106      	bne.n	800872e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008720:	4b15      	ldr	r3, [pc, #84]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4a14      	ldr	r2, [pc, #80]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800872a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800872c:	e005      	b.n	800873a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	4a11      	ldr	r2, [pc, #68]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008738:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800873a:	4b0f      	ldr	r3, [pc, #60]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a0e      	ldr	r2, [pc, #56]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008746:	f7f9 ffe5 	bl	8002714 <HAL_GetTick>
 800874a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800874c:	e008      	b.n	8008760 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800874e:	f7f9 ffe1 	bl	8002714 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e006      	b.n	800876e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <RCCEx_PLL2_Config+0x15c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0f0      	beq.n	800874e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	58024400 	.word	0x58024400
 800877c:	ffff0007 	.word	0xffff0007

08008780 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800878e:	4b53      	ldr	r3, [pc, #332]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d101      	bne.n	800879e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e099      	b.n	80088d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800879e:	4b4f      	ldr	r3, [pc, #316]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a4e      	ldr	r2, [pc, #312]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80087a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087aa:	f7f9 ffb3 	bl	8002714 <HAL_GetTick>
 80087ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087b0:	e008      	b.n	80087c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087b2:	f7f9 ffaf 	bl	8002714 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d901      	bls.n	80087c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e086      	b.n	80088d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087c4:	4b45      	ldr	r3, [pc, #276]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f0      	bne.n	80087b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80087d0:	4b42      	ldr	r3, [pc, #264]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	051b      	lsls	r3, r3, #20
 80087de:	493f      	ldr	r1, [pc, #252]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	628b      	str	r3, [r1, #40]	; 0x28
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	025b      	lsls	r3, r3, #9
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	3b01      	subs	r3, #1
 8008800:	041b      	lsls	r3, r3, #16
 8008802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	3b01      	subs	r3, #1
 800880e:	061b      	lsls	r3, r3, #24
 8008810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008814:	4931      	ldr	r1, [pc, #196]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800881a:	4b30      	ldr	r3, [pc, #192]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	492d      	ldr	r1, [pc, #180]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008828:	4313      	orrs	r3, r2
 800882a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800882c:	4b2b      	ldr	r3, [pc, #172]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	4928      	ldr	r1, [pc, #160]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 800883a:	4313      	orrs	r3, r2
 800883c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800883e:	4b27      	ldr	r3, [pc, #156]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	4a26      	ldr	r2, [pc, #152]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 800884c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <RCCEx_PLL3_Config+0x160>)
 8008850:	4013      	ands	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	69d2      	ldr	r2, [r2, #28]
 8008856:	00d2      	lsls	r2, r2, #3
 8008858:	4920      	ldr	r1, [pc, #128]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 800885a:	4313      	orrs	r3, r2
 800885c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800885e:	4b1f      	ldr	r3, [pc, #124]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d106      	bne.n	800887e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008870:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008876:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800887a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800887c:	e00f      	b.n	800889e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d106      	bne.n	8008892 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008884:	4b15      	ldr	r3, [pc, #84]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a14      	ldr	r2, [pc, #80]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 800888a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800888e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008890:	e005      	b.n	800889e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	4a11      	ldr	r2, [pc, #68]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 8008898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800889c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a0e      	ldr	r2, [pc, #56]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80088a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088aa:	f7f9 ff33 	bl	8002714 <HAL_GetTick>
 80088ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088b0:	e008      	b.n	80088c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088b2:	f7f9 ff2f 	bl	8002714 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e006      	b.n	80088d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088c4:	4b05      	ldr	r3, [pc, #20]	; (80088dc <RCCEx_PLL3_Config+0x15c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	58024400 	.word	0x58024400
 80088e0:	ffff0007 	.word	0xffff0007

080088e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e0eb      	b.n	8008ad2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a75      	ldr	r2, [pc, #468]	; (8008adc <HAL_SPI_Init+0x1f8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <HAL_SPI_Init+0x46>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a74      	ldr	r2, [pc, #464]	; (8008ae0 <HAL_SPI_Init+0x1fc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00a      	beq.n	800892a <HAL_SPI_Init+0x46>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a72      	ldr	r2, [pc, #456]	; (8008ae4 <HAL_SPI_Init+0x200>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d005      	beq.n	800892a <HAL_SPI_Init+0x46>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d901      	bls.n	800892a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e0d3      	b.n	8008ad2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f8dc 	bl	8008ae8 <SPI_GetPacketSize>
 8008930:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a69      	ldr	r2, [pc, #420]	; (8008adc <HAL_SPI_Init+0x1f8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00c      	beq.n	8008956 <HAL_SPI_Init+0x72>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a67      	ldr	r2, [pc, #412]	; (8008ae0 <HAL_SPI_Init+0x1fc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <HAL_SPI_Init+0x72>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a66      	ldr	r2, [pc, #408]	; (8008ae4 <HAL_SPI_Init+0x200>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d002      	beq.n	8008956 <HAL_SPI_Init+0x72>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b08      	cmp	r3, #8
 8008954:	d811      	bhi.n	800897a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800895a:	4a60      	ldr	r2, [pc, #384]	; (8008adc <HAL_SPI_Init+0x1f8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d009      	beq.n	8008974 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a5e      	ldr	r2, [pc, #376]	; (8008ae0 <HAL_SPI_Init+0x1fc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <HAL_SPI_Init+0x90>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a5d      	ldr	r2, [pc, #372]	; (8008ae4 <HAL_SPI_Init+0x200>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d104      	bne.n	800897e <HAL_SPI_Init+0x9a>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b10      	cmp	r3, #16
 8008978:	d901      	bls.n	800897e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e0a9      	b.n	8008ad2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f8 fdc6 	bl	8001524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0201 	bic.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089b8:	d119      	bne.n	80089ee <HAL_SPI_Init+0x10a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089c2:	d103      	bne.n	80089cc <HAL_SPI_Init+0xe8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d008      	beq.n	80089de <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10c      	bne.n	80089ee <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089dc:	d107      	bne.n	80089ee <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69da      	ldr	r2, [r3, #28]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	431a      	orrs	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a00:	ea42 0103 	orr.w	r1, r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	431a      	orrs	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a4e:	ea42 0103 	orr.w	r1, r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d113      	bne.n	8008a8e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40013000 	.word	0x40013000
 8008ae0:	40003800 	.word	0x40003800
 8008ae4:	40003c00 	.word	0x40003c00

08008ae8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	3301      	adds	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	3307      	adds	r3, #7
 8008b06:	08db      	lsrs	r3, r3, #3
 8008b08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8008b2a:	f7f9 fdf3 	bl	8002714 <HAL_GetTick>
 8008b2e:	60b8      	str	r0, [r7, #8]

  /* Check the SWPMI handle allocation */
  if(hswpmi == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <HAL_SWPMI_Init+0x1e>
  {
    status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
 8008b3a:	e06a      	b.n	8008c12 <HAL_SWPMI_Init+0xf4>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if(hswpmi->State == HAL_SWPMI_STATE_RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <HAL_SWPMI_Init+0x38>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7f8 fe5d 	bl	8001810 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0220 	bic.w	r2, r2, #32
 8008b6c:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x099F);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f640 129f 	movw	r2, #2463	; 0x99f
 8008b76:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7e:	f023 0102 	bic.w	r1, r3, #2
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24


    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6892      	ldr	r2, [r2, #8]
 8008b96:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f023 010f 	bic.w	r1, r3, #15
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    /* Enable the SWPMI transceiver */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPEN);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bc2:	601a      	str	r2, [r3, #0]
    /* Wait on RDYF flag to activate SWPMI */
    if(SWPMI_WaitOnFlagSetUntilTimeout(hswpmi, SWPMI_FLAG_RDYF, tickstart, SWPMI_TRANSCEIVER_RDY_TIMEOUT_VALUE) != HAL_OK)
 8008bc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f824 	bl	8008c1c <SWPMI_WaitOnFlagSetUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_SWPMI_Init+0xc0>
    {
      status = HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	73fb      	strb	r3, [r7, #15]
    }

    if(status == HAL_OK)
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10f      	bne.n	8008c04 <HAL_SWPMI_Init+0xe6>
    {
      hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
      hswpmi->State = HAL_SWPMI_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Enable SWPMI peripheral */
      SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0220 	orr.w	r2, r2, #32
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	e006      	b.n	8008c12 <HAL_SWPMI_Init+0xf4>
    }
    else
    {
      hswpmi->ErrorCode = HAL_SWPMI_ERROR_TRANSCEIVER_NOT_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
      hswpmi->State = HAL_SWPMI_STATE_ERROR;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }

  return status;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SWPMI_WaitOnFlagSetUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef SWPMI_WaitOnFlagSetUntilTimeout(SWPMI_HandleTypeDef *hswpmi, uint32_t Flag, uint32_t Tickstart, uint32_t Timeout)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	75fb      	strb	r3, [r7, #23]

  /* Wait until flag is set */
  while(!(HAL_IS_BIT_SET(hswpmi->Instance->ISR, Flag)))
 8008c2e:	e015      	b.n	8008c5c <SWPMI_WaitOnFlagSetUntilTimeout+0x40>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c30:	f7f9 fd70 	bl	8002714 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d203      	bcs.n	8008c48 <SWPMI_WaitOnFlagSetUntilTimeout+0x2c>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c46:	d102      	bne.n	8008c4e <SWPMI_WaitOnFlagSetUntilTimeout+0x32>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <SWPMI_WaitOnFlagSetUntilTimeout+0x40>
    {
      /* Set the SWPMI state ready to be able to start again the process */
      hswpmi->State = HAL_SWPMI_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      status = HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5a:	e007      	b.n	8008c6c <SWPMI_WaitOnFlagSetUntilTimeout+0x50>
  while(!(HAL_IS_BIT_SET(hswpmi->Instance->ISR, Flag)))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4013      	ands	r3, r2
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d1e1      	bne.n	8008c30 <SWPMI_WaitOnFlagSetUntilTimeout+0x14>
    }
  }

  return status;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e049      	b.n	8008d1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7f8 ff99 	bl	8001bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f000 f9f5 	bl	80090a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e08f      	b.n	8008e58 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d106      	bne.n	8008d52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f88f 	bl	8008e70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2202      	movs	r2, #2
 8008d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6899      	ldr	r1, [r3, #8]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	4b3e      	ldr	r3, [pc, #248]	; (8008e60 <HAL_TIM_Encoder_Init+0x13c>)
 8008d66:	400b      	ands	r3, r1
 8008d68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3304      	adds	r3, #4
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f000 f995 	bl	80090a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4b31      	ldr	r3, [pc, #196]	; (8008e64 <HAL_TIM_Encoder_Init+0x140>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	021b      	lsls	r3, r3, #8
 8008dae:	4313      	orrs	r3, r2
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	4b2b      	ldr	r3, [pc, #172]	; (8008e68 <HAL_TIM_Encoder_Init+0x144>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4b2a      	ldr	r3, [pc, #168]	; (8008e6c <HAL_TIM_Encoder_Init+0x148>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	011a      	lsls	r2, r3, #4
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	031b      	lsls	r3, r3, #12
 8008de4:	4313      	orrs	r3, r2
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008dfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	4313      	orrs	r3, r2
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	fffebff8 	.word	0xfffebff8
 8008e64:	fffffcfc 	.word	0xfffffcfc
 8008e68:	fffff3f3 	.word	0xfffff3f3
 8008e6c:	ffff0f0f 	.word	0xffff0f0f

08008e70 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e0fd      	b.n	800909a <HAL_TIM_PWM_ConfigChannel+0x216>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b14      	cmp	r3, #20
 8008eaa:	f200 80f0 	bhi.w	800908e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	0800908f 	.word	0x0800908f
 8008ebc:	0800908f 	.word	0x0800908f
 8008ec0:	0800908f 	.word	0x0800908f
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	0800908f 	.word	0x0800908f
 8008ecc:	0800908f 	.word	0x0800908f
 8008ed0:	0800908f 	.word	0x0800908f
 8008ed4:	08008f8b 	.word	0x08008f8b
 8008ed8:	0800908f 	.word	0x0800908f
 8008edc:	0800908f 	.word	0x0800908f
 8008ee0:	0800908f 	.word	0x0800908f
 8008ee4:	08008fcb 	.word	0x08008fcb
 8008ee8:	0800908f 	.word	0x0800908f
 8008eec:	0800908f 	.word	0x0800908f
 8008ef0:	0800908f 	.word	0x0800908f
 8008ef4:	0800900d 	.word	0x0800900d
 8008ef8:	0800908f 	.word	0x0800908f
 8008efc:	0800908f 	.word	0x0800908f
 8008f00:	0800908f 	.word	0x0800908f
 8008f04:	0800904d 	.word	0x0800904d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f962 	bl	80091d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0208 	orr.w	r2, r2, #8
 8008f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699a      	ldr	r2, [r3, #24]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0204 	bic.w	r2, r2, #4
 8008f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6999      	ldr	r1, [r3, #24]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	619a      	str	r2, [r3, #24]
      break;
 8008f46:	e0a3      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f9d2 	bl	80092f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6999      	ldr	r1, [r3, #24]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	021a      	lsls	r2, r3, #8
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	619a      	str	r2, [r3, #24]
      break;
 8008f88:	e082      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fa3b 	bl	800940c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0208 	orr.w	r2, r2, #8
 8008fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69da      	ldr	r2, [r3, #28]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0204 	bic.w	r2, r2, #4
 8008fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69d9      	ldr	r1, [r3, #28]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	61da      	str	r2, [r3, #28]
      break;
 8008fc8:	e062      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 faa1 	bl	8009518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69d9      	ldr	r1, [r3, #28]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	021a      	lsls	r2, r3, #8
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	61da      	str	r2, [r3, #28]
      break;
 800900a:	e041      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68b9      	ldr	r1, [r7, #8]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fae8 	bl	80095e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0208 	orr.w	r2, r2, #8
 8009026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0204 	bic.w	r2, r2, #4
 8009036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	691a      	ldr	r2, [r3, #16]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800904a:	e021      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fb2a 	bl	80096ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	021a      	lsls	r2, r3, #8
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800908c:	e000      	b.n	8009090 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800908e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop

080090a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a40      	ldr	r2, [pc, #256]	; (80091b8 <TIM_Base_SetConfig+0x114>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d013      	beq.n	80090e4 <TIM_Base_SetConfig+0x40>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c2:	d00f      	beq.n	80090e4 <TIM_Base_SetConfig+0x40>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a3d      	ldr	r2, [pc, #244]	; (80091bc <TIM_Base_SetConfig+0x118>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00b      	beq.n	80090e4 <TIM_Base_SetConfig+0x40>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a3c      	ldr	r2, [pc, #240]	; (80091c0 <TIM_Base_SetConfig+0x11c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d007      	beq.n	80090e4 <TIM_Base_SetConfig+0x40>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a3b      	ldr	r2, [pc, #236]	; (80091c4 <TIM_Base_SetConfig+0x120>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_Base_SetConfig+0x40>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a3a      	ldr	r2, [pc, #232]	; (80091c8 <TIM_Base_SetConfig+0x124>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d108      	bne.n	80090f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a2f      	ldr	r2, [pc, #188]	; (80091b8 <TIM_Base_SetConfig+0x114>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d01f      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009104:	d01b      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a2c      	ldr	r2, [pc, #176]	; (80091bc <TIM_Base_SetConfig+0x118>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d017      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a2b      	ldr	r2, [pc, #172]	; (80091c0 <TIM_Base_SetConfig+0x11c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a2a      	ldr	r2, [pc, #168]	; (80091c4 <TIM_Base_SetConfig+0x120>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00f      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a29      	ldr	r2, [pc, #164]	; (80091c8 <TIM_Base_SetConfig+0x124>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00b      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a28      	ldr	r2, [pc, #160]	; (80091cc <TIM_Base_SetConfig+0x128>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d007      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a27      	ldr	r2, [pc, #156]	; (80091d0 <TIM_Base_SetConfig+0x12c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d003      	beq.n	800913e <TIM_Base_SetConfig+0x9a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a26      	ldr	r2, [pc, #152]	; (80091d4 <TIM_Base_SetConfig+0x130>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d108      	bne.n	8009150 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a10      	ldr	r2, [pc, #64]	; (80091b8 <TIM_Base_SetConfig+0x114>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d00f      	beq.n	800919c <TIM_Base_SetConfig+0xf8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a12      	ldr	r2, [pc, #72]	; (80091c8 <TIM_Base_SetConfig+0x124>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00b      	beq.n	800919c <TIM_Base_SetConfig+0xf8>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a11      	ldr	r2, [pc, #68]	; (80091cc <TIM_Base_SetConfig+0x128>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d007      	beq.n	800919c <TIM_Base_SetConfig+0xf8>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a10      	ldr	r2, [pc, #64]	; (80091d0 <TIM_Base_SetConfig+0x12c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d003      	beq.n	800919c <TIM_Base_SetConfig+0xf8>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a0f      	ldr	r2, [pc, #60]	; (80091d4 <TIM_Base_SetConfig+0x130>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d103      	bne.n	80091a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	691a      	ldr	r2, [r3, #16]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	615a      	str	r2, [r3, #20]
}
 80091aa:	bf00      	nop
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40000400 	.word	0x40000400
 80091c0:	40000800 	.word	0x40000800
 80091c4:	40000c00 	.word	0x40000c00
 80091c8:	40010400 	.word	0x40010400
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40014400 	.word	0x40014400
 80091d4:	40014800 	.word	0x40014800

080091d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	f023 0201 	bic.w	r2, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4b37      	ldr	r3, [pc, #220]	; (80092e0 <TIM_OC1_SetConfig+0x108>)
 8009204:	4013      	ands	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0303 	bic.w	r3, r3, #3
 800920e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f023 0302 	bic.w	r3, r3, #2
 8009220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	4313      	orrs	r3, r2
 800922a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a2d      	ldr	r2, [pc, #180]	; (80092e4 <TIM_OC1_SetConfig+0x10c>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d00f      	beq.n	8009254 <TIM_OC1_SetConfig+0x7c>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a2c      	ldr	r2, [pc, #176]	; (80092e8 <TIM_OC1_SetConfig+0x110>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00b      	beq.n	8009254 <TIM_OC1_SetConfig+0x7c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a2b      	ldr	r2, [pc, #172]	; (80092ec <TIM_OC1_SetConfig+0x114>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC1_SetConfig+0x7c>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a2a      	ldr	r2, [pc, #168]	; (80092f0 <TIM_OC1_SetConfig+0x118>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC1_SetConfig+0x7c>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a29      	ldr	r2, [pc, #164]	; (80092f4 <TIM_OC1_SetConfig+0x11c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d10c      	bne.n	800926e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f023 0308 	bic.w	r3, r3, #8
 800925a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f023 0304 	bic.w	r3, r3, #4
 800926c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a1c      	ldr	r2, [pc, #112]	; (80092e4 <TIM_OC1_SetConfig+0x10c>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d00f      	beq.n	8009296 <TIM_OC1_SetConfig+0xbe>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a1b      	ldr	r2, [pc, #108]	; (80092e8 <TIM_OC1_SetConfig+0x110>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d00b      	beq.n	8009296 <TIM_OC1_SetConfig+0xbe>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a1a      	ldr	r2, [pc, #104]	; (80092ec <TIM_OC1_SetConfig+0x114>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d007      	beq.n	8009296 <TIM_OC1_SetConfig+0xbe>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a19      	ldr	r2, [pc, #100]	; (80092f0 <TIM_OC1_SetConfig+0x118>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d003      	beq.n	8009296 <TIM_OC1_SetConfig+0xbe>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a18      	ldr	r2, [pc, #96]	; (80092f4 <TIM_OC1_SetConfig+0x11c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d111      	bne.n	80092ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800929c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	621a      	str	r2, [r3, #32]
}
 80092d4:	bf00      	nop
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	fffeff8f 	.word	0xfffeff8f
 80092e4:	40010000 	.word	0x40010000
 80092e8:	40010400 	.word	0x40010400
 80092ec:	40014000 	.word	0x40014000
 80092f0:	40014400 	.word	0x40014400
 80092f4:	40014800 	.word	0x40014800

080092f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f023 0210 	bic.w	r2, r3, #16
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4b34      	ldr	r3, [pc, #208]	; (80093f4 <TIM_OC2_SetConfig+0xfc>)
 8009324:	4013      	ands	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800932e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f023 0320 	bic.w	r3, r3, #32
 8009342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	011b      	lsls	r3, r3, #4
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a29      	ldr	r2, [pc, #164]	; (80093f8 <TIM_OC2_SetConfig+0x100>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC2_SetConfig+0x68>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a28      	ldr	r2, [pc, #160]	; (80093fc <TIM_OC2_SetConfig+0x104>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10d      	bne.n	800937c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	011b      	lsls	r3, r3, #4
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a1e      	ldr	r2, [pc, #120]	; (80093f8 <TIM_OC2_SetConfig+0x100>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00f      	beq.n	80093a4 <TIM_OC2_SetConfig+0xac>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a1d      	ldr	r2, [pc, #116]	; (80093fc <TIM_OC2_SetConfig+0x104>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00b      	beq.n	80093a4 <TIM_OC2_SetConfig+0xac>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <TIM_OC2_SetConfig+0x108>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d007      	beq.n	80093a4 <TIM_OC2_SetConfig+0xac>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a1b      	ldr	r2, [pc, #108]	; (8009404 <TIM_OC2_SetConfig+0x10c>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d003      	beq.n	80093a4 <TIM_OC2_SetConfig+0xac>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a1a      	ldr	r2, [pc, #104]	; (8009408 <TIM_OC2_SetConfig+0x110>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d113      	bne.n	80093cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	feff8fff 	.word	0xfeff8fff
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40010400 	.word	0x40010400
 8009400:	40014000 	.word	0x40014000
 8009404:	40014400 	.word	0x40014400
 8009408:	40014800 	.word	0x40014800

0800940c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	021b      	lsls	r3, r3, #8
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	4313      	orrs	r3, r2
 8009460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a27      	ldr	r2, [pc, #156]	; (8009504 <TIM_OC3_SetConfig+0xf8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d003      	beq.n	8009472 <TIM_OC3_SetConfig+0x66>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a26      	ldr	r2, [pc, #152]	; (8009508 <TIM_OC3_SetConfig+0xfc>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d10d      	bne.n	800948e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	021b      	lsls	r3, r3, #8
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800948c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <TIM_OC3_SetConfig+0xf8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d00f      	beq.n	80094b6 <TIM_OC3_SetConfig+0xaa>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a1b      	ldr	r2, [pc, #108]	; (8009508 <TIM_OC3_SetConfig+0xfc>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d00b      	beq.n	80094b6 <TIM_OC3_SetConfig+0xaa>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a1a      	ldr	r2, [pc, #104]	; (800950c <TIM_OC3_SetConfig+0x100>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d007      	beq.n	80094b6 <TIM_OC3_SetConfig+0xaa>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a19      	ldr	r2, [pc, #100]	; (8009510 <TIM_OC3_SetConfig+0x104>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d003      	beq.n	80094b6 <TIM_OC3_SetConfig+0xaa>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a18      	ldr	r2, [pc, #96]	; (8009514 <TIM_OC3_SetConfig+0x108>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d113      	bne.n	80094de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	621a      	str	r2, [r3, #32]
}
 80094f8:	bf00      	nop
 80094fa:	371c      	adds	r7, #28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	40010000 	.word	0x40010000
 8009508:	40010400 	.word	0x40010400
 800950c:	40014000 	.word	0x40014000
 8009510:	40014400 	.word	0x40014400
 8009514:	40014800 	.word	0x40014800

08009518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	031b      	lsls	r3, r3, #12
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a18      	ldr	r2, [pc, #96]	; (80095d4 <TIM_OC4_SetConfig+0xbc>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d00f      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a17      	ldr	r2, [pc, #92]	; (80095d8 <TIM_OC4_SetConfig+0xc0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00b      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a16      	ldr	r2, [pc, #88]	; (80095dc <TIM_OC4_SetConfig+0xc4>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d007      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a15      	ldr	r2, [pc, #84]	; (80095e0 <TIM_OC4_SetConfig+0xc8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_OC4_SetConfig+0x80>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a14      	ldr	r2, [pc, #80]	; (80095e4 <TIM_OC4_SetConfig+0xcc>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d109      	bne.n	80095ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800959e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	019b      	lsls	r3, r3, #6
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	621a      	str	r2, [r3, #32]
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	40010000 	.word	0x40010000
 80095d8:	40010400 	.word	0x40010400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40014400 	.word	0x40014400
 80095e4:	40014800 	.word	0x40014800

080095e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009628:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a17      	ldr	r2, [pc, #92]	; (8009698 <TIM_OC5_SetConfig+0xb0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00f      	beq.n	800965e <TIM_OC5_SetConfig+0x76>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a16      	ldr	r2, [pc, #88]	; (800969c <TIM_OC5_SetConfig+0xb4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00b      	beq.n	800965e <TIM_OC5_SetConfig+0x76>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a15      	ldr	r2, [pc, #84]	; (80096a0 <TIM_OC5_SetConfig+0xb8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d007      	beq.n	800965e <TIM_OC5_SetConfig+0x76>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a14      	ldr	r2, [pc, #80]	; (80096a4 <TIM_OC5_SetConfig+0xbc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d003      	beq.n	800965e <TIM_OC5_SetConfig+0x76>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a13      	ldr	r2, [pc, #76]	; (80096a8 <TIM_OC5_SetConfig+0xc0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d109      	bne.n	8009672 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	4313      	orrs	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	621a      	str	r2, [r3, #32]
}
 800968c:	bf00      	nop
 800968e:	371c      	adds	r7, #28
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	40010000 	.word	0x40010000
 800969c:	40010400 	.word	0x40010400
 80096a0:	40014000 	.word	0x40014000
 80096a4:	40014400 	.word	0x40014400
 80096a8:	40014800 	.word	0x40014800

080096ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b087      	sub	sp, #28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	051b      	lsls	r3, r3, #20
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a18      	ldr	r2, [pc, #96]	; (8009760 <TIM_OC6_SetConfig+0xb4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00f      	beq.n	8009724 <TIM_OC6_SetConfig+0x78>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a17      	ldr	r2, [pc, #92]	; (8009764 <TIM_OC6_SetConfig+0xb8>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00b      	beq.n	8009724 <TIM_OC6_SetConfig+0x78>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a16      	ldr	r2, [pc, #88]	; (8009768 <TIM_OC6_SetConfig+0xbc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d007      	beq.n	8009724 <TIM_OC6_SetConfig+0x78>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a15      	ldr	r2, [pc, #84]	; (800976c <TIM_OC6_SetConfig+0xc0>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d003      	beq.n	8009724 <TIM_OC6_SetConfig+0x78>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a14      	ldr	r2, [pc, #80]	; (8009770 <TIM_OC6_SetConfig+0xc4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d109      	bne.n	8009738 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800972a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	029b      	lsls	r3, r3, #10
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	621a      	str	r2, [r3, #32]
}
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40010000 	.word	0x40010000
 8009764:	40010400 	.word	0x40010400
 8009768:	40014000 	.word	0x40014000
 800976c:	40014400 	.word	0x40014400
 8009770:	40014800 	.word	0x40014800

08009774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009788:	2302      	movs	r3, #2
 800978a:	e068      	b.n	800985e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a2e      	ldr	r2, [pc, #184]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d004      	beq.n	80097c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a2d      	ldr	r2, [pc, #180]	; (8009870 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d108      	bne.n	80097d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a1e      	ldr	r2, [pc, #120]	; (800986c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d01d      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fe:	d018      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d013      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a1a      	ldr	r2, [pc, #104]	; (8009878 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00e      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a18      	ldr	r2, [pc, #96]	; (800987c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d009      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a13      	ldr	r2, [pc, #76]	; (8009870 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d004      	beq.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a14      	ldr	r2, [pc, #80]	; (8009880 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d10c      	bne.n	800984c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	4313      	orrs	r3, r2
 8009842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	40010000 	.word	0x40010000
 8009870:	40010400 	.word	0x40010400
 8009874:	40000400 	.word	0x40000400
 8009878:	40000800 	.word	0x40000800
 800987c:	40000c00 	.word	0x40000c00
 8009880:	40001800 	.word	0x40001800

08009884 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009898:	2b01      	cmp	r3, #1
 800989a:	d101      	bne.n	80098a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800989c:	2302      	movs	r3, #2
 800989e:	e065      	b.n	800996c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	041b      	lsls	r3, r3, #16
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a16      	ldr	r2, [pc, #88]	; (8009978 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d004      	beq.n	800992e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a14      	ldr	r2, [pc, #80]	; (800997c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d115      	bne.n	800995a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	051b      	lsls	r3, r3, #20
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	4313      	orrs	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	40010000 	.word	0x40010000
 800997c:	40010400 	.word	0x40010400

08009980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e042      	b.n	8009a18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7f8 fb95 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2224      	movs	r2, #36	; 0x24
 80099ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 0201 	bic.w	r2, r2, #1
 80099c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f82c 	bl	8009a20 <UART_SetConfig>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e022      	b.n	8009a18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d002      	beq.n	80099e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fd80 	bl	800a4e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0201 	orr.w	r2, r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fe07 	bl	800a624 <UART_CheckIdleState>
 8009a16:	4603      	mov	r3, r0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a20:	b5b0      	push	{r4, r5, r7, lr}
 8009a22:	b08e      	sub	sp, #56	; 0x38
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	4bbf      	ldr	r3, [pc, #764]	; (8009d4c <UART_SetConfig+0x32c>)
 8009a4e:	4013      	ands	r3, r2
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a56:	430b      	orrs	r3, r1
 8009a58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4ab5      	ldr	r2, [pc, #724]	; (8009d50 <UART_SetConfig+0x330>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d004      	beq.n	8009a8a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a86:	4313      	orrs	r3, r2
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	4bb0      	ldr	r3, [pc, #704]	; (8009d54 <UART_SetConfig+0x334>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa4:	f023 010f 	bic.w	r1, r3, #15
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4aa7      	ldr	r2, [pc, #668]	; (8009d58 <UART_SetConfig+0x338>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d176      	bne.n	8009bac <UART_SetConfig+0x18c>
 8009abe:	4ba7      	ldr	r3, [pc, #668]	; (8009d5c <UART_SetConfig+0x33c>)
 8009ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ac6:	2b28      	cmp	r3, #40	; 0x28
 8009ac8:	d86c      	bhi.n	8009ba4 <UART_SetConfig+0x184>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <UART_SetConfig+0xb0>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b75 	.word	0x08009b75
 8009ad4:	08009ba5 	.word	0x08009ba5
 8009ad8:	08009ba5 	.word	0x08009ba5
 8009adc:	08009ba5 	.word	0x08009ba5
 8009ae0:	08009ba5 	.word	0x08009ba5
 8009ae4:	08009ba5 	.word	0x08009ba5
 8009ae8:	08009ba5 	.word	0x08009ba5
 8009aec:	08009ba5 	.word	0x08009ba5
 8009af0:	08009b7d 	.word	0x08009b7d
 8009af4:	08009ba5 	.word	0x08009ba5
 8009af8:	08009ba5 	.word	0x08009ba5
 8009afc:	08009ba5 	.word	0x08009ba5
 8009b00:	08009ba5 	.word	0x08009ba5
 8009b04:	08009ba5 	.word	0x08009ba5
 8009b08:	08009ba5 	.word	0x08009ba5
 8009b0c:	08009ba5 	.word	0x08009ba5
 8009b10:	08009b85 	.word	0x08009b85
 8009b14:	08009ba5 	.word	0x08009ba5
 8009b18:	08009ba5 	.word	0x08009ba5
 8009b1c:	08009ba5 	.word	0x08009ba5
 8009b20:	08009ba5 	.word	0x08009ba5
 8009b24:	08009ba5 	.word	0x08009ba5
 8009b28:	08009ba5 	.word	0x08009ba5
 8009b2c:	08009ba5 	.word	0x08009ba5
 8009b30:	08009b8d 	.word	0x08009b8d
 8009b34:	08009ba5 	.word	0x08009ba5
 8009b38:	08009ba5 	.word	0x08009ba5
 8009b3c:	08009ba5 	.word	0x08009ba5
 8009b40:	08009ba5 	.word	0x08009ba5
 8009b44:	08009ba5 	.word	0x08009ba5
 8009b48:	08009ba5 	.word	0x08009ba5
 8009b4c:	08009ba5 	.word	0x08009ba5
 8009b50:	08009b95 	.word	0x08009b95
 8009b54:	08009ba5 	.word	0x08009ba5
 8009b58:	08009ba5 	.word	0x08009ba5
 8009b5c:	08009ba5 	.word	0x08009ba5
 8009b60:	08009ba5 	.word	0x08009ba5
 8009b64:	08009ba5 	.word	0x08009ba5
 8009b68:	08009ba5 	.word	0x08009ba5
 8009b6c:	08009ba5 	.word	0x08009ba5
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e222      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e21e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e21a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e216      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009b94:	2320      	movs	r3, #32
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e212      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009b9c:	2340      	movs	r3, #64	; 0x40
 8009b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba2:	e20e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ba4:	2380      	movs	r3, #128	; 0x80
 8009ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009baa:	e20a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a6b      	ldr	r2, [pc, #428]	; (8009d60 <UART_SetConfig+0x340>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d130      	bne.n	8009c18 <UART_SetConfig+0x1f8>
 8009bb6:	4b69      	ldr	r3, [pc, #420]	; (8009d5c <UART_SetConfig+0x33c>)
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2b05      	cmp	r3, #5
 8009bc0:	d826      	bhi.n	8009c10 <UART_SetConfig+0x1f0>
 8009bc2:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <UART_SetConfig+0x1a8>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009be1 	.word	0x08009be1
 8009bcc:	08009be9 	.word	0x08009be9
 8009bd0:	08009bf1 	.word	0x08009bf1
 8009bd4:	08009bf9 	.word	0x08009bf9
 8009bd8:	08009c01 	.word	0x08009c01
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be6:	e1ec      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009be8:	2304      	movs	r3, #4
 8009bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bee:	e1e8      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009bf0:	2308      	movs	r3, #8
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e1e4      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009bf8:	2310      	movs	r3, #16
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e1e0      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c00:	2320      	movs	r3, #32
 8009c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c06:	e1dc      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c08:	2340      	movs	r3, #64	; 0x40
 8009c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0e:	e1d8      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c10:	2380      	movs	r3, #128	; 0x80
 8009c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c16:	e1d4      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a51      	ldr	r2, [pc, #324]	; (8009d64 <UART_SetConfig+0x344>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d130      	bne.n	8009c84 <UART_SetConfig+0x264>
 8009c22:	4b4e      	ldr	r3, [pc, #312]	; (8009d5c <UART_SetConfig+0x33c>)
 8009c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d826      	bhi.n	8009c7c <UART_SetConfig+0x25c>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <UART_SetConfig+0x214>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c4d 	.word	0x08009c4d
 8009c38:	08009c55 	.word	0x08009c55
 8009c3c:	08009c5d 	.word	0x08009c5d
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c6d 	.word	0x08009c6d
 8009c48:	08009c75 	.word	0x08009c75
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e1b6      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c54:	2304      	movs	r3, #4
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e1b2      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e1ae      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c64:	2310      	movs	r3, #16
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e1aa      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e1a6      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c74:	2340      	movs	r3, #64	; 0x40
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e1a2      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c7c:	2380      	movs	r3, #128	; 0x80
 8009c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c82:	e19e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a37      	ldr	r2, [pc, #220]	; (8009d68 <UART_SetConfig+0x348>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d130      	bne.n	8009cf0 <UART_SetConfig+0x2d0>
 8009c8e:	4b33      	ldr	r3, [pc, #204]	; (8009d5c <UART_SetConfig+0x33c>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f003 0307 	and.w	r3, r3, #7
 8009c96:	2b05      	cmp	r3, #5
 8009c98:	d826      	bhi.n	8009ce8 <UART_SetConfig+0x2c8>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0x280>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009cc1 	.word	0x08009cc1
 8009ca8:	08009cc9 	.word	0x08009cc9
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e180      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e17c      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e178      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e174      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e170      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e16c      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	e168      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a1d      	ldr	r2, [pc, #116]	; (8009d6c <UART_SetConfig+0x34c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d142      	bne.n	8009d80 <UART_SetConfig+0x360>
 8009cfa:	4b18      	ldr	r3, [pc, #96]	; (8009d5c <UART_SetConfig+0x33c>)
 8009cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	d838      	bhi.n	8009d78 <UART_SetConfig+0x358>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <UART_SetConfig+0x2ec>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d25 	.word	0x08009d25
 8009d10:	08009d2d 	.word	0x08009d2d
 8009d14:	08009d35 	.word	0x08009d35
 8009d18:	08009d3d 	.word	0x08009d3d
 8009d1c:	08009d45 	.word	0x08009d45
 8009d20:	08009d71 	.word	0x08009d71
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e14a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d2c:	2304      	movs	r3, #4
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e146      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d34:	2308      	movs	r3, #8
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e142      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e13e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d44:	2320      	movs	r3, #32
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e13a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d4c:	cfff69f3 	.word	0xcfff69f3
 8009d50:	58000c00 	.word	0x58000c00
 8009d54:	11fff4ff 	.word	0x11fff4ff
 8009d58:	40011000 	.word	0x40011000
 8009d5c:	58024400 	.word	0x58024400
 8009d60:	40004400 	.word	0x40004400
 8009d64:	40004800 	.word	0x40004800
 8009d68:	40004c00 	.word	0x40004c00
 8009d6c:	40005000 	.word	0x40005000
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e124      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d78:	2380      	movs	r3, #128	; 0x80
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e120      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4acc      	ldr	r2, [pc, #816]	; (800a0b8 <UART_SetConfig+0x698>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d176      	bne.n	8009e78 <UART_SetConfig+0x458>
 8009d8a:	4bcc      	ldr	r3, [pc, #816]	; (800a0bc <UART_SetConfig+0x69c>)
 8009d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d92:	2b28      	cmp	r3, #40	; 0x28
 8009d94:	d86c      	bhi.n	8009e70 <UART_SetConfig+0x450>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <UART_SetConfig+0x37c>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009e41 	.word	0x08009e41
 8009da0:	08009e71 	.word	0x08009e71
 8009da4:	08009e71 	.word	0x08009e71
 8009da8:	08009e71 	.word	0x08009e71
 8009dac:	08009e71 	.word	0x08009e71
 8009db0:	08009e71 	.word	0x08009e71
 8009db4:	08009e71 	.word	0x08009e71
 8009db8:	08009e71 	.word	0x08009e71
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e71 	.word	0x08009e71
 8009dc4:	08009e71 	.word	0x08009e71
 8009dc8:	08009e71 	.word	0x08009e71
 8009dcc:	08009e71 	.word	0x08009e71
 8009dd0:	08009e71 	.word	0x08009e71
 8009dd4:	08009e71 	.word	0x08009e71
 8009dd8:	08009e71 	.word	0x08009e71
 8009ddc:	08009e51 	.word	0x08009e51
 8009de0:	08009e71 	.word	0x08009e71
 8009de4:	08009e71 	.word	0x08009e71
 8009de8:	08009e71 	.word	0x08009e71
 8009dec:	08009e71 	.word	0x08009e71
 8009df0:	08009e71 	.word	0x08009e71
 8009df4:	08009e71 	.word	0x08009e71
 8009df8:	08009e71 	.word	0x08009e71
 8009dfc:	08009e59 	.word	0x08009e59
 8009e00:	08009e71 	.word	0x08009e71
 8009e04:	08009e71 	.word	0x08009e71
 8009e08:	08009e71 	.word	0x08009e71
 8009e0c:	08009e71 	.word	0x08009e71
 8009e10:	08009e71 	.word	0x08009e71
 8009e14:	08009e71 	.word	0x08009e71
 8009e18:	08009e71 	.word	0x08009e71
 8009e1c:	08009e61 	.word	0x08009e61
 8009e20:	08009e71 	.word	0x08009e71
 8009e24:	08009e71 	.word	0x08009e71
 8009e28:	08009e71 	.word	0x08009e71
 8009e2c:	08009e71 	.word	0x08009e71
 8009e30:	08009e71 	.word	0x08009e71
 8009e34:	08009e71 	.word	0x08009e71
 8009e38:	08009e71 	.word	0x08009e71
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e0bc      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e48:	2304      	movs	r3, #4
 8009e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4e:	e0b8      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e50:	2308      	movs	r3, #8
 8009e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e56:	e0b4      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5e:	e0b0      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e60:	2320      	movs	r3, #32
 8009e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e66:	e0ac      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e68:	2340      	movs	r3, #64	; 0x40
 8009e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6e:	e0a8      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e70:	2380      	movs	r3, #128	; 0x80
 8009e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e76:	e0a4      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a90      	ldr	r2, [pc, #576]	; (800a0c0 <UART_SetConfig+0x6a0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d130      	bne.n	8009ee4 <UART_SetConfig+0x4c4>
 8009e82:	4b8e      	ldr	r3, [pc, #568]	; (800a0bc <UART_SetConfig+0x69c>)
 8009e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d826      	bhi.n	8009edc <UART_SetConfig+0x4bc>
 8009e8e:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0x474>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ead 	.word	0x08009ead
 8009e98:	08009eb5 	.word	0x08009eb5
 8009e9c:	08009ebd 	.word	0x08009ebd
 8009ea0:	08009ec5 	.word	0x08009ec5
 8009ea4:	08009ecd 	.word	0x08009ecd
 8009ea8:	08009ed5 	.word	0x08009ed5
 8009eac:	2300      	movs	r3, #0
 8009eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb2:	e086      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eba:	e082      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec2:	e07e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eca:	e07a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ecc:	2320      	movs	r3, #32
 8009ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed2:	e076      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eda:	e072      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009edc:	2380      	movs	r3, #128	; 0x80
 8009ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee2:	e06e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a76      	ldr	r2, [pc, #472]	; (800a0c4 <UART_SetConfig+0x6a4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d130      	bne.n	8009f50 <UART_SetConfig+0x530>
 8009eee:	4b73      	ldr	r3, [pc, #460]	; (800a0bc <UART_SetConfig+0x69c>)
 8009ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b05      	cmp	r3, #5
 8009ef8:	d826      	bhi.n	8009f48 <UART_SetConfig+0x528>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <UART_SetConfig+0x4e0>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f19 	.word	0x08009f19
 8009f04:	08009f21 	.word	0x08009f21
 8009f08:	08009f29 	.word	0x08009f29
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f39 	.word	0x08009f39
 8009f14:	08009f41 	.word	0x08009f41
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1e:	e050      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f20:	2304      	movs	r3, #4
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f26:	e04c      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2e:	e048      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f30:	2310      	movs	r3, #16
 8009f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f36:	e044      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3e:	e040      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f46:	e03c      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4e:	e038      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a5c      	ldr	r2, [pc, #368]	; (800a0c8 <UART_SetConfig+0x6a8>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d130      	bne.n	8009fbc <UART_SetConfig+0x59c>
 8009f5a:	4b58      	ldr	r3, [pc, #352]	; (800a0bc <UART_SetConfig+0x69c>)
 8009f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5e:	f003 0307 	and.w	r3, r3, #7
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d826      	bhi.n	8009fb4 <UART_SetConfig+0x594>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <UART_SetConfig+0x54c>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f85 	.word	0x08009f85
 8009f70:	08009f8d 	.word	0x08009f8d
 8009f74:	08009f95 	.word	0x08009f95
 8009f78:	08009f9d 	.word	0x08009f9d
 8009f7c:	08009fa5 	.word	0x08009fa5
 8009f80:	08009fad 	.word	0x08009fad
 8009f84:	2302      	movs	r3, #2
 8009f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8a:	e01a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f92:	e016      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f94:	2308      	movs	r3, #8
 8009f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9a:	e012      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa2:	e00e      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009faa:	e00a      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009fac:	2340      	movs	r3, #64	; 0x40
 8009fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb2:	e006      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009fb4:	2380      	movs	r3, #128	; 0x80
 8009fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fba:	e002      	b.n	8009fc2 <UART_SetConfig+0x5a2>
 8009fbc:	2380      	movs	r3, #128	; 0x80
 8009fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a40      	ldr	r2, [pc, #256]	; (800a0c8 <UART_SetConfig+0x6a8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	f040 80ef 	bne.w	800a1ac <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	dc46      	bgt.n	800a064 <UART_SetConfig+0x644>
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	f2c0 8081 	blt.w	800a0de <UART_SetConfig+0x6be>
 8009fdc:	3b02      	subs	r3, #2
 8009fde:	2b1e      	cmp	r3, #30
 8009fe0:	d87d      	bhi.n	800a0de <UART_SetConfig+0x6be>
 8009fe2:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <UART_SetConfig+0x5c8>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	0800a06b 	.word	0x0800a06b
 8009fec:	0800a0df 	.word	0x0800a0df
 8009ff0:	0800a073 	.word	0x0800a073
 8009ff4:	0800a0df 	.word	0x0800a0df
 8009ff8:	0800a0df 	.word	0x0800a0df
 8009ffc:	0800a0df 	.word	0x0800a0df
 800a000:	0800a083 	.word	0x0800a083
 800a004:	0800a0df 	.word	0x0800a0df
 800a008:	0800a0df 	.word	0x0800a0df
 800a00c:	0800a0df 	.word	0x0800a0df
 800a010:	0800a0df 	.word	0x0800a0df
 800a014:	0800a0df 	.word	0x0800a0df
 800a018:	0800a0df 	.word	0x0800a0df
 800a01c:	0800a0df 	.word	0x0800a0df
 800a020:	0800a093 	.word	0x0800a093
 800a024:	0800a0df 	.word	0x0800a0df
 800a028:	0800a0df 	.word	0x0800a0df
 800a02c:	0800a0df 	.word	0x0800a0df
 800a030:	0800a0df 	.word	0x0800a0df
 800a034:	0800a0df 	.word	0x0800a0df
 800a038:	0800a0df 	.word	0x0800a0df
 800a03c:	0800a0df 	.word	0x0800a0df
 800a040:	0800a0df 	.word	0x0800a0df
 800a044:	0800a0df 	.word	0x0800a0df
 800a048:	0800a0df 	.word	0x0800a0df
 800a04c:	0800a0df 	.word	0x0800a0df
 800a050:	0800a0df 	.word	0x0800a0df
 800a054:	0800a0df 	.word	0x0800a0df
 800a058:	0800a0df 	.word	0x0800a0df
 800a05c:	0800a0df 	.word	0x0800a0df
 800a060:	0800a0d1 	.word	0x0800a0d1
 800a064:	2b40      	cmp	r3, #64	; 0x40
 800a066:	d036      	beq.n	800a0d6 <UART_SetConfig+0x6b6>
 800a068:	e039      	b.n	800a0de <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a06a:	f7fd fec7 	bl	8007dfc <HAL_RCCEx_GetD3PCLK1Freq>
 800a06e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a070:	e03b      	b.n	800a0ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a072:	f107 0314 	add.w	r3, r7, #20
 800a076:	4618      	mov	r0, r3
 800a078:	f7fd fed6 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a080:	e033      	b.n	800a0ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a082:	f107 0308 	add.w	r3, r7, #8
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe f822 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a090:	e02b      	b.n	800a0ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a092:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <UART_SetConfig+0x69c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a09e:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <UART_SetConfig+0x69c>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	08db      	lsrs	r3, r3, #3
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	4a08      	ldr	r2, [pc, #32]	; (800a0cc <UART_SetConfig+0x6ac>)
 800a0aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0b0:	e01b      	b.n	800a0ea <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a0b2:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <UART_SetConfig+0x6ac>)
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0b6:	e018      	b.n	800a0ea <UART_SetConfig+0x6ca>
 800a0b8:	40011400 	.word	0x40011400
 800a0bc:	58024400 	.word	0x58024400
 800a0c0:	40007800 	.word	0x40007800
 800a0c4:	40007c00 	.word	0x40007c00
 800a0c8:	58000c00 	.word	0x58000c00
 800a0cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0d0:	4bc4      	ldr	r3, [pc, #784]	; (800a3e4 <UART_SetConfig+0x9c4>)
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d4:	e009      	b.n	800a0ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0dc:	e005      	b.n	800a0ea <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 81da 	beq.w	800a4a6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	4abc      	ldr	r2, [pc, #752]	; (800a3e8 <UART_SetConfig+0x9c8>)
 800a0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	fbb3 f3f2 	udiv	r3, r3, r2
 800a104:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	4613      	mov	r3, r2
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	4413      	add	r3, r2
 800a110:	6a3a      	ldr	r2, [r7, #32]
 800a112:	429a      	cmp	r2, r3
 800a114:	d305      	bcc.n	800a122 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a11c:	6a3a      	ldr	r2, [r7, #32]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d903      	bls.n	800a12a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a128:	e1bd      	b.n	800a4a6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	4618      	mov	r0, r3
 800a12e:	f04f 0100 	mov.w	r1, #0
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a136:	4aac      	ldr	r2, [pc, #688]	; (800a3e8 <UART_SetConfig+0x9c8>)
 800a138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	f04f 0300 	mov.w	r3, #0
 800a142:	f7f6 f8c9 	bl	80002d8 <__aeabi_uldivmod>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4610      	mov	r0, r2
 800a14c:	4619      	mov	r1, r3
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	020b      	lsls	r3, r1, #8
 800a158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a15c:	0202      	lsls	r2, r0, #8
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	6849      	ldr	r1, [r1, #4]
 800a162:	0849      	lsrs	r1, r1, #1
 800a164:	4608      	mov	r0, r1
 800a166:	f04f 0100 	mov.w	r1, #0
 800a16a:	1814      	adds	r4, r2, r0
 800a16c:	eb43 0501 	adc.w	r5, r3, r1
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	461a      	mov	r2, r3
 800a176:	f04f 0300 	mov.w	r3, #0
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f6 f8ab 	bl	80002d8 <__aeabi_uldivmod>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4613      	mov	r3, r2
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a190:	d308      	bcc.n	800a1a4 <UART_SetConfig+0x784>
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a198:	d204      	bcs.n	800a1a4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a0:	60da      	str	r2, [r3, #12]
 800a1a2:	e180      	b.n	800a4a6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1aa:	e17c      	b.n	800a4a6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b4:	f040 80bf 	bne.w	800a336 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a1b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	dc49      	bgt.n	800a254 <UART_SetConfig+0x834>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	db7c      	blt.n	800a2be <UART_SetConfig+0x89e>
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	d87a      	bhi.n	800a2be <UART_SetConfig+0x89e>
 800a1c8:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <UART_SetConfig+0x7b0>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a25b 	.word	0x0800a25b
 800a1d4:	0800a263 	.word	0x0800a263
 800a1d8:	0800a2bf 	.word	0x0800a2bf
 800a1dc:	0800a2bf 	.word	0x0800a2bf
 800a1e0:	0800a26b 	.word	0x0800a26b
 800a1e4:	0800a2bf 	.word	0x0800a2bf
 800a1e8:	0800a2bf 	.word	0x0800a2bf
 800a1ec:	0800a2bf 	.word	0x0800a2bf
 800a1f0:	0800a27b 	.word	0x0800a27b
 800a1f4:	0800a2bf 	.word	0x0800a2bf
 800a1f8:	0800a2bf 	.word	0x0800a2bf
 800a1fc:	0800a2bf 	.word	0x0800a2bf
 800a200:	0800a2bf 	.word	0x0800a2bf
 800a204:	0800a2bf 	.word	0x0800a2bf
 800a208:	0800a2bf 	.word	0x0800a2bf
 800a20c:	0800a2bf 	.word	0x0800a2bf
 800a210:	0800a28b 	.word	0x0800a28b
 800a214:	0800a2bf 	.word	0x0800a2bf
 800a218:	0800a2bf 	.word	0x0800a2bf
 800a21c:	0800a2bf 	.word	0x0800a2bf
 800a220:	0800a2bf 	.word	0x0800a2bf
 800a224:	0800a2bf 	.word	0x0800a2bf
 800a228:	0800a2bf 	.word	0x0800a2bf
 800a22c:	0800a2bf 	.word	0x0800a2bf
 800a230:	0800a2bf 	.word	0x0800a2bf
 800a234:	0800a2bf 	.word	0x0800a2bf
 800a238:	0800a2bf 	.word	0x0800a2bf
 800a23c:	0800a2bf 	.word	0x0800a2bf
 800a240:	0800a2bf 	.word	0x0800a2bf
 800a244:	0800a2bf 	.word	0x0800a2bf
 800a248:	0800a2bf 	.word	0x0800a2bf
 800a24c:	0800a2bf 	.word	0x0800a2bf
 800a250:	0800a2b1 	.word	0x0800a2b1
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d02e      	beq.n	800a2b6 <UART_SetConfig+0x896>
 800a258:	e031      	b.n	800a2be <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a25a:	f7fc f991 	bl	8006580 <HAL_RCC_GetPCLK1Freq>
 800a25e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a260:	e033      	b.n	800a2ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a262:	f7fc f9a3 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
 800a266:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a268:	e02f      	b.n	800a2ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a26a:	f107 0314 	add.w	r3, r7, #20
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fd fdda 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a278:	e027      	b.n	800a2ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a27a:	f107 0308 	add.w	r3, r7, #8
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fd ff26 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a288:	e01f      	b.n	800a2ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a28a:	4b58      	ldr	r3, [pc, #352]	; (800a3ec <UART_SetConfig+0x9cc>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0320 	and.w	r3, r3, #32
 800a292:	2b00      	cmp	r3, #0
 800a294:	d009      	beq.n	800a2aa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a296:	4b55      	ldr	r3, [pc, #340]	; (800a3ec <UART_SetConfig+0x9cc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	08db      	lsrs	r3, r3, #3
 800a29c:	f003 0303 	and.w	r3, r3, #3
 800a2a0:	4a53      	ldr	r2, [pc, #332]	; (800a3f0 <UART_SetConfig+0x9d0>)
 800a2a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2a8:	e00f      	b.n	800a2ca <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a2aa:	4b51      	ldr	r3, [pc, #324]	; (800a3f0 <UART_SetConfig+0x9d0>)
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ae:	e00c      	b.n	800a2ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2b0:	4b4c      	ldr	r3, [pc, #304]	; (800a3e4 <UART_SetConfig+0x9c4>)
 800a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2b4:	e009      	b.n	800a2ca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2bc:	e005      	b.n	800a2ca <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80ea 	beq.w	800a4a6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	4a44      	ldr	r2, [pc, #272]	; (800a3e8 <UART_SetConfig+0x9c8>)
 800a2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e4:	005a      	lsls	r2, r3, #1
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	085b      	lsrs	r3, r3, #1
 800a2ec:	441a      	add	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	2b0f      	cmp	r3, #15
 800a2fe:	d916      	bls.n	800a32e <UART_SetConfig+0x90e>
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a306:	d212      	bcs.n	800a32e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	f023 030f 	bic.w	r3, r3, #15
 800a310:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	b29b      	uxth	r3, r3
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a320:	4313      	orrs	r3, r2
 800a322:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	e0bb      	b.n	800a4a6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a334:	e0b7      	b.n	800a4a6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	dc4a      	bgt.n	800a3d4 <UART_SetConfig+0x9b4>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f2c0 8086 	blt.w	800a450 <UART_SetConfig+0xa30>
 800a344:	2b20      	cmp	r3, #32
 800a346:	f200 8083 	bhi.w	800a450 <UART_SetConfig+0xa30>
 800a34a:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <UART_SetConfig+0x930>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a3db 	.word	0x0800a3db
 800a354:	0800a3f5 	.word	0x0800a3f5
 800a358:	0800a451 	.word	0x0800a451
 800a35c:	0800a451 	.word	0x0800a451
 800a360:	0800a3fd 	.word	0x0800a3fd
 800a364:	0800a451 	.word	0x0800a451
 800a368:	0800a451 	.word	0x0800a451
 800a36c:	0800a451 	.word	0x0800a451
 800a370:	0800a40d 	.word	0x0800a40d
 800a374:	0800a451 	.word	0x0800a451
 800a378:	0800a451 	.word	0x0800a451
 800a37c:	0800a451 	.word	0x0800a451
 800a380:	0800a451 	.word	0x0800a451
 800a384:	0800a451 	.word	0x0800a451
 800a388:	0800a451 	.word	0x0800a451
 800a38c:	0800a451 	.word	0x0800a451
 800a390:	0800a41d 	.word	0x0800a41d
 800a394:	0800a451 	.word	0x0800a451
 800a398:	0800a451 	.word	0x0800a451
 800a39c:	0800a451 	.word	0x0800a451
 800a3a0:	0800a451 	.word	0x0800a451
 800a3a4:	0800a451 	.word	0x0800a451
 800a3a8:	0800a451 	.word	0x0800a451
 800a3ac:	0800a451 	.word	0x0800a451
 800a3b0:	0800a451 	.word	0x0800a451
 800a3b4:	0800a451 	.word	0x0800a451
 800a3b8:	0800a451 	.word	0x0800a451
 800a3bc:	0800a451 	.word	0x0800a451
 800a3c0:	0800a451 	.word	0x0800a451
 800a3c4:	0800a451 	.word	0x0800a451
 800a3c8:	0800a451 	.word	0x0800a451
 800a3cc:	0800a451 	.word	0x0800a451
 800a3d0:	0800a443 	.word	0x0800a443
 800a3d4:	2b40      	cmp	r3, #64	; 0x40
 800a3d6:	d037      	beq.n	800a448 <UART_SetConfig+0xa28>
 800a3d8:	e03a      	b.n	800a450 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3da:	f7fc f8d1 	bl	8006580 <HAL_RCC_GetPCLK1Freq>
 800a3de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3e0:	e03c      	b.n	800a45c <UART_SetConfig+0xa3c>
 800a3e2:	bf00      	nop
 800a3e4:	003d0900 	.word	0x003d0900
 800a3e8:	0800b024 	.word	0x0800b024
 800a3ec:	58024400 	.word	0x58024400
 800a3f0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3f4:	f7fc f8da 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
 800a3f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3fa:	e02f      	b.n	800a45c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3fc:	f107 0314 	add.w	r3, r7, #20
 800a400:	4618      	mov	r0, r3
 800a402:	f7fd fd11 	bl	8007e28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a40a:	e027      	b.n	800a45c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a40c:	f107 0308 	add.w	r3, r7, #8
 800a410:	4618      	mov	r0, r3
 800a412:	f7fd fe5d 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a41a:	e01f      	b.n	800a45c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a41c:	4b2c      	ldr	r3, [pc, #176]	; (800a4d0 <UART_SetConfig+0xab0>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a428:	4b29      	ldr	r3, [pc, #164]	; (800a4d0 <UART_SetConfig+0xab0>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	08db      	lsrs	r3, r3, #3
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	4a28      	ldr	r2, [pc, #160]	; (800a4d4 <UART_SetConfig+0xab4>)
 800a434:	fa22 f303 	lsr.w	r3, r2, r3
 800a438:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a43a:	e00f      	b.n	800a45c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a43c:	4b25      	ldr	r3, [pc, #148]	; (800a4d4 <UART_SetConfig+0xab4>)
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a440:	e00c      	b.n	800a45c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a442:	4b25      	ldr	r3, [pc, #148]	; (800a4d8 <UART_SetConfig+0xab8>)
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a446:	e009      	b.n	800a45c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a44c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a44e:	e005      	b.n	800a45c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a45a:	bf00      	nop
    }

    if (pclk != 0U)
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d021      	beq.n	800a4a6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a466:	4a1d      	ldr	r2, [pc, #116]	; (800a4dc <UART_SetConfig+0xabc>)
 800a468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a46c:	461a      	mov	r2, r3
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	fbb3 f2f2 	udiv	r2, r3, r2
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	085b      	lsrs	r3, r3, #1
 800a47a:	441a      	add	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	fbb2 f3f3 	udiv	r3, r2, r3
 800a484:	b29b      	uxth	r3, r3
 800a486:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	2b0f      	cmp	r3, #15
 800a48c:	d908      	bls.n	800a4a0 <UART_SetConfig+0xa80>
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a494:	d204      	bcs.n	800a4a0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a49c:	60da      	str	r2, [r3, #12]
 800a49e:	e002      	b.n	800a4a6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a4c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3738      	adds	r7, #56	; 0x38
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	58024400 	.word	0x58024400
 800a4d4:	03d09000 	.word	0x03d09000
 800a4d8:	003d0900 	.word	0x003d0900
 800a4dc:	0800b024 	.word	0x0800b024

0800a4e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00a      	beq.n	800a50a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01a      	beq.n	800a5f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5de:	d10a      	bne.n	800a5f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	605a      	str	r2, [r3, #4]
  }
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af02      	add	r7, sp, #8
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a634:	f7f8 f86e 	bl	8002714 <HAL_GetTick>
 800a638:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0308 	and.w	r3, r3, #8
 800a644:	2b08      	cmp	r3, #8
 800a646:	d10e      	bne.n	800a666 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f82f 	bl	800a6ba <UART_WaitOnFlagUntilTimeout>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e025      	b.n	800a6b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b04      	cmp	r3, #4
 800a672:	d10e      	bne.n	800a692 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f819 	bl	800a6ba <UART_WaitOnFlagUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e00f      	b.n	800a6b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2220      	movs	r2, #32
 800a696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2220      	movs	r2, #32
 800a69e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ca:	e062      	b.n	800a792 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d2:	d05e      	beq.n	800a792 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d4:	f7f8 f81e 	bl	8002714 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d302      	bcc.n	800a6ea <UART_WaitOnFlagUntilTimeout+0x30>
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d11d      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	689a      	ldr	r2, [r3, #8]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f022 0201 	bic.w	r2, r2, #1
 800a708:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e045      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b00      	cmp	r3, #0
 800a732:	d02e      	beq.n	800a792 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a73e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a742:	d126      	bne.n	800a792 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a74c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a75c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0201 	bic.w	r2, r2, #1
 800a76c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e00f      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69da      	ldr	r2, [r3, #28]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4013      	ands	r3, r2
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	bf0c      	ite	eq
 800a7a2:	2301      	moveq	r3, #1
 800a7a4:	2300      	movne	r3, #0
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d08d      	beq.n	800a6cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e027      	b.n	800a820 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2224      	movs	r2, #36	; 0x24
 800a7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0201 	bic.w	r2, r2, #1
 800a7f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a840:	2302      	movs	r3, #2
 800a842:	e02d      	b.n	800a8a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2224      	movs	r2, #36	; 0x24
 800a850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f022 0201 	bic.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f84f 	bl	800a924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e02d      	b.n	800a91c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2224      	movs	r2, #36	; 0x24
 800a8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f022 0201 	bic.w	r2, r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f811 	bl	800a924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a930:	2b00      	cmp	r3, #0
 800a932:	d108      	bne.n	800a946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a944:	e031      	b.n	800a9aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a946:	2310      	movs	r3, #16
 800a948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a94a:	2310      	movs	r3, #16
 800a94c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	0e5b      	lsrs	r3, r3, #25
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0307 	and.w	r3, r3, #7
 800a95c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	0f5b      	lsrs	r3, r3, #29
 800a966:	b2db      	uxtb	r3, r3
 800a968:	f003 0307 	and.w	r3, r3, #7
 800a96c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	7b3a      	ldrb	r2, [r7, #12]
 800a972:	4911      	ldr	r1, [pc, #68]	; (800a9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a974:	5c8a      	ldrb	r2, [r1, r2]
 800a976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a97a:	7b3a      	ldrb	r2, [r7, #12]
 800a97c:	490f      	ldr	r1, [pc, #60]	; (800a9bc <UARTEx_SetNbDataToProcess+0x98>)
 800a97e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a980:	fb93 f3f2 	sdiv	r3, r3, r2
 800a984:	b29a      	uxth	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
 800a98e:	7b7a      	ldrb	r2, [r7, #13]
 800a990:	4909      	ldr	r1, [pc, #36]	; (800a9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a992:	5c8a      	ldrb	r2, [r1, r2]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a998:	7b7a      	ldrb	r2, [r7, #13]
 800a99a:	4908      	ldr	r1, [pc, #32]	; (800a9bc <UARTEx_SetNbDataToProcess+0x98>)
 800a99c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a99e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9aa:	bf00      	nop
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	0800b03c 	.word	0x0800b03c
 800a9bc:	0800b044 	.word	0x0800b044

0800a9c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	f107 001c 	add.w	r0, r7, #28
 800a9ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d120      	bne.n	800aa1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	4b2a      	ldr	r3, [pc, #168]	; (800aa94 <USB_CoreInit+0xd4>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d105      	bne.n	800aa0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa60 	bl	800aed4 <USB_CoreReset>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
 800aa18:	e01a      	b.n	800aa50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fa54 	bl	800aed4 <USB_CoreReset>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
 800aa42:	e005      	b.n	800aa50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d116      	bne.n	800aa84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa64:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <USB_CoreInit+0xd8>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	f043 0206 	orr.w	r2, r3, #6
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f043 0220 	orr.w	r2, r3, #32
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa90:	b004      	add	sp, #16
 800aa92:	4770      	bx	lr
 800aa94:	ffbdffbf 	.word	0xffbdffbf
 800aa98:	03ee0000 	.word	0x03ee0000

0800aa9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f023 0201 	bic.w	r2, r3, #1
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	370c      	adds	r7, #12
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr

0800aabe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	460b      	mov	r3, r1
 800aac8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aad6:	78fb      	ldrb	r3, [r7, #3]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d106      	bne.n	800aaea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60da      	str	r2, [r3, #12]
 800aae8:	e00b      	b.n	800ab02 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d106      	bne.n	800aafe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60da      	str	r2, [r3, #12]
 800aafc:	e001      	b.n	800ab02 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e003      	b.n	800ab0a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ab02:	2032      	movs	r0, #50	; 0x32
 800ab04:	f7f7 fe12 	bl	800272c <HAL_Delay>

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab14:	b084      	sub	sp, #16
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b086      	sub	sp, #24
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ab22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ab2e:	2300      	movs	r3, #0
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	e009      	b.n	800ab48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	3340      	adds	r3, #64	; 0x40
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	3301      	adds	r3, #1
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	2b0e      	cmp	r3, #14
 800ab4c:	d9f2      	bls.n	800ab34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ab4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d11c      	bne.n	800ab8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab62:	f043 0302 	orr.w	r3, r3, #2
 800ab66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	e005      	b.n	800ab9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aba0:	461a      	mov	r2, r3
 800aba2:	2300      	movs	r3, #0
 800aba4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abac:	4619      	mov	r1, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb4:	461a      	mov	r2, r3
 800abb6:	680b      	ldr	r3, [r1, #0]
 800abb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d10c      	bne.n	800abda <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d104      	bne.n	800abd0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800abc6:	2100      	movs	r1, #0
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f949 	bl	800ae60 <USB_SetDevSpeed>
 800abce:	e008      	b.n	800abe2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800abd0:	2101      	movs	r1, #1
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f944 	bl	800ae60 <USB_SetDevSpeed>
 800abd8:	e003      	b.n	800abe2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800abda:	2103      	movs	r1, #3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f93f 	bl	800ae60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800abe2:	2110      	movs	r1, #16
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8f3 	bl	800add0 <USB_FlushTxFifo>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f911 	bl	800ae1c <USB_FlushRxFifo>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac16:	461a      	mov	r2, r3
 800ac18:	2300      	movs	r3, #0
 800ac1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac22:	461a      	mov	r2, r3
 800ac24:	2300      	movs	r3, #0
 800ac26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	613b      	str	r3, [r7, #16]
 800ac2c:	e043      	b.n	800acb6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	015a      	lsls	r2, r3, #5
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4413      	add	r3, r2
 800ac36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac44:	d118      	bne.n	800ac78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	e013      	b.n	800ac8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	e008      	b.n	800ac8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac84:	461a      	mov	r2, r3
 800ac86:	2300      	movs	r3, #0
 800ac88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac96:	461a      	mov	r2, r3
 800ac98:	2300      	movs	r3, #0
 800ac9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca8:	461a      	mov	r2, r3
 800acaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800acae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	3301      	adds	r3, #1
 800acb4:	613b      	str	r3, [r7, #16]
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d3b7      	bcc.n	800ac2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
 800acc2:	e043      	b.n	800ad4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acda:	d118      	bne.n	800ad0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acee:	461a      	mov	r2, r3
 800acf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	e013      	b.n	800ad20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad04:	461a      	mov	r2, r3
 800ad06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	e008      	b.n	800ad20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ad44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d3b7      	bcc.n	800acc4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ad74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d105      	bne.n	800ad88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f043 0210 	orr.w	r2, r3, #16
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <USB_DevInit+0x2b4>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	f043 0208 	orr.w	r2, r3, #8
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ada6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d105      	bne.n	800adb8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	699a      	ldr	r2, [r3, #24]
 800adb0:	4b06      	ldr	r3, [pc, #24]	; (800adcc <USB_DevInit+0x2b8>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adc4:	b004      	add	sp, #16
 800adc6:	4770      	bx	lr
 800adc8:	803c3800 	.word	0x803c3800
 800adcc:	40000004 	.word	0x40000004

0800add0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	019b      	lsls	r3, r3, #6
 800ade2:	f043 0220 	orr.w	r2, r3, #32
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3301      	adds	r3, #1
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4a09      	ldr	r2, [pc, #36]	; (800ae18 <USB_FlushTxFifo+0x48>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d901      	bls.n	800adfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e006      	b.n	800ae0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d0f0      	beq.n	800adea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	00030d40 	.word	0x00030d40

0800ae1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2210      	movs	r2, #16
 800ae2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4a09      	ldr	r2, [pc, #36]	; (800ae5c <USB_FlushRxFifo+0x40>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d901      	bls.n	800ae40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e006      	b.n	800ae4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	f003 0310 	and.w	r3, r3, #16
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d0f0      	beq.n	800ae2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	00030d40 	.word	0x00030d40

0800ae60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae80:	4313      	orrs	r3, r2
 800ae82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aeac:	f023 0303 	bic.w	r3, r3, #3
 800aeb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aec0:	f043 0302 	orr.w	r3, r3, #2
 800aec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4a13      	ldr	r2, [pc, #76]	; (800af38 <USB_CoreReset+0x64>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d901      	bls.n	800aef2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e01b      	b.n	800af2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	daf2      	bge.n	800aee0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	f043 0201 	orr.w	r2, r3, #1
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4a09      	ldr	r2, [pc, #36]	; (800af38 <USB_CoreReset+0x64>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d901      	bls.n	800af1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e006      	b.n	800af2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b01      	cmp	r3, #1
 800af26:	d0f0      	beq.n	800af0a <USB_CoreReset+0x36>

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	00030d40 	.word	0x00030d40

0800af3c <__libc_init_array>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	4d0d      	ldr	r5, [pc, #52]	; (800af74 <__libc_init_array+0x38>)
 800af40:	4c0d      	ldr	r4, [pc, #52]	; (800af78 <__libc_init_array+0x3c>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	2600      	movs	r6, #0
 800af48:	42a6      	cmp	r6, r4
 800af4a:	d109      	bne.n	800af60 <__libc_init_array+0x24>
 800af4c:	4d0b      	ldr	r5, [pc, #44]	; (800af7c <__libc_init_array+0x40>)
 800af4e:	4c0c      	ldr	r4, [pc, #48]	; (800af80 <__libc_init_array+0x44>)
 800af50:	f000 f82e 	bl	800afb0 <_init>
 800af54:	1b64      	subs	r4, r4, r5
 800af56:	10a4      	asrs	r4, r4, #2
 800af58:	2600      	movs	r6, #0
 800af5a:	42a6      	cmp	r6, r4
 800af5c:	d105      	bne.n	800af6a <__libc_init_array+0x2e>
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	f855 3b04 	ldr.w	r3, [r5], #4
 800af64:	4798      	blx	r3
 800af66:	3601      	adds	r6, #1
 800af68:	e7ee      	b.n	800af48 <__libc_init_array+0xc>
 800af6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6e:	4798      	blx	r3
 800af70:	3601      	adds	r6, #1
 800af72:	e7f2      	b.n	800af5a <__libc_init_array+0x1e>
 800af74:	0800b054 	.word	0x0800b054
 800af78:	0800b054 	.word	0x0800b054
 800af7c:	0800b054 	.word	0x0800b054
 800af80:	0800b058 	.word	0x0800b058

0800af84 <memcpy>:
 800af84:	440a      	add	r2, r1
 800af86:	4291      	cmp	r1, r2
 800af88:	f100 33ff 	add.w	r3, r0, #4294967295
 800af8c:	d100      	bne.n	800af90 <memcpy+0xc>
 800af8e:	4770      	bx	lr
 800af90:	b510      	push	{r4, lr}
 800af92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af9a:	4291      	cmp	r1, r2
 800af9c:	d1f9      	bne.n	800af92 <memcpy+0xe>
 800af9e:	bd10      	pop	{r4, pc}

0800afa0 <memset>:
 800afa0:	4402      	add	r2, r0
 800afa2:	4603      	mov	r3, r0
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d100      	bne.n	800afaa <memset+0xa>
 800afa8:	4770      	bx	lr
 800afaa:	f803 1b01 	strb.w	r1, [r3], #1
 800afae:	e7f9      	b.n	800afa4 <memset+0x4>

0800afb0 <_init>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	bf00      	nop
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr

0800afbc <_fini>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr
