
AR2ISS_MainCTL_SW_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa5c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad78  0800ad78  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad78  0800ad78  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad80  0800ad80  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800ad88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800ad98  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800adf8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b58  240000d0  0800ae58  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000c28  0800ae58  00020c28  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046856  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000654b  00000000  00000000  00066954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002390  00000000  00000000  0006cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002178  00000000  00000000  0006f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004407e  00000000  00000000  000713a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002fadc  00000000  00000000  000b5426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001b88e9  00000000  00000000  000e4f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0029d7eb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009a8c  00000000  00000000  0029d840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800acdc 	.word	0x0800acdc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800acdc 	.word	0x0800acdc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]
 8000726:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000728:	4b30      	ldr	r3, [pc, #192]	; (80007ec <MX_ADC1_Init+0xe8>)
 800072a:	4a31      	ldr	r2, [pc, #196]	; (80007f0 <MX_ADC1_Init+0xec>)
 800072c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000730:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_ADC1_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000744:	2204      	movs	r2, #4
 8000746:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000756:	2201      	movs	r2, #1
 8000758:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_ADC1_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ADC1_Init+0xe8>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000772:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_ADC1_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000786:	4819      	ldr	r0, [pc, #100]	; (80007ec <MX_ADC1_Init+0xe8>)
 8000788:	f002 f948 	bl	8002a1c <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000792:	f000 fdf3 	bl	800137c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_ADC1_Init+0xe8>)
 80007a2:	f002 ff5b 	bl	800365c <HAL_ADCEx_MultiModeConfigChannel>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007ac:	f000 fde6 	bl	800137c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_ADC1_Init+0xf0>)
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2306      	movs	r3, #6
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c2:	2304      	movs	r3, #4
 80007c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	4619      	mov	r1, r3
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_ADC1_Init+0xe8>)
 80007d4:	f002 fac2 	bl	8002d5c <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007de:	f000 fdcd 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	240000ec 	.word	0x240000ec
 80007f0:	40022000 	.word	0x40022000
 80007f4:	08600004 	.word	0x08600004

080007f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0ba      	sub	sp, #232	; 0xe8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 0318 	add.w	r3, r7, #24
 8000814:	22bc      	movs	r2, #188	; 0xbc
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f00a fa57 	bl	800accc <memset>
  if(adcHandle->Instance==ADC1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a49      	ldr	r2, [pc, #292]	; (8000948 <HAL_ADC_MspInit+0x150>)
 8000824:	4293      	cmp	r3, r2
 8000826:	f040 808a 	bne.w	800093e <HAL_ADC_MspInit+0x146>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800082e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000834:	2381      	movs	r3, #129	; 0x81
 8000836:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 15;
 8000838:	230f      	movs	r3, #15
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fdfe 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000866:	f000 fd89 	bl	800137c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <HAL_ADC_MspInit+0x154>)
 800086c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000870:	4a36      	ldr	r2, [pc, #216]	; (800094c <HAL_ADC_MspInit+0x154>)
 8000872:	f043 0320 	orr.w	r3, r3, #32
 8000876:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <HAL_ADC_MspInit+0x154>)
 800087c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000880:	f003 0320 	and.w	r3, r3, #32
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b30      	ldr	r3, [pc, #192]	; (800094c <HAL_ADC_MspInit+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <HAL_ADC_MspInit+0x154>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b2c      	ldr	r3, [pc, #176]	; (800094c <HAL_ADC_MspInit+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a27      	ldr	r2, [pc, #156]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a20      	ldr	r2, [pc, #128]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_ADC_MspInit+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_INP15
    PA6     ------> ADC1_INP3
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_6;
 80008e2:	2349      	movs	r3, #73	; 0x49
 80008e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	2303      	movs	r3, #3
 80008ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4815      	ldr	r0, [pc, #84]	; (8000950 <HAL_ADC_MspInit+0x158>)
 80008fc:	f004 f940 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000916:	4619      	mov	r1, r3
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <HAL_ADC_MspInit+0x15c>)
 800091a:	f004 f931 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800091e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000932:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_ADC_MspInit+0x160>)
 800093a:	f004 f921 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	37e8      	adds	r7, #232	; 0xe8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000
 800094c:	58024400 	.word	0x58024400
 8000950:	58020000 	.word	0x58020000
 8000954:	58020400 	.word	0x58020400
 8000958:	58021400 	.word	0x58021400

0800095c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2224      	movs	r2, #36	; 0x24
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f00a f9af 	bl	800accc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_DAC1_Init+0x70>)
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_DAC1_Init+0x74>)
 8000972:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_DAC1_Init+0x70>)
 8000976:	f003 f832 	bl	80039de <HAL_DAC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000980:	f000 fcfc 	bl	800137c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_DAC1_Init+0x70>)
 80009a0:	f003 f840 	bl	8003a24 <HAL_DAC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 fce7 	bl	800137c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2210      	movs	r2, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_DAC1_Init+0x70>)
 80009b6:	f003 f835 	bl	8003a24 <HAL_DAC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80009c0:	f000 fcdc 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000150 	.word	0x24000150
 80009d0:	40007400 	.word	0x40007400

080009d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <HAL_DAC_MspInit+0x80>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d129      	bne.n	8000a4a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 80009f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009fc:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 80009fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_DAC_MspInit+0x84>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a32:	2330      	movs	r3, #48	; 0x30
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <HAL_DAC_MspInit+0x88>)
 8000a46:	f004 f89b 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	; 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40007400 	.word	0x40007400
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	58020000 	.word	0x58020000

08000a60 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_ETH_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	3302      	adds	r3, #2
 8000a82:	22e1      	movs	r2, #225	; 0xe1
 8000a84:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	3303      	adds	r3, #3
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_ETH_Init+0x90>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	3305      	adds	r3, #5
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_ETH_Init+0x90>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_ETH_Init+0x90>)
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <MX_ETH_Init+0x98>)
 8000aae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_ETH_Init+0x90>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_ETH_Init+0x9c>)
 8000ab4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_ETH_Init+0x90>)
 8000ab8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000abc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_ETH_Init+0x90>)
 8000ac0:	f003 f8e0 	bl	8003c84 <HAL_ETH_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fc57 	bl	800137c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ace:	2234      	movs	r2, #52	; 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ad4:	f00a f8fa 	bl	800accc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ada:	2221      	movs	r2, #33	; 0x21
 8000adc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ae0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_ETH_Init+0xa0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	24000164 	.word	0x24000164
 8000af4:	40028000 	.word	0x40028000
 8000af8:	24000070 	.word	0x24000070
 8000afc:	24000010 	.word	0x24000010
 8000b00:	240001ec 	.word	0x240001ec

08000b04 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a59      	ldr	r2, [pc, #356]	; (8000c88 <HAL_ETH_MspInit+0x184>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f040 80ab 	bne.w	8000c7e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b28:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b2e:	4a57      	ldr	r2, [pc, #348]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b38:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b4c:	4a4f      	ldr	r2, [pc, #316]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b64:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6a:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b74:	4b45      	ldr	r3, [pc, #276]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b3e      	ldr	r3, [pc, #248]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bfa:	2332      	movs	r3, #50	; 0x32
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <HAL_ETH_MspInit+0x18c>)
 8000c16:	f003 ffb3 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c1a:	2386      	movs	r3, #134	; 0x86
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4817      	ldr	r0, [pc, #92]	; (8000c94 <HAL_ETH_MspInit+0x190>)
 8000c36:	f003 ffa3 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4810      	ldr	r0, [pc, #64]	; (8000c98 <HAL_ETH_MspInit+0x194>)
 8000c58:	f003 ff92 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4808      	ldr	r0, [pc, #32]	; (8000c9c <HAL_ETH_MspInit+0x198>)
 8000c7a:	f003 ff81 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40028000 	.word	0x40028000
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020000 	.word	0x58020000
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	58021800 	.word	0x58021800

08000ca0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000ca6:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <MX_FDCAN1_Init+0xc4>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d12:	2204      	movs	r2, #4
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d48:	2204      	movs	r2, #4
 8000d4a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <MX_FDCAN1_Init+0xc0>)
 8000d4e:	f003 fbaf 	bl	80044b0 <HAL_FDCAN_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d58:	f000 fb10 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	24000220 	.word	0x24000220
 8000d64:	4000a000 	.word	0x4000a000

08000d68 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0b8      	sub	sp, #224	; 0xe0
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22bc      	movs	r2, #188	; 0xbc
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f009 ff9f 	bl	800accc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <HAL_FDCAN_MspInit+0xc0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d142      	bne.n	8000e1e <HAL_FDCAN_MspInit+0xb6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000d9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000da2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 fb57 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000db4:	f000 fae2 	bl	800137c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_FDCAN_MspInit+0xc4>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_FDCAN_MspInit+0xc8>)
 8000e1a:	f003 feb1 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	37e0      	adds	r7, #224	; 0xe0
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	4000a000 	.word	0x4000a000
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58020c00 	.word	0x58020c00

08000e34 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	4a3d      	ldr	r2, [pc, #244]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9a:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_GPIO_Init+0x104>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

}
 8000f2a:	bf00      	nop
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	58024400 	.word	0x58024400

08000f3c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_I2C1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x7c>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f78:	f003 fffa 	bl	8004f70 <HAL_I2C_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f82:	f000 f9fb 	bl	800137c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f8a:	f004 f881 	bl	8005090 <HAL_I2CEx_ConfigAnalogFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f000 f9f2 	bl	800137c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f9c:	f004 f8c3 	bl	8005126 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 f9e9 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	240002c0 	.word	0x240002c0
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	10707dbc 	.word	0x10707dbc

08000fbc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_I2C2_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_I2C2_Init+0x7c>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C2_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C2_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_I2C2_Init+0x74>)
 8000ff8:	f003 ffba 	bl	8004f70 <HAL_I2C_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001002:	f000 f9bb 	bl	800137c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001006:	2100      	movs	r1, #0
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_I2C2_Init+0x74>)
 800100a:	f004 f841 	bl	8005090 <HAL_I2CEx_ConfigAnalogFilter>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001014:	f000 f9b2 	bl	800137c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_I2C2_Init+0x74>)
 800101c:	f004 f883 	bl	8005126 <HAL_I2CEx_ConfigDigitalFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001026:	f000 f9a9 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2400030c 	.word	0x2400030c
 8001034:	40005800 	.word	0x40005800
 8001038:	10707dbc 	.word	0x10707dbc

0800103c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b0ba      	sub	sp, #232	; 0xe8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	22bc      	movs	r2, #188	; 0xbc
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f009 fe35 	bl	800accc <memset>
  if(i2cHandle->Instance==I2C1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a49      	ldr	r2, [pc, #292]	; (800118c <HAL_I2C_MspInit+0x150>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d143      	bne.n	80010f4 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800106c:	2308      	movs	r3, #8
 800106e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f005 f9ee 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001086:	f000 f979 	bl	800137c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <HAL_I2C_MspInit+0x154>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <HAL_I2C_MspInit+0x154>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <HAL_I2C_MspInit+0x154>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80010a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c2:	2304      	movs	r3, #4
 80010c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4831      	ldr	r0, [pc, #196]	; (8001194 <HAL_I2C_MspInit+0x158>)
 80010d0:	f003 fd56 	bl	8004b80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <HAL_I2C_MspInit+0x154>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010da:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <HAL_I2C_MspInit+0x154>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_I2C_MspInit+0x154>)
 80010e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010f2:	e047      	b.n	8001184 <HAL_I2C_MspInit+0x148>
  else if(i2cHandle->Instance==I2C2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_I2C_MspInit+0x15c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d142      	bne.n	8001184 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010fe:	2308      	movs	r3, #8
 8001100:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f9a5 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 8001118:	f000 f930 	bl	800137c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_I2C_MspInit+0x154>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <HAL_I2C_MspInit+0x154>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_I2C_MspInit+0x154>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800113a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800113e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001142:	2312      	movs	r3, #18
 8001144:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001154:	2304      	movs	r3, #4
 8001156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <HAL_I2C_MspInit+0x158>)
 8001162:	f003 fd0d 	bl	8004b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_I2C_MspInit+0x154>)
 8001168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116c:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_I2C_MspInit+0x154>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_I2C_MspInit+0x154>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800117c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
}
 8001184:	bf00      	nop
 8001186:	37e8      	adds	r7, #232	; 0xe8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	58024400 	.word	0x58024400
 8001194:	58020400 	.word	0x58020400
 8001198:	40005800 	.word	0x40005800

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	607b      	str	r3, [r7, #4]
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f001 f98a 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f85c 	bl	8001268 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <main+0xc4>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <main+0xc4>)
 80011b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <main+0xc4>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f003 fea0 	bl	8004f14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2000      	movs	r0, #0
 80011d8:	f003 feb6 	bl	8004f48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80011dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e0:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011e2:	bf00      	nop
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <main+0xc4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d104      	bne.n	80011fa <main+0x5e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	dcf4      	bgt.n	80011e4 <main+0x48>
if ( timeout < 0 )
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da01      	bge.n	8001204 <main+0x68>
{
Error_Handler();
 8001200:	f000 f8bc 	bl	800137c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f7ff fe16 	bl	8000e34 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001208:	f7ff fba8 	bl	800095c <MX_DAC1_Init>
  MX_ETH_Init();
 800120c:	f7ff fc28 	bl	8000a60 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8001210:	f7ff fd46 	bl	8000ca0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8001214:	f7ff fe92 	bl	8000f3c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001218:	f7ff fed0 	bl	8000fbc <MX_I2C2_Init>
//  MX_SDMMC1_SD_Init();
  MX_SPI2_Init();
 800121c:	f000 f8b4 	bl	8001388 <MX_SPI2_Init>
//  MX_SWPMI1_Init();
  MX_TIM1_Init();
 8001220:	f000 fab4 	bl	800178c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001224:	f000 fbcc 	bl	80019c0 <MX_TIM4_Init>
  MX_UART7_Init();
 8001228:	f000 fd34 	bl	8001c94 <MX_UART7_Init>
  MX_USART2_UART_Init();
 800122c:	f000 fdca 	bl	8001dc4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001230:	f000 fe14 	bl	8001e5c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001234:	f000 fe5e 	bl	8001ef4 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001238:	f001 f86c 	bl	8002314 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800123c:	f7ff fa62 	bl	8000704 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001240:	f000 f8f8 	bl	8001434 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001244:	f000 fb62 	bl	800190c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001248:	f000 fd70 	bl	8001d2c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800124c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <main+0xc8>)
 8001252:	f003 fe45 	bl	8004ee0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800125a:	f001 f9c3 	bl	80025e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800125e:	e7f5      	b.n	800124c <main+0xb0>
 8001260:	58024400 	.word	0x58024400
 8001264:	58020400 	.word	0x58020400

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b09c      	sub	sp, #112	; 0x70
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	224c      	movs	r2, #76	; 0x4c
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f009 fd28 	bl	800accc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2220      	movs	r2, #32
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f009 fd22 	bl	800accc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001288:	2004      	movs	r0, #4
 800128a:	f004 f8e1 	bl	8005450 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <SystemClock_Config+0x108>)
 8001294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001296:	4a36      	ldr	r2, [pc, #216]	; (8001370 <SystemClock_Config+0x108>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800129e:	4b34      	ldr	r3, [pc, #208]	; (8001370 <SystemClock_Config+0x108>)
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <SystemClock_Config+0x10c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b0:	4a30      	ldr	r2, [pc, #192]	; (8001374 <SystemClock_Config+0x10c>)
 80012b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <SystemClock_Config+0x10c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012c4:	bf00      	nop
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <SystemClock_Config+0x10c>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012d2:	d1f8      	bne.n	80012c6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <SystemClock_Config+0x110>)
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f023 0303 	bic.w	r3, r3, #3
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <SystemClock_Config+0x110>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012e4:	2303      	movs	r3, #3
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f6:	2302      	movs	r3, #2
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012fa:	2302      	movs	r3, #2
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001302:	2318      	movs	r3, #24
 8001304:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001306:	2302      	movs	r3, #2
 8001308:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800130a:	2304      	movs	r3, #4
 800130c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001312:	230c      	movs	r3, #12
 8001314:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001316:	2300      	movs	r3, #0
 8001318:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f8fe 	bl	8005524 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800132e:	f000 f825 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	233f      	movs	r3, #63	; 0x3f
 8001334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2101      	movs	r1, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f004 fcf4 	bl	8005d44 <HAL_RCC_ClockConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8001362:	f000 f80b 	bl	800137c <Error_Handler>
  }
}
 8001366:	bf00      	nop
 8001368:	3770      	adds	r7, #112	; 0x70
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	58000400 	.word	0x58000400
 8001374:	58024800 	.word	0x58024800
 8001378:	58024400 	.word	0x58024400

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_SPI2_Init+0xa4>)
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <MX_SPI2_Init+0xa8>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <MX_SPI2_Init+0xa4>)
 8001394:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001398:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <MX_SPI2_Init+0xa4>)
 800139c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_SPI2_Init+0xa4>)
 80013a4:	2203      	movs	r2, #3
 80013a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_SPI2_Init+0xa4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_SPI2_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_SPI2_Init+0xa4>)
 80013b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_SPI2_Init+0xa4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_SPI2_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_SPI2_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_SPI2_Init+0xa4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_SPI2_Init+0xa4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_SPI2_Init+0xa4>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_SPI2_Init+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_SPI2_Init+0xa4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_SPI2_Init+0xa4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_SPI2_Init+0xa4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI2_Init+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_SPI2_Init+0xa4>)
 8001402:	2200      	movs	r2, #0
 8001404:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI2_Init+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_SPI2_Init+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI2_Init+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_SPI2_Init+0xa4>)
 800141a:	f007 f9a5 	bl	8008768 <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001424:	f7ff ffaa 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	24000358 	.word	0x24000358
 8001430:	40003800 	.word	0x40003800

08001434 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001438:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800143a:	4a28      	ldr	r2, [pc, #160]	; (80014dc <MX_SPI3_Init+0xa8>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001440:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001444:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800144e:	2203      	movs	r2, #3
 8001450:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001460:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001464:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_SPI3_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_SPI3_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_SPI3_Init+0xa4>)
 80014c4:	f007 f950 	bl	8008768 <HAL_SPI_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80014ce:	f7ff ff55 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	240003e0 	.word	0x240003e0
 80014dc:	40003c00 	.word	0x40003c00

080014e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0bc      	sub	sp, #240	; 0xf0
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	22bc      	movs	r2, #188	; 0xbc
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f009 fbe3 	bl	800accc <memset>
  if(spiHandle->Instance==SPI2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a6d      	ldr	r2, [pc, #436]	; (80016c0 <HAL_SPI_MspInit+0x1e0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d167      	bne.n	80015e0 <HAL_SPI_MspInit+0x100>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001516:	2300      	movs	r3, #0
 8001518:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	4618      	mov	r0, r3
 8001520:	f004 ff9c 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800152a:	f7ff ff27 	bl	800137c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	4b65      	ldr	r3, [pc, #404]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800153e:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4a5c      	ldr	r2, [pc, #368]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156a:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800158c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a2:	2305      	movs	r3, #5
 80015a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015ac:	4619      	mov	r1, r3
 80015ae:	4846      	ldr	r0, [pc, #280]	; (80016c8 <HAL_SPI_MspInit+0x1e8>)
 80015b0:	f003 fae6 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b4:	2308      	movs	r3, #8
 80015b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015cc:	2305      	movs	r3, #5
 80015ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015d6:	4619      	mov	r1, r3
 80015d8:	483c      	ldr	r0, [pc, #240]	; (80016cc <HAL_SPI_MspInit+0x1ec>)
 80015da:	f003 fad1 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80015de:	e06b      	b.n	80016b8 <HAL_SPI_MspInit+0x1d8>
  else if(spiHandle->Instance==SPI3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a3a      	ldr	r2, [pc, #232]	; (80016d0 <HAL_SPI_MspInit+0x1f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d166      	bne.n	80016b8 <HAL_SPI_MspInit+0x1d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 ff2f 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_SPI_MspInit+0x128>
      Error_Handler();
 8001604:	f7ff feba 	bl	800137c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800160a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001614:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_SPI_MspInit+0x1e4>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001662:	2304      	movs	r3, #4
 8001664:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800167a:	2307      	movs	r3, #7
 800167c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001684:	4619      	mov	r1, r3
 8001686:	4810      	ldr	r0, [pc, #64]	; (80016c8 <HAL_SPI_MspInit+0x1e8>)
 8001688:	f003 fa7a 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800168c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001690:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a6:	2306      	movs	r3, #6
 80016a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b0:	4619      	mov	r1, r3
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <HAL_SPI_MspInit+0x1f4>)
 80016b4:	f003 fa64 	bl	8004b80 <HAL_GPIO_Init>
}
 80016b8:	bf00      	nop
 80016ba:	37f0      	adds	r7, #240	; 0xf0
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40003800 	.word	0x40003800
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58020400 	.word	0x58020400
 80016cc:	58020c00 	.word	0x58020c00
 80016d0:	40003c00 	.word	0x40003c00
 80016d4:	58020800 	.word	0x58020800

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_MspInit+0x5c>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e4:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_MspInit+0x5c>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_MspInit+0x5c>)
 80016f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_MspInit+0x5c>)
 80016fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_MspInit+0x5c>)
 8001704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001708:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x5c>)
 800170e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 800171a:	2010      	movs	r0, #16
 800171c:	f000 ff92 	bl	8002644 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001720:	f000 ffb8 	bl	8002694 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 ffa1 	bl	800266c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	58024400 	.word	0x58024400

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 ff0e 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09e      	sub	sp, #120	; 0x78
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001796:	2224      	movs	r2, #36	; 0x24
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f009 fa96 	bl	800accc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	222c      	movs	r2, #44	; 0x2c
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f009 fa80 	bl	800accc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <MX_TIM1_Init+0x178>)
 80017ce:	4a4e      	ldr	r2, [pc, #312]	; (8001908 <MX_TIM1_Init+0x17c>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017d2:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <MX_TIM1_Init+0x178>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <MX_TIM1_Init+0x178>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <MX_TIM1_Init+0x178>)
 80017e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <MX_TIM1_Init+0x178>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <MX_TIM1_Init+0x178>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <MX_TIM1_Init+0x178>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017f8:	4842      	ldr	r0, [pc, #264]	; (8001904 <MX_TIM1_Init+0x178>)
 80017fa:	f007 f8d2 	bl	80089a2 <HAL_TIM_PWM_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001804:	f7ff fdba 	bl	800137c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001808:	2301      	movs	r3, #1
 800180a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800180c:	2300      	movs	r3, #0
 800180e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001810:	2301      	movs	r3, #1
 8001812:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC1Filter = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	667b      	str	r3, [r7, #100]	; 0x64
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800181c:	2300      	movs	r3, #0
 800181e:	66bb      	str	r3, [r7, #104]	; 0x68
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001820:	2301      	movs	r3, #1
 8001822:	66fb      	str	r3, [r7, #108]	; 0x6c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	673b      	str	r3, [r7, #112]	; 0x70
  sConfig.IC2Filter = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800182c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001830:	4619      	mov	r1, r3
 8001832:	4834      	ldr	r0, [pc, #208]	; (8001904 <MX_TIM1_Init+0x178>)
 8001834:	f007 f90c 	bl	8008a50 <HAL_TIM_Encoder_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800183e:	f7ff fd9d 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800184e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001852:	4619      	mov	r1, r3
 8001854:	482b      	ldr	r0, [pc, #172]	; (8001904 <MX_TIM1_Init+0x178>)
 8001856:	f007 fe23 	bl	80094a0 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001860:	f7ff fd8c 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001864:	2360      	movs	r3, #96	; 0x60
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	2208      	movs	r2, #8
 8001886:	4619      	mov	r1, r3
 8001888:	481e      	ldr	r0, [pc, #120]	; (8001904 <MX_TIM1_Init+0x178>)
 800188a:	f007 f991 	bl	8008bb0 <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001894:	f7ff fd72 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	220c      	movs	r2, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <MX_TIM1_Init+0x178>)
 80018a2:	f007 f985 	bl	8008bb0 <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80018ac:	f7ff fd66 	bl	800137c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM1_Init+0x178>)
 80018e6:	f007 fe63 	bl	80095b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80018f0:	f7ff fd44 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM1_Init+0x178>)
 80018f6:	f000 f93f 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 80018fa:	bf00      	nop
 80018fc:	3778      	adds	r7, #120	; 0x78
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	240004b4 	.word	0x240004b4
 8001908:	40010000 	.word	0x40010000

0800190c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_TIM2_Init+0xb0>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_TIM2_Init+0xb0>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001958:	4818      	ldr	r0, [pc, #96]	; (80019bc <MX_TIM2_Init+0xb0>)
 800195a:	f007 f822 	bl	80089a2 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001964:	f7ff fd0a 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001978:	f007 fd92 	bl	80094a0 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001982:	f7ff fcfb 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	; 0x60
 8001988:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM2_Init+0xb0>)
 800199e:	f007 f907 	bl	8008bb0 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80019a8:	f7ff fce8 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM2_Init+0xb0>)
 80019ae:	f000 f8e3 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	24000500 	.word	0x24000500

080019c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_TIM4_Init+0xc4>)
 80019e6:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <MX_TIM4_Init+0xc8>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <MX_TIM4_Init+0xc4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <MX_TIM4_Init+0xc4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <MX_TIM4_Init+0xc4>)
 80019f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a0a:	481e      	ldr	r0, [pc, #120]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a0c:	f006 ffc9 	bl	80089a2 <HAL_TIM_PWM_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f7ff fcb1 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4816      	ldr	r0, [pc, #88]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a2a:	f007 fd39 	bl	80094a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001a34:	f7ff fca2 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a38:	2360      	movs	r3, #96	; 0x60
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a50:	f007 f8ae 	bl	8008bb0 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a5a:	f7ff fc8f 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	220c      	movs	r2, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a66:	f007 f8a3 	bl	8008bb0 <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a70:	f7ff fc84 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM4_Init+0xc4>)
 8001a76:	f000 f87f 	bl	8001b78 <HAL_TIM_MspPostInit>

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	24000468 	.word	0x24000468
 8001a88:	40000800 	.word	0x40000800

08001a8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <HAL_TIM_PWM_MspInit+0xdc>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12f      	bne.n	8001b0e <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001aea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	481a      	ldr	r0, [pc, #104]	; (8001b70 <HAL_TIM_PWM_MspInit+0xe4>)
 8001b08:	f003 f83a 	bl	8004b80 <HAL_GPIO_Init>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b0c:	e028      	b.n	8001b60 <HAL_TIM_PWM_MspInit+0xd4>
  else if(tim_pwmHandle->Instance==TIM2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d10f      	bne.n	8001b38 <HAL_TIM_PWM_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
}
 8001b36:	e013      	b.n	8001b60 <HAL_TIM_PWM_MspInit+0xd4>
  else if(tim_pwmHandle->Instance==TIM4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_TIM_PWM_MspInit+0xe8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10e      	bne.n	8001b60 <HAL_TIM_PWM_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_TIM_PWM_MspInit+0xe0>)
 8001b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	; 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	58021000 	.word	0x58021000
 8001b74:	40000800 	.word	0x40000800

08001b78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a39      	ldr	r2, [pc, #228]	; (8001c7c <HAL_TIM_MspPostInit+0x104>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d120      	bne.n	8001bdc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba0:	4a37      	ldr	r2, [pc, #220]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001bb8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	482b      	ldr	r0, [pc, #172]	; (8001c84 <HAL_TIM_MspPostInit+0x10c>)
 8001bd6:	f002 ffd3 	bl	8004b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bda:	e04a      	b.n	8001c72 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d120      	bne.n	8001c28 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_BACKLIGHT_Pin;
 8001c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c16:	2301      	movs	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4819      	ldr	r0, [pc, #100]	; (8001c88 <HAL_TIM_MspPostInit+0x110>)
 8001c22:	f002 ffad 	bl	8004b80 <HAL_GPIO_Init>
}
 8001c26:	e024      	b.n	8001c72 <HAL_TIM_MspPostInit+0xfa>
  else if(timHandle->Instance==TIM4)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_TIM_MspPostInit+0x114>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d11f      	bne.n	8001c72 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_TIM_MspPostInit+0x108>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c50:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c62:	2302      	movs	r3, #2
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <HAL_TIM_MspPostInit+0x118>)
 8001c6e:	f002 ff87 	bl	8004b80 <HAL_GPIO_Init>
}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58021000 	.word	0x58021000
 8001c88:	58020000 	.word	0x58020000
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	58020c00 	.word	0x58020c00

08001c94 <MX_UART7_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <MX_UART7_Init+0x90>)
 8001c9a:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <MX_UART7_Init+0x94>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <MX_UART7_Init+0x90>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <MX_UART7_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_UART7_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cdc:	4811      	ldr	r0, [pc, #68]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cde:	f007 fce5 	bl	80096ac <HAL_UART_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f7ff fb48 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <MX_UART7_Init+0x90>)
 8001cf0:	f008 fc32 	bl	800a558 <HAL_UARTEx_SetTxFifoThreshold>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001cfa:	f7ff fb3f 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4808      	ldr	r0, [pc, #32]	; (8001d24 <MX_UART7_Init+0x90>)
 8001d02:	f008 fc67 	bl	800a5d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001d0c:	f7ff fb36 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <MX_UART7_Init+0x90>)
 8001d12:	f008 fbe8 	bl	800a4e6 <HAL_UARTEx_DisableFifoMode>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001d1c:	f7ff fb2e 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	2400054c 	.word	0x2400054c
 8001d28:	40007800 	.word	0x40007800

08001d2c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <MX_USART1_UART_Init+0x94>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d76:	f007 fc99 	bl	80096ac <HAL_UART_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d80:	f7ff fafc 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d84:	2100      	movs	r1, #0
 8001d86:	480d      	ldr	r0, [pc, #52]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d88:	f008 fbe6 	bl	800a558 <HAL_UARTEx_SetTxFifoThreshold>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d92:	f7ff faf3 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d96:	2100      	movs	r1, #0
 8001d98:	4808      	ldr	r0, [pc, #32]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001d9a:	f008 fc1b 	bl	800a5d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001da4:	f7ff faea 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <MX_USART1_UART_Init+0x90>)
 8001daa:	f008 fb9c 	bl	800a4e6 <HAL_UARTEx_DisableFifoMode>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001db4:	f7ff fae2 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2400066c 	.word	0x2400066c
 8001dc0:	40011000 	.word	0x40011000

08001dc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <MX_USART2_UART_Init+0x94>)
 8001dcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de8:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001dea:	220c      	movs	r2, #12
 8001dec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0c:	4811      	ldr	r0, [pc, #68]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001e0e:	f007 fc4d 	bl	80096ac <HAL_UART_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e18:	f7ff fab0 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001e20:	f008 fb9a 	bl	800a558 <HAL_UARTEx_SetTxFifoThreshold>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e2a:	f7ff faa7 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001e32:	f008 fbcf 	bl	800a5d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e3c:	f7ff fa9e 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_USART2_UART_Init+0x90>)
 8001e42:	f008 fb50 	bl	800a4e6 <HAL_UARTEx_DisableFifoMode>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e4c:	f7ff fa96 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2400078c 	.word	0x2400078c
 8001e58:	40004400 	.word	0x40004400

08001e5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e62:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <MX_USART3_UART_Init+0x94>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ea4:	4811      	ldr	r0, [pc, #68]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001ea6:	f007 fc01 	bl	80096ac <HAL_UART_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001eb0:	f7ff fa64 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	480d      	ldr	r0, [pc, #52]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001eb8:	f008 fb4e 	bl	800a558 <HAL_UARTEx_SetTxFifoThreshold>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ec2:	f7ff fa5b 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4808      	ldr	r0, [pc, #32]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001eca:	f008 fb83 	bl	800a5d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f7ff fa52 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_USART3_UART_Init+0x90>)
 8001eda:	f008 fb04 	bl	800a4e6 <HAL_UARTEx_DisableFifoMode>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee4:	f7ff fa4a 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	240005dc 	.word	0x240005dc
 8001ef0:	40004800 	.word	0x40004800

08001ef4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001efa:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <MX_USART6_UART_Init+0x94>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f3c:	4811      	ldr	r0, [pc, #68]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f3e:	f007 fbb5 	bl	80096ac <HAL_UART_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001f48:	f7ff fa18 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f50:	f008 fb02 	bl	800a558 <HAL_UARTEx_SetTxFifoThreshold>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001f5a:	f7ff fa0f 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f62:	f008 fb37 	bl	800a5d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001f6c:	f7ff fa06 	bl	800137c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_USART6_UART_Init+0x90>)
 8001f72:	f008 fab8 	bl	800a4e6 <HAL_UARTEx_DisableFifoMode>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001f7c:	f7ff f9fe 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	240006fc 	.word	0x240006fc
 8001f88:	40011400 	.word	0x40011400

08001f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b0c2      	sub	sp, #264	; 0x108
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001faa:	22bc      	movs	r2, #188	; 0xbc
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f008 fe8c 	bl	800accc <memset>
  if(uartHandle->Instance==UART7)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4acb      	ldr	r2, [pc, #812]	; (80022e8 <HAL_UART_MspInit+0x35c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d143      	bne.n	8002048 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 fa44 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 8001fda:	f7ff f9cf 	bl	800137c <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001fde:	4bc3      	ldr	r3, [pc, #780]	; (80022ec <HAL_UART_MspInit+0x360>)
 8001fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe4:	4ac1      	ldr	r2, [pc, #772]	; (80022ec <HAL_UART_MspInit+0x360>)
 8001fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fee:	4bbf      	ldr	r3, [pc, #764]	; (80022ec <HAL_UART_MspInit+0x360>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffc:	4bbb      	ldr	r3, [pc, #748]	; (80022ec <HAL_UART_MspInit+0x360>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	4aba      	ldr	r2, [pc, #744]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200c:	4bb7      	ldr	r3, [pc, #732]	; (80022ec <HAL_UART_MspInit+0x360>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800201a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800201e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002034:	2307      	movs	r3, #7
 8002036:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800203e:	4619      	mov	r1, r3
 8002040:	48ab      	ldr	r0, [pc, #684]	; (80022f0 <HAL_UART_MspInit+0x364>)
 8002042:	f002 fd9d 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002046:	e149      	b.n	80022dc <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART1)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4aa9      	ldr	r2, [pc, #676]	; (80022f4 <HAL_UART_MspInit+0x368>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d167      	bne.n	8002124 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002054:	2301      	movs	r3, #1
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002062:	4618      	mov	r0, r3
 8002064:	f004 f9fa 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 800206e:	f7ff f985 	bl	800137c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002072:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002078:	4a9c      	ldr	r2, [pc, #624]	; (80022ec <HAL_UART_MspInit+0x360>)
 800207a:	f043 0310 	orr.w	r3, r3, #16
 800207e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002082:	4b9a      	ldr	r3, [pc, #616]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002090:	4b96      	ldr	r3, [pc, #600]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002096:	4a95      	ldr	r2, [pc, #596]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a0:	4b92      	ldr	r3, [pc, #584]	; (80022ec <HAL_UART_MspInit+0x360>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <HAL_UART_MspInit+0x360>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4a8d      	ldr	r2, [pc, #564]	; (80022ec <HAL_UART_MspInit+0x360>)
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_UART_MspInit+0x360>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020e6:	2307      	movs	r3, #7
 80020e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4881      	ldr	r0, [pc, #516]	; (80022f8 <HAL_UART_MspInit+0x36c>)
 80020f4:	f002 fd44 	bl	8004b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020f8:	2340      	movs	r3, #64	; 0x40
 80020fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002110:	2307      	movs	r3, #7
 8002112:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800211a:	4619      	mov	r1, r3
 800211c:	4877      	ldr	r0, [pc, #476]	; (80022fc <HAL_UART_MspInit+0x370>)
 800211e:	f002 fd2f 	bl	8004b80 <HAL_GPIO_Init>
}
 8002122:	e0db      	b.n	80022dc <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART2)
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a75      	ldr	r2, [pc, #468]	; (8002300 <HAL_UART_MspInit+0x374>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d142      	bne.n	80021b6 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002130:	2302      	movs	r3, #2
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f98c 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 800214a:	f7ff f917 	bl	800137c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216c:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <HAL_UART_MspInit+0x360>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	4a5e      	ldr	r2, [pc, #376]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217c:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_UART_MspInit+0x360>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800218a:	2360      	movs	r3, #96	; 0x60
 800218c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a2:	2307      	movs	r3, #7
 80021a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4855      	ldr	r0, [pc, #340]	; (8002304 <HAL_UART_MspInit+0x378>)
 80021b0:	f002 fce6 	bl	8004b80 <HAL_GPIO_Init>
}
 80021b4:	e092      	b.n	80022dc <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART3)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_UART_MspInit+0x37c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d143      	bne.n	800224a <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021c2:	2302      	movs	r3, #2
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 f943 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_MspInit+0x254>
      Error_Handler();
 80021dc:	f7ff f8ce 	bl	800137c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_UART_MspInit+0x360>)
 80021e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e6:	4a41      	ldr	r2, [pc, #260]	; (80022ec <HAL_UART_MspInit+0x360>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f0:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_UART_MspInit+0x360>)
 80021f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	4a39      	ldr	r2, [pc, #228]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800221c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002220:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002236:	2307      	movs	r3, #7
 8002238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002240:	4619      	mov	r1, r3
 8002242:	4830      	ldr	r0, [pc, #192]	; (8002304 <HAL_UART_MspInit+0x378>)
 8002244:	f002 fc9c 	bl	8004b80 <HAL_GPIO_Init>
}
 8002248:	e048      	b.n	80022dc <HAL_UART_MspInit+0x350>
  else if(uartHandle->Instance==USART6)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2e      	ldr	r2, [pc, #184]	; (800230c <HAL_UART_MspInit+0x380>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d142      	bne.n	80022dc <HAL_UART_MspInit+0x350>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002256:	2301      	movs	r3, #1
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f8f9 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0x2e8>
      Error_Handler();
 8002270:	f7ff f884 	bl	800137c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_UART_MspInit+0x360>)
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_UART_MspInit+0x360>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_UART_MspInit+0x360>)
 800229a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_UART_MspInit+0x360>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80022b0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80022b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80022ca:	2307      	movs	r3, #7
 80022cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022d4:	4619      	mov	r1, r3
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <HAL_UART_MspInit+0x384>)
 80022d8:	f002 fc52 	bl	8004b80 <HAL_GPIO_Init>
}
 80022dc:	bf00      	nop
 80022de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40007800 	.word	0x40007800
 80022ec:	58024400 	.word	0x58024400
 80022f0:	58021000 	.word	0x58021000
 80022f4:	40011000 	.word	0x40011000
 80022f8:	58020000 	.word	0x58020000
 80022fc:	58020400 	.word	0x58020400
 8002300:	40004400 	.word	0x40004400
 8002304:	58020c00 	.word	0x58020c00
 8002308:	40004800 	.word	0x40004800
 800230c:	40011400 	.word	0x40011400
 8002310:	58021800 	.word	0x58021800

08002314 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800231c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002320:	2209      	movs	r2, #9
 8002322:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002326:	2202      	movs	r2, #2
 8002328:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002332:	2202      	movs	r2, #2
 8002334:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002338:	2200      	movs	r2, #0
 800233a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800233e:	2200      	movs	r2, #0
 8002340:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002344:	2200      	movs	r2, #0
 8002346:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800234a:	2201      	movs	r2, #1
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002350:	2201      	movs	r2, #1
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800235c:	f002 ff2f 	bl	80051be <HAL_PCD_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002366:	f7ff f809 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2400081c 	.word	0x2400081c
 8002374:	40080000 	.word	0x40080000

08002378 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0b8      	sub	sp, #224	; 0xe0
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	22bc      	movs	r2, #188	; 0xbc
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f008 fc97 	bl	800accc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <HAL_PCD_MspInit+0xe8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d156      	bne.n	8002456 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80023a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80023ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 f84e 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80023c6:	f7fe ffd9 	bl	800137c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80023ca:	f003 f89b 	bl	8005504 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_PCD_MspInit+0xec>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d4:	4a23      	ldr	r2, [pc, #140]	; (8002464 <HAL_PCD_MspInit+0xec>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_PCD_MspInit+0xec>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80023ec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80023f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002406:	230a      	movs	r3, #10
 8002408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002410:	4619      	mov	r1, r3
 8002412:	4815      	ldr	r0, [pc, #84]	; (8002468 <HAL_PCD_MspInit+0xf0>)
 8002414:	f002 fbb4 	bl	8004b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002430:	4619      	mov	r1, r3
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <HAL_PCD_MspInit+0xf0>)
 8002434:	f002 fba4 	bl	8004b80 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_PCD_MspInit+0xec>)
 800243a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <HAL_PCD_MspInit+0xec>)
 8002440:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002444:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_PCD_MspInit+0xec>)
 800244a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800244e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002456:	bf00      	nop
 8002458:	37e0      	adds	r7, #224	; 0xe0
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40080000 	.word	0x40080000
 8002464:	58024400 	.word	0x58024400
 8002468:	58020000 	.word	0x58020000

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002470:	f7fe f8ae 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	; (80024b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249a:	f008 fbe5 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7fe fe7d 	bl	800119c <main>
  bx  lr
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a4:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80024a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024ac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80024b0:	0800ad88 	.word	0x0800ad88
  ldr r2, =_sbss
 80024b4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80024b8:	24000c28 	.word	0x24000c28

080024bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC3_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f001 fa58 	bl	800397c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024cc:	f003 fdf0 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_Init+0x68>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	4913      	ldr	r1, [pc, #76]	; (800252c <HAL_Init+0x6c>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <HAL_Init+0x68>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_Init+0x6c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <HAL_Init+0x70>)
 8002502:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002504:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <HAL_Init+0x74>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f814 	bl	8002538 <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e002      	b.n	8002520 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800251a:	f7ff f8dd 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	58024400 	.word	0x58024400
 800252c:	0800ad40 	.word	0x0800ad40
 8002530:	24000004 	.word	0x24000004
 8002534:	24000000 	.word	0x24000000

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_InitTick+0x60>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e021      	b.n	8002590 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_InitTick+0x64>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_InitTick+0x60>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255a:	fbb3 f3f1 	udiv	r3, r3, r1
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4618      	mov	r0, r3
 8002564:	f001 fa2f 	bl	80039c6 <HAL_SYSTICK_Config>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e00e      	b.n	8002590 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d80a      	bhi.n	800258e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f001 fa07 	bl	8003992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <HAL_InitTick+0x68>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	2400000c 	.word	0x2400000c
 800259c:	24000000 	.word	0x24000000
 80025a0:	24000008 	.word	0x24000008

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	2400000c 	.word	0x2400000c
 80025c8:	24000c24 	.word	0x24000c24

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	24000c24 	.word	0x24000c24

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff ffee 	bl	80025cc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffde 	bl	80025cc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2400000c 	.word	0x2400000c

0800262c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_GetREVID+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0c1b      	lsrs	r3, r3, #16
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	5c001000 	.word	0x5c001000

08002644 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	58003c00 	.word	0x58003c00

0800266c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 0202 	bic.w	r2, r3, #2
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	58003c00 	.word	0x58003c00

08002694 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026a6:	f7ff ff91 	bl	80025cc <HAL_GetTick>
 80026aa:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80026ac:	e008      	b.n	80026c0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80026ae:	f7ff ff8d 	bl	80025cc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b0a      	cmp	r3, #10
 80026ba:	d901      	bls.n	80026c0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	58003c00 	.word	0x58003c00

080026dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80026ec:	4904      	ldr	r1, [pc, #16]	; (8002700 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	58000400 	.word	0x58000400

08002704 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	609a      	str	r2, [r3, #8]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3360      	adds	r3, #96	; 0x60
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	431a      	orrs	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80027a0:	bf00      	nop
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	611a      	str	r2, [r3, #16]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3360      	adds	r3, #96	; 0x60
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	431a      	orrs	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	601a      	str	r2, [r3, #0]
  }
}
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3330      	adds	r3, #48	; 0x30
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	4413      	add	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	211f      	movs	r1, #31
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	401a      	ands	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0e9b      	lsrs	r3, r3, #26
 800284c:	f003 011f 	and.w	r1, r3, #31
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	431a      	orrs	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3314      	adds	r3, #20
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	0e5b      	lsrs	r3, r3, #25
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0d1b      	lsrs	r3, r3, #20
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2107      	movs	r1, #7
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	0d1b      	lsrs	r3, r3, #20
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	431a      	orrs	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0318 	and.w	r3, r3, #24
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e8:	40d9      	lsrs	r1, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	400b      	ands	r3, r1
 80028ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f2:	431a      	orrs	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	000fffff 	.word	0x000fffff

0800290c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <LL_ADC_DisableDeepPowerDown+0x20>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6093      	str	r3, [r2, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	5fffffc0 	.word	0x5fffffc0

08002930 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d101      	bne.n	800294a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <LL_ADC_EnableInternalRegulator+0x24>)
 8002966:	4013      	ands	r3, r2
 8002968:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	6fffffc0 	.word	0x6fffffc0

08002980 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002994:	d101      	bne.n	800299a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <LL_ADC_IsEnabled+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_ADC_IsEnabled+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d101      	bne.n	8002a0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e18e      	b.n	8002d54 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fd fed7 	bl	80007f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff67 	bl	8002930 <LL_ADC_IsDeepPowerDownEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff4d 	bl	800290c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff82 	bl	8002980 <LL_ADC_IsInternalRegulatorEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff66 	bl	8002958 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a8c:	4b9a      	ldr	r3, [pc, #616]	; (8002cf8 <HAL_ADC_Init+0x2dc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	4a9a      	ldr	r2, [pc, #616]	; (8002cfc <HAL_ADC_Init+0x2e0>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a9e:	e002      	b.n	8002aa6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f9      	bne.n	8002aa0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff65 	bl	8002980 <LL_ADC_IsInternalRegulatorEnabled>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0210 	orr.w	r2, r3, #16
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff76 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002ae2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 8128 	bne.w	8002d42 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 8124 	bne.w	8002d42 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff4a 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d136      	bne.n	8002b88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <HAL_ADC_Init+0x2e4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_ADC_Init+0x112>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a76      	ldr	r2, [pc, #472]	; (8002d04 <HAL_ADC_Init+0x2e8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10e      	bne.n	8002b4c <HAL_ADC_Init+0x130>
 8002b2e:	4874      	ldr	r0, [pc, #464]	; (8002d00 <HAL_ADC_Init+0x2e4>)
 8002b30:	f7ff ff3a 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b34:	4604      	mov	r4, r0
 8002b36:	4873      	ldr	r0, [pc, #460]	; (8002d04 <HAL_ADC_Init+0x2e8>)
 8002b38:	f7ff ff36 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4323      	orrs	r3, r4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e008      	b.n	8002b5e <HAL_ADC_Init+0x142>
 8002b4c:	486e      	ldr	r0, [pc, #440]	; (8002d08 <HAL_ADC_Init+0x2ec>)
 8002b4e:	f7ff ff2b 	bl	80029a8 <LL_ADC_IsEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a66      	ldr	r2, [pc, #408]	; (8002d00 <HAL_ADC_Init+0x2e4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d004      	beq.n	8002b76 <HAL_ADC_Init+0x15a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <HAL_ADC_Init+0x2e8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x15e>
 8002b76:	4a65      	ldr	r2, [pc, #404]	; (8002d0c <HAL_ADC_Init+0x2f0>)
 8002b78:	e000      	b.n	8002b7c <HAL_ADC_Init+0x160>
 8002b7a:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_ADC_Init+0x2f4>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f7ff fdbe 	bl	8002704 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002b88:	f7ff fd50 	bl	800262c <HAL_GetREVID>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d914      	bls.n	8002bc0 <HAL_ADC_Init+0x1a4>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d110      	bne.n	8002bc0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7d5b      	ldrb	r3, [r3, #21]
 8002ba2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ba8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002bae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7f1b      	ldrb	r3, [r3, #28]
 8002bb4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002bb6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bb8:	f043 030c 	orr.w	r3, r3, #12
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	e00d      	b.n	8002bdc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7d5b      	ldrb	r3, [r3, #21]
 8002bc4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002bd0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7f1b      	ldrb	r3, [r3, #28]
 8002bd6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	7f1b      	ldrb	r3, [r3, #28]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	045b      	lsls	r3, r3, #17
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_ADC_Init+0x2f8>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fed1 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002c2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fede 	bl	80029f4 <LL_ADC_INJ_IsConversionOngoing>
 8002c38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d14a      	bne.n	8002cd6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d147      	bne.n	8002cd6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7d1b      	ldrb	r3, [r3, #20]
 8002c4a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_ADC_Init+0x2fc>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d11b      	bne.n	8002caa <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_ADC_Init+0x300>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0411      	lsls	r1, r2, #16
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c94:	4311      	orrs	r1, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	e007      	b.n	8002cba <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fb93 	bl	80033fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d120      	bne.n	8002d20 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f023 010f 	bic.w	r1, r3, #15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	1e5a      	subs	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf6:	e01b      	b.n	8002d30 <HAL_ADC_Init+0x314>
 8002cf8:	24000000 	.word	0x24000000
 8002cfc:	053e2d63 	.word	0x053e2d63
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40022100 	.word	0x40022100
 8002d08:	58026000 	.word	0x58026000
 8002d0c:	40022300 	.word	0x40022300
 8002d10:	58026300 	.word	0x58026300
 8002d14:	fff0c003 	.word	0xfff0c003
 8002d18:	ffffbffc 	.word	0xffffbffc
 8002d1c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020f 	bic.w	r2, r2, #15
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f023 0303 	bic.w	r3, r3, #3
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002d40:	e007      	b.n	8002d52 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b0a1      	sub	sp, #132	; 0x84
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a9d      	ldr	r2, [pc, #628]	; (8002fec <HAL_ADC_ConfigChannel+0x290>)
 8002d76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x2a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e321      	b.n	80033ca <HAL_ADC_ConfigChannel+0x66e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe1b 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 8306 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x62>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2201      	movs	r2, #1
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	e016      	b.n	8002dec <HAL_ADC_ConfigChannel+0x90>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dce:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e003      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2201      	movs	r2, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	69d1      	ldr	r1, [r2, #28]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	430b      	orrs	r3, r1
 8002df8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f7ff fd04 	bl	8002814 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fddc 	bl	80029ce <LL_ADC_REG_IsConversionOngoing>
 8002e16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fde9 	bl	80029f4 <LL_ADC_INJ_IsConversionOngoing>
 8002e22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 80b3 	bne.w	8002f92 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 80af 	bne.w	8002f92 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f7ff fd13 	bl	800286c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e46:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_ADC_ConfigChannel+0x294>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e52:	d10b      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x110>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	e01d      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x14c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x136>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	e00a      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x14c>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d027      	beq.n	8002f02 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6919      	ldr	r1, [r3, #16]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec0:	f7ff fc54 	bl	800276c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6919      	ldr	r1, [r3, #16]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	7e5b      	ldrb	r3, [r3, #25]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d102      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x17e>
 8002ed4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_ConfigChannel+0x180>
 8002eda:	2300      	movs	r3, #0
 8002edc:	461a      	mov	r2, r3
 8002ede:	f7ff fc7e 	bl	80027de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	7e1b      	ldrb	r3, [r3, #24]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x19c>
 8002ef2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ef6:	e000      	b.n	8002efa <HAL_ADC_ConfigChannel+0x19e>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff fc56 	bl	80027ac <LL_ADC_SetDataRightShift>
 8002f00:	e047      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	069b      	lsls	r3, r3, #26
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d107      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	069b      	lsls	r3, r3, #26
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f48:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	069b      	lsls	r3, r3, #26
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d107      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f6c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	069b      	lsls	r3, r3, #26
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d107      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f90:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fd06 	bl	80029a8 <LL_ADC_IsEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f040 820d 	bne.w	80033be <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f7ff fc87 	bl	80028c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <HAL_ADC_ConfigChannel+0x290>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 8133 	bne.w	8003228 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d110      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x298>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	bf94      	ite	ls
 8002fe2:	2301      	movls	r3, #1
 8002fe4:	2300      	movhi	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e01e      	b.n	8003028 <HAL_ADC_ConfigChannel+0x2cc>
 8002fea:	bf00      	nop
 8002fec:	47ff0000 	.word	0x47ff0000
 8002ff0:	5c001000 	.word	0x5c001000
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003004:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e003      	b.n	8003018 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2b09      	cmp	r3, #9
 8003020:	bf94      	ite	ls
 8003022:	2301      	movls	r3, #1
 8003024:	2300      	movhi	r3, #0
 8003026:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003028:	2b00      	cmp	r3, #0
 800302a:	d079      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003034:	2b00      	cmp	r3, #0
 8003036:	d107      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x2ec>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	069b      	lsls	r3, r3, #26
 8003042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003046:	e015      	b.n	8003074 <HAL_ADC_ConfigChannel+0x318>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003058:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e003      	b.n	800306c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	069b      	lsls	r3, r3, #26
 8003070:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x338>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	e017      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x368>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80030a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80030a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e003      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2101      	movs	r1, #1
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	ea42 0103 	orr.w	r1, r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x38e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 021f 	and.w	r2, r3, #31
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	051b      	lsls	r3, r3, #20
 80030e8:	e018      	b.n	800311c <HAL_ADC_ConfigChannel+0x3c0>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	fa93 f3a3 	rbit	r3, r3
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003102:	2320      	movs	r3, #32
 8003104:	e003      	b.n	800310e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311c:	430b      	orrs	r3, r1
 800311e:	e07e      	b.n	800321e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003128:	2b00      	cmp	r3, #0
 800312a:	d107      	bne.n	800313c <HAL_ADC_ConfigChannel+0x3e0>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	3301      	adds	r3, #1
 8003134:	069b      	lsls	r3, r3, #26
 8003136:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800313a:	e015      	b.n	8003168 <HAL_ADC_ConfigChannel+0x40c>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	069b      	lsls	r3, r3, #26
 8003164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x42c>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2101      	movs	r1, #1
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	e017      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x45c>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	61bb      	str	r3, [r7, #24]
  return result;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e003      	b.n	80031ac <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	ea42 0103 	orr.w	r1, r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x488>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 021f 	and.w	r2, r3, #31
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	3b1e      	subs	r3, #30
 80031dc:	051b      	lsls	r3, r3, #20
 80031de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031e2:	e01b      	b.n	800321c <HAL_ADC_ConfigChannel+0x4c0>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	60fb      	str	r3, [r7, #12]
  return result;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e003      	b.n	8003208 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3301      	adds	r3, #1
 800320a:	f003 021f 	and.w	r2, r3, #31
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	3b1e      	subs	r3, #30
 8003216:	051b      	lsls	r3, r3, #20
 8003218:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800321c:	430b      	orrs	r3, r1
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	6892      	ldr	r2, [r2, #8]
 8003222:	4619      	mov	r1, r3
 8003224:	f7ff fb22 	bl	800286c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f280 80c6 	bge.w	80033be <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_ADC_ConfigChannel+0x678>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_ADC_ConfigChannel+0x4ea>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a65      	ldr	r2, [pc, #404]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x4ee>
 8003246:	4b65      	ldr	r3, [pc, #404]	; (80033dc <HAL_ADC_ConfigChannel+0x680>)
 8003248:	e000      	b.n	800324c <HAL_ADC_ConfigChannel+0x4f0>
 800324a:	4b65      	ldr	r3, [pc, #404]	; (80033e0 <HAL_ADC_ConfigChannel+0x684>)
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fa7f 	bl	8002750 <LL_ADC_GetCommonPathInternalCh>
 8003252:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5e      	ldr	r2, [pc, #376]	; (80033d4 <HAL_ADC_ConfigChannel+0x678>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x50c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5d      	ldr	r2, [pc, #372]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10e      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x52a>
 8003268:	485a      	ldr	r0, [pc, #360]	; (80033d4 <HAL_ADC_ConfigChannel+0x678>)
 800326a:	f7ff fb9d 	bl	80029a8 <LL_ADC_IsEnabled>
 800326e:	4604      	mov	r4, r0
 8003270:	4859      	ldr	r0, [pc, #356]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 8003272:	f7ff fb99 	bl	80029a8 <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	4323      	orrs	r3, r4
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e008      	b.n	8003298 <HAL_ADC_ConfigChannel+0x53c>
 8003286:	4857      	ldr	r0, [pc, #348]	; (80033e4 <HAL_ADC_ConfigChannel+0x688>)
 8003288:	f7ff fb8e 	bl	80029a8 <LL_ADC_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d07d      	beq.n	8003398 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a51      	ldr	r2, [pc, #324]	; (80033e8 <HAL_ADC_ConfigChannel+0x68c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d130      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ac>
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d12b      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <HAL_ADC_ConfigChannel+0x688>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f040 8081 	bne.w	80033be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a44      	ldr	r2, [pc, #272]	; (80033d4 <HAL_ADC_ConfigChannel+0x678>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d004      	beq.n	80032d0 <HAL_ADC_ConfigChannel+0x574>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a43      	ldr	r2, [pc, #268]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x578>
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_ADC_ConfigChannel+0x680>)
 80032d2:	e000      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x57a>
 80032d4:	4a42      	ldr	r2, [pc, #264]	; (80033e0 <HAL_ADC_ConfigChannel+0x684>)
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7ff fa23 	bl	800272a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_ADC_ConfigChannel+0x690>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	4a41      	ldr	r2, [pc, #260]	; (80033f0 <HAL_ADC_ConfigChannel+0x694>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80032f8:	e002      	b.n	8003300 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f9      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003306:	e05a      	b.n	80033be <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a39      	ldr	r2, [pc, #228]	; (80033f4 <HAL_ADC_ConfigChannel+0x698>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d11e      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x5f4>
 8003312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d119      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a30      	ldr	r2, [pc, #192]	; (80033e4 <HAL_ADC_ConfigChannel+0x688>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d14b      	bne.n	80033be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_ADC_ConfigChannel+0x678>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_ADC_ConfigChannel+0x5de>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x5e2>
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <HAL_ADC_ConfigChannel+0x680>)
 800333c:	e000      	b.n	8003340 <HAL_ADC_ConfigChannel+0x5e4>
 800333e:	4a28      	ldr	r2, [pc, #160]	; (80033e0 <HAL_ADC_ConfigChannel+0x684>)
 8003340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7ff f9ee 	bl	800272a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800334e:	e036      	b.n	80033be <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <HAL_ADC_ConfigChannel+0x69c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d131      	bne.n	80033be <HAL_ADC_ConfigChannel+0x662>
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12c      	bne.n	80033be <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_ADC_ConfigChannel+0x688>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d127      	bne.n	80033be <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_ADC_ConfigChannel+0x678>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x626>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_ADC_ConfigChannel+0x67c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x62a>
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <HAL_ADC_ConfigChannel+0x680>)
 8003384:	e000      	b.n	8003388 <HAL_ADC_ConfigChannel+0x62c>
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_ADC_ConfigChannel+0x684>)
 8003388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7ff f9ca 	bl	800272a <LL_ADC_SetCommonPathInternalCh>
 8003396:	e012      	b.n	80033be <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80033aa:	e008      	b.n	80033be <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3784      	adds	r7, #132	; 0x84
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40022100 	.word	0x40022100
 80033dc:	40022300 	.word	0x40022300
 80033e0:	58026300 	.word	0x58026300
 80033e4:	58026000 	.word	0x58026000
 80033e8:	cb840000 	.word	0xcb840000
 80033ec:	24000000 	.word	0x24000000
 80033f0:	053e2d63 	.word	0x053e2d63
 80033f4:	c7520000 	.word	0xc7520000
 80033f8:	cfb80000 	.word	0xcfb80000

080033fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a79      	ldr	r2, [pc, #484]	; (80035f0 <ADC_ConfigureBoostMode+0x1f4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <ADC_ConfigureBoostMode+0x1c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a78      	ldr	r2, [pc, #480]	; (80035f4 <ADC_ConfigureBoostMode+0x1f8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d109      	bne.n	800342c <ADC_ConfigureBoostMode+0x30>
 8003418:	4b77      	ldr	r3, [pc, #476]	; (80035f8 <ADC_ConfigureBoostMode+0x1fc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e008      	b.n	800343e <ADC_ConfigureBoostMode+0x42>
 800342c:	4b73      	ldr	r3, [pc, #460]	; (80035fc <ADC_ConfigureBoostMode+0x200>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01c      	beq.n	800347c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003442:	f002 ffaf 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 8003446:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003450:	d010      	beq.n	8003474 <ADC_ConfigureBoostMode+0x78>
 8003452:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003456:	d871      	bhi.n	800353c <ADC_ConfigureBoostMode+0x140>
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d002      	beq.n	8003464 <ADC_ConfigureBoostMode+0x68>
 800345e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003462:	d16b      	bne.n	800353c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	60fb      	str	r3, [r7, #12]
        break;
 8003472:	e066      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	60fb      	str	r3, [r7, #12]
        break;
 800347a:	e062      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800347c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003480:	f003 ff2c 	bl	80072dc <HAL_RCCEx_GetPeriphCLKFreq>
 8003484:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800348e:	d051      	beq.n	8003534 <ADC_ConfigureBoostMode+0x138>
 8003490:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003494:	d854      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 8003496:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800349a:	d047      	beq.n	800352c <ADC_ConfigureBoostMode+0x130>
 800349c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034a0:	d84e      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034a6:	d03d      	beq.n	8003524 <ADC_ConfigureBoostMode+0x128>
 80034a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034ac:	d848      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d033      	beq.n	800351c <ADC_ConfigureBoostMode+0x120>
 80034b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b8:	d842      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034be:	d029      	beq.n	8003514 <ADC_ConfigureBoostMode+0x118>
 80034c0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034c4:	d83c      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034ca:	d01a      	beq.n	8003502 <ADC_ConfigureBoostMode+0x106>
 80034cc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034d0:	d836      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034d2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034d6:	d014      	beq.n	8003502 <ADC_ConfigureBoostMode+0x106>
 80034d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034dc:	d830      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e2:	d00e      	beq.n	8003502 <ADC_ConfigureBoostMode+0x106>
 80034e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e8:	d82a      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ee:	d008      	beq.n	8003502 <ADC_ConfigureBoostMode+0x106>
 80034f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034f4:	d824      	bhi.n	8003540 <ADC_ConfigureBoostMode+0x144>
 80034f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034fa:	d002      	beq.n	8003502 <ADC_ConfigureBoostMode+0x106>
 80034fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003500:	d11e      	bne.n	8003540 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	60fb      	str	r3, [r7, #12]
        break;
 8003512:	e016      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
        break;
 800351a:	e012      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	60fb      	str	r3, [r7, #12]
        break;
 8003522:	e00e      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	60fb      	str	r3, [r7, #12]
        break;
 800352a:	e00a      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	09db      	lsrs	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]
        break;
 8003532:	e006      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	60fb      	str	r3, [r7, #12]
        break;
 800353a:	e002      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
        break;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003540:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003542:	f7ff f873 	bl	800262c <HAL_GetREVID>
 8003546:	4603      	mov	r3, r0
 8003548:	f241 0203 	movw	r2, #4099	; 0x1003
 800354c:	4293      	cmp	r3, r2
 800354e:	d815      	bhi.n	800357c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <ADC_ConfigureBoostMode+0x204>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d908      	bls.n	800356a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003566:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003568:	e03e      	b.n	80035e8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003578:	609a      	str	r2, [r3, #8]
}
 800357a:	e035      	b.n	80035e8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <ADC_ConfigureBoostMode+0x208>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d808      	bhi.n	800359c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003598:	609a      	str	r2, [r3, #8]
}
 800359a:	e025      	b.n	80035e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <ADC_ConfigureBoostMode+0x20c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d80a      	bhi.n	80035ba <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	e016      	b.n	80035e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a13      	ldr	r2, [pc, #76]	; (800360c <ADC_ConfigureBoostMode+0x210>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d80a      	bhi.n	80035d8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d4:	609a      	str	r2, [r3, #8]
}
 80035d6:	e007      	b.n	80035e8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40022100 	.word	0x40022100
 80035f8:	40022300 	.word	0x40022300
 80035fc:	58026300 	.word	0x58026300
 8003600:	01312d00 	.word	0x01312d00
 8003604:	005f5e10 	.word	0x005f5e10
 8003608:	00bebc20 	.word	0x00bebc20
 800360c:	017d7840 	.word	0x017d7840

08003610 <LL_ADC_IsEnabled>:
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <LL_ADC_IsEnabled+0x18>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <LL_ADC_IsEnabled+0x1a>
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_ADC_REG_IsConversionOngoing>:
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d101      	bne.n	800364e <LL_ADC_REG_IsConversionOngoing+0x18>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b09f      	sub	sp, #124	; 0x7c
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003676:	2302      	movs	r3, #2
 8003678:	e0be      	b.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5c      	ldr	r2, [pc, #368]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d102      	bne.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003694:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	e001      	b.n	800369e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e09d      	b.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ffb9 	bl	8003636 <LL_ADC_REG_IsConversionOngoing>
 80036c4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ffb3 	bl	8003636 <LL_ADC_REG_IsConversionOngoing>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d17f      	bne.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d17c      	bne.n	80037d6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a47      	ldr	r2, [pc, #284]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a46      	ldr	r2, [pc, #280]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d101      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80036f0:	4b45      	ldr	r3, [pc, #276]	; (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036f2:	e000      	b.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80036f4:	4b45      	ldr	r3, [pc, #276]	; (800380c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d039      	beq.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	431a      	orrs	r2, r3
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3a      	ldr	r2, [pc, #232]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a38      	ldr	r2, [pc, #224]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10e      	bne.n	8003744 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003726:	4836      	ldr	r0, [pc, #216]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003728:	f7ff ff72 	bl	8003610 <LL_ADC_IsEnabled>
 800372c:	4604      	mov	r4, r0
 800372e:	4835      	ldr	r0, [pc, #212]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003730:	f7ff ff6e 	bl	8003610 <LL_ADC_IsEnabled>
 8003734:	4603      	mov	r3, r0
 8003736:	4323      	orrs	r3, r4
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e008      	b.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003744:	4832      	ldr	r0, [pc, #200]	; (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003746:	f7ff ff63 	bl	8003610 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d047      	beq.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003760:	4013      	ands	r3, r2
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	6892      	ldr	r2, [r2, #8]
 800376a:	430a      	orrs	r2, r1
 800376c:	431a      	orrs	r2, r3
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003770:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003772:	e03a      	b.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800377c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10e      	bne.n	80037b2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003794:	481a      	ldr	r0, [pc, #104]	; (8003800 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003796:	f7ff ff3b 	bl	8003610 <LL_ADC_IsEnabled>
 800379a:	4604      	mov	r4, r0
 800379c:	4819      	ldr	r0, [pc, #100]	; (8003804 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800379e:	f7ff ff37 	bl	8003610 <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4323      	orrs	r3, r4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e008      	b.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80037b2:	4817      	ldr	r0, [pc, #92]	; (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037b4:	f7ff ff2c 	bl	8003610 <LL_ADC_IsEnabled>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d4:	e009      	b.n	80037ea <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037e8:	e000      	b.n	80037ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	377c      	adds	r7, #124	; 0x7c
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}
 8003800:	40022000 	.word	0x40022000
 8003804:	40022100 	.word	0x40022100
 8003808:	40022300 	.word	0x40022300
 800380c:	58026300 	.word	0x58026300
 8003810:	58026000 	.word	0x58026000
 8003814:	fffff0e0 	.word	0xfffff0e0

08003818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <__NVIC_SetPriorityGrouping+0x40>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <__NVIC_SetPriorityGrouping+0x44>)
 8003842:	4313      	orrs	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <__NVIC_SetPriorityGrouping+0x40>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00
 800385c:	05fa0000 	.word	0x05fa0000

08003860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	db0a      	blt.n	80038a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	490c      	ldr	r1, [pc, #48]	; (80038c8 <__NVIC_SetPriority+0x4c>)
 8003896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	440b      	add	r3, r1
 80038a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a4:	e00a      	b.n	80038bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4908      	ldr	r1, [pc, #32]	; (80038cc <__NVIC_SetPriority+0x50>)
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	3b04      	subs	r3, #4
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	440b      	add	r3, r1
 80038ba:	761a      	strb	r2, [r3, #24]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	e000e100 	.word	0xe000e100
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f1c3 0307 	rsb	r3, r3, #7
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	bf28      	it	cs
 80038ee:	2304      	movcs	r3, #4
 80038f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d902      	bls.n	8003900 <NVIC_EncodePriority+0x30>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3b03      	subs	r3, #3
 80038fe:	e000      	b.n	8003902 <NVIC_EncodePriority+0x32>
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	f04f 32ff 	mov.w	r2, #4294967295
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43da      	mvns	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	401a      	ands	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003918:	f04f 31ff 	mov.w	r1, #4294967295
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	43d9      	mvns	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003928:	4313      	orrs	r3, r2
         );
}
 800392a:	4618      	mov	r0, r3
 800392c:	3724      	adds	r7, #36	; 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003948:	d301      	bcc.n	800394e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394a:	2301      	movs	r3, #1
 800394c:	e00f      	b.n	800396e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394e:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <SysTick_Config+0x40>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003956:	210f      	movs	r1, #15
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	f7ff ff8e 	bl	800387c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <SysTick_Config+0x40>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003966:	4b04      	ldr	r3, [pc, #16]	; (8003978 <SysTick_Config+0x40>)
 8003968:	2207      	movs	r2, #7
 800396a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	e000e010 	.word	0xe000e010

0800397c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff47 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039a0:	f7ff ff5e 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7ff ff90 	bl	80038d0 <NVIC_EncodePriority>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff5f 	bl	800387c <__NVIC_SetPriority>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ffb2 	bl	8003938 <SysTick_Config>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e014      	b.n	8003a1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	791b      	ldrb	r3, [r3, #4]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7fc ffe7 	bl	80009d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	795b      	ldrb	r3, [r3, #5]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_DAC_ConfigChannel+0x18>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e11d      	b.n	8003c78 <HAL_DAC_ConfigChannel+0x254>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2202      	movs	r2, #2
 8003a46:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d174      	bne.n	8003b3a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fdbc 	bl	80025cc <HAL_GetTick>
 8003a54:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d134      	bne.n	8003ac6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a5c:	e011      	b.n	8003a82 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a5e:	f7fe fdb5 	bl	80025cc <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d90a      	bls.n	8003a82 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f043 0208 	orr.w	r2, r3, #8
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0fa      	b.n	8003c78 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a88:	4b7d      	ldr	r3, [pc, #500]	; (8003c80 <HAL_DAC_ConfigChannel+0x25c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e6      	bne.n	8003a5e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7fe fda7 	bl	80025e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	6992      	ldr	r2, [r2, #24]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003aa0:	e01e      	b.n	8003ae0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003aa2:	f7fe fd93 	bl	80025cc <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d90a      	bls.n	8003ac6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f043 0208 	orr.w	r2, r3, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2203      	movs	r2, #3
 8003ac0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0d8      	b.n	8003c78 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	dbe8      	blt.n	8003aa2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f7fe fd87 	bl	80025e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	6992      	ldr	r2, [r2, #24]
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	ea02 0103 	and.w	r1, r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	21ff      	movs	r1, #255	; 0xff
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	ea02 0103 	and.w	r1, r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6a1a      	ldr	r2, [r3, #32]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d11d      	bne.n	8003b7e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	221f      	movs	r2, #31
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e00f      	b.n	8003bc8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d102      	bne.n	8003bb6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e008      	b.n	8003bc8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	e001      	b.n	8003bc8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43da      	mvns	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	22c0      	movs	r2, #192	; 0xc0
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43da      	mvns	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	400a      	ands	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20008000 	.word	0x20008000

08003c84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0c6      	b.n	8003e24 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fc ff30 	bl	8000b04 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2223      	movs	r2, #35	; 0x23
 8003ca8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <HAL_ETH_Init+0x1a8>)
 8003cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cb0:	4a5e      	ldr	r2, [pc, #376]	; (8003e2c <HAL_ETH_Init+0x1a8>)
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cba:	4b5c      	ldr	r3, [pc, #368]	; (8003e2c <HAL_ETH_Init+0x1a8>)
 8003cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7a1b      	ldrb	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fe fd03 	bl	80026dc <HAL_SYSCFG_ETHInterfaceSelect>
 8003cd6:	e003      	b.n	8003ce0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003cd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003cdc:	f7fe fcfe 	bl	80026dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf8:	f7fe fc68 	bl	80025cc <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003cfe:	e00f      	b.n	8003d20 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003d00:	f7fe fc64 	bl	80025cc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d0e:	d907      	bls.n	8003d20 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2204      	movs	r2, #4
 8003d14:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	22e0      	movs	r2, #224	; 0xe0
 8003d1a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e081      	b.n	8003e24 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fac0 	bl	80042b8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003d38:	f002 fb34 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4a3c      	ldr	r2, [pc, #240]	; (8003e30 <HAL_ETH_Init+0x1ac>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	0c9a      	lsrs	r2, r3, #18
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3a01      	subs	r2, #1
 8003d4c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fa13 	bl	800417c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d6c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d70:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	22e0      	movs	r2, #224	; 0xe0
 8003d88:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e04a      	b.n	8003e24 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d96:	4413      	add	r3, r2
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <HAL_ETH_Init+0x1b0>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6952      	ldr	r2, [r2, #20]
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	6809      	ldr	r1, [r1, #0]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	f241 1308 	movw	r3, #4360	; 0x1108
 8003dae:	440b      	add	r3, r1
 8003db0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fad8 	bl	8004368 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb1c 	bl	80043f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	3305      	adds	r3, #5
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	3303      	adds	r3, #3
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	061a      	lsls	r2, r3, #24
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	3302      	adds	r3, #2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	3301      	adds	r3, #1
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003dfc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003e0a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003e0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	431bde83 	.word	0x431bde83
 8003e34:	ffff8001 	.word	0xffff8001

08003e38 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003e4a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	791b      	ldrb	r3, [r3, #4]
 8003e50:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8003e52:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	7b1b      	ldrb	r3, [r3, #12]
 8003e58:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003e5a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	7b5b      	ldrb	r3, [r3, #13]
 8003e60:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e62:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	7b9b      	ldrb	r3, [r3, #14]
 8003e68:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	7bdb      	ldrb	r3, [r3, #15]
 8003e70:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e72:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	7c12      	ldrb	r2, [r2, #16]
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d102      	bne.n	8003e82 <ETH_SetMACConfig+0x4a>
 8003e7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e80:	e000      	b.n	8003e84 <ETH_SetMACConfig+0x4c>
 8003e82:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003e84:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	7c52      	ldrb	r2, [r2, #17]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	d102      	bne.n	8003e94 <ETH_SetMACConfig+0x5c>
 8003e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e92:	e000      	b.n	8003e96 <ETH_SetMACConfig+0x5e>
 8003e94:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003e96:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	7c9b      	ldrb	r3, [r3, #18]
 8003e9c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003e9e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003ea4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003eaa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	7f1b      	ldrb	r3, [r3, #28]
 8003eb0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003eb2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	7f5b      	ldrb	r3, [r3, #29]
 8003eb8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003eba:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	7f92      	ldrb	r2, [r2, #30]
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d102      	bne.n	8003eca <ETH_SetMACConfig+0x92>
 8003ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ec8:	e000      	b.n	8003ecc <ETH_SetMACConfig+0x94>
 8003eca:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003ecc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	7fdb      	ldrb	r3, [r3, #31]
 8003ed2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003ed4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	d102      	bne.n	8003ee6 <ETH_SetMACConfig+0xae>
 8003ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee4:	e000      	b.n	8003ee8 <ETH_SetMACConfig+0xb0>
 8003ee6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003ee8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003eee:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003ef8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b56      	ldr	r3, [pc, #344]	; (8004064 <ETH_SetMACConfig+0x22c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f22:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003f24:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f2c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003f2e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f36:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003f38:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d102      	bne.n	8003f4a <ETH_SetMACConfig+0x112>
 8003f44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f48:	e000      	b.n	8003f4c <ETH_SetMACConfig+0x114>
 8003f4a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003f4c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <ETH_SetMACConfig+0x230>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	68f9      	ldr	r1, [r7, #12]
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f70:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	4b3a      	ldr	r3, [pc, #232]	; (800406c <ETH_SetMACConfig+0x234>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f94:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003f9a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003fa2:	2a00      	cmp	r2, #0
 8003fa4:	d101      	bne.n	8003faa <ETH_SetMACConfig+0x172>
 8003fa6:	2280      	movs	r2, #128	; 0x80
 8003fa8:	e000      	b.n	8003fac <ETH_SetMACConfig+0x174>
 8003faa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003fac:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fbe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003fd4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003fdc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f023 0103 	bic.w	r1, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004002:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800401e:	2a00      	cmp	r2, #0
 8004020:	d101      	bne.n	8004026 <ETH_SetMACConfig+0x1ee>
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	e000      	b.n	8004028 <ETH_SetMACConfig+0x1f0>
 8004026:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004028:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004030:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004032:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800403a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004048:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	430a      	orrs	r2, r1
 8004054:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	00048083 	.word	0x00048083
 8004068:	c0f88000 	.word	0xc0f88000
 800406c:	fffffef0 	.word	0xfffffef0

08004070 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b38      	ldr	r3, [pc, #224]	; (8004168 <ETH_SetDMAConfig+0xf8>)
 8004086:	4013      	ands	r3, r2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6809      	ldr	r1, [r1, #0]
 8004090:	431a      	orrs	r2, r3
 8004092:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004096:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	791b      	ldrb	r3, [r3, #4]
 800409c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	7b1b      	ldrb	r3, [r3, #12]
 80040a8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80040b6:	4413      	add	r3, r2
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b2c      	ldr	r3, [pc, #176]	; (800416c <ETH_SetDMAConfig+0xfc>)
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6811      	ldr	r1, [r2, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80040ca:	440b      	add	r3, r1
 80040cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	7b5b      	ldrb	r3, [r3, #13]
 80040d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <ETH_SetDMAConfig+0x100>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6811      	ldr	r1, [r2, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80040f6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	7d1b      	ldrb	r3, [r3, #20]
 8004100:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004102:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	7f5b      	ldrb	r3, [r3, #29]
 8004108:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f241 1304 	movw	r3, #4356	; 0x1104
 8004116:	4413      	add	r3, r2
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <ETH_SetDMAConfig+0x104>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6811      	ldr	r1, [r2, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	431a      	orrs	r2, r3
 8004126:	f241 1304 	movw	r3, #4356	; 0x1104
 800412a:	440b      	add	r3, r1
 800412c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	7f1b      	ldrb	r3, [r3, #28]
 8004132:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	f241 1308 	movw	r3, #4360	; 0x1108
 8004144:	4413      	add	r3, r2
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <ETH_SetDMAConfig+0x108>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	431a      	orrs	r2, r3
 8004154:	f241 1308 	movw	r3, #4360	; 0x1108
 8004158:	440b      	add	r3, r1
 800415a:	601a      	str	r2, [r3, #0]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	ffff87fd 	.word	0xffff87fd
 800416c:	ffff2ffe 	.word	0xffff2ffe
 8004170:	fffec000 	.word	0xfffec000
 8004174:	ffc0efef 	.word	0xffc0efef
 8004178:	7fc0ffff 	.word	0x7fc0ffff

0800417c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0a4      	sub	sp, #144	; 0x90
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800418a:	2300      	movs	r3, #0
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004194:	2300      	movs	r3, #0
 8004196:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041bc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80041d4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80041f6:	2300      	movs	r3, #0
 80041f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80041fe:	2300      	movs	r3, #0
 8004200:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004202:	2300      	movs	r3, #0
 8004204:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004214:	2320      	movs	r3, #32
 8004216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004226:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800422c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004238:	2302      	movs	r3, #2
 800423a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800424a:	2300      	movs	r3, #0
 800424c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004256:	2300      	movs	r3, #0
 8004258:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004260:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fde6 	bl	8003e38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800426c:	2301      	movs	r3, #1
 800426e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004270:	2301      	movs	r3, #1
 8004272:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004278:	2300      	movs	r3, #0
 800427a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004282:	2300      	movs	r3, #0
 8004284:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004286:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800428a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004290:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004294:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800429c:	f44f 7306 	mov.w	r3, #536	; 0x218
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80042a2:	f107 0308 	add.w	r3, r7, #8
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fee1 	bl	8004070 <ETH_SetDMAConfig>
}
 80042ae:	bf00      	nop
 80042b0:	3790      	adds	r7, #144	; 0x90
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042d2:	f002 f867 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 80042d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d908      	bls.n	80042f2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d804      	bhi.n	80042f2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e027      	b.n	8004342 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d908      	bls.n	800430c <ETH_MAC_MDIO_ClkConfig+0x54>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d204      	bcs.n	800430c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e01a      	b.n	8004342 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4a13      	ldr	r2, [pc, #76]	; (800435c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d303      	bcc.n	800431c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d911      	bls.n	8004340 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a10      	ldr	r2, [pc, #64]	; (8004360 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d908      	bls.n	8004336 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d804      	bhi.n	8004336 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e005      	b.n	8004342 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e000      	b.n	8004342 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004340:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	01312cff 	.word	0x01312cff
 8004358:	02160ebf 	.word	0x02160ebf
 800435c:	03938700 	.word	0x03938700
 8004360:	05f5e0ff 	.word	0x05f5e0ff
 8004364:	08f0d17f 	.word	0x08f0d17f

08004368 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e01d      	b.n	80043b2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68d9      	ldr	r1, [r3, #12]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4613      	mov	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	3206      	adds	r2, #6
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d9de      	bls.n	8004376 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	f241 132c 	movw	r3, #4396	; 0x112c
 80043c6:	4413      	add	r3, r2
 80043c8:	2203      	movs	r2, #3
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68d9      	ldr	r1, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	f241 1314 	movw	r3, #4372	; 0x1114
 80043d8:	4413      	add	r3, r2
 80043da:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e024      	b.n	800444e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6919      	ldr	r1, [r3, #16]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4613      	mov	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	440b      	add	r3, r1
 8004414:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2200      	movs	r2, #0
 8004438:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3310      	adds	r3, #16
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d9d7      	bls.n	8004404 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	f241 1330 	movw	r3, #4400	; 0x1130
 800447a:	4413      	add	r3, r2
 800447c:	2203      	movs	r2, #3
 800447e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f241 131c 	movw	r3, #4380	; 0x111c
 800448c:	4413      	add	r3, r2
 800448e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f241 1328 	movw	r3, #4392	; 0x1128
 80044a0:	4413      	add	r3, r2
 80044a2:	6019      	str	r1, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b098      	sub	sp, #96	; 0x60
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80044b8:	4a84      	ldr	r2, [pc, #528]	; (80046cc <HAL_FDCAN_Init+0x21c>)
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	4611      	mov	r1, r2
 80044c0:	224c      	movs	r2, #76	; 0x4c
 80044c2:	4618      	mov	r0, r3
 80044c4:	f006 fbf4 	bl	800acb0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e1ca      	b.n	8004868 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7e      	ldr	r2, [pc, #504]	; (80046d0 <HAL_FDCAN_Init+0x220>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d106      	bne.n	80044ea <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fc32 	bl	8000d68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0210 	bic.w	r2, r2, #16
 8004512:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004514:	f7fe f85a 	bl	80025cc <HAL_GetTick>
 8004518:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800451a:	e014      	b.n	8004546 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800451c:	f7fe f856 	bl	80025cc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b0a      	cmp	r3, #10
 8004528:	d90d      	bls.n	8004546 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2203      	movs	r2, #3
 800453e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e190      	b.n	8004868 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d0e3      	beq.n	800451c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004564:	f7fe f832 	bl	80025cc <HAL_GetTick>
 8004568:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800456a:	e014      	b.n	8004596 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800456c:	f7fe f82e 	bl	80025cc <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d90d      	bls.n	8004596 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004580:	f043 0201 	orr.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e168      	b.n	8004868 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0e3      	beq.n	800456c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0202 	orr.w	r2, r2, #2
 80045b2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7c1b      	ldrb	r3, [r3, #16]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d108      	bne.n	80045ce <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ca:	619a      	str	r2, [r3, #24]
 80045cc:	e007      	b.n	80045de <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045dc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7c5b      	ldrb	r3, [r3, #17]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f4:	619a      	str	r2, [r3, #24]
 80045f6:	e007      	b.n	8004608 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004606:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7c9b      	ldrb	r3, [r3, #18]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d108      	bne.n	8004622 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e007      	b.n	8004632 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004630:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004656:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0210 	bic.w	r2, r2, #16
 8004666:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d108      	bne.n	8004682 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0204 	orr.w	r2, r2, #4
 800467e:	619a      	str	r2, [r3, #24]
 8004680:	e030      	b.n	80046e4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02c      	beq.n	80046e4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d020      	beq.n	80046d4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0210 	orr.w	r2, r2, #16
 80046b0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d114      	bne.n	80046e4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0220 	orr.w	r2, r2, #32
 80046c8:	619a      	str	r2, [r3, #24]
 80046ca:	e00b      	b.n	80046e4 <HAL_FDCAN_Init+0x234>
 80046cc:	0800acf4 	.word	0x0800acf4
 80046d0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80046f4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80046fc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	3b01      	subs	r3, #1
 8004706:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800470c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800470e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004718:	d115      	bne.n	8004746 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	3b01      	subs	r3, #1
 8004726:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004728:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	3b01      	subs	r3, #1
 8004730:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004732:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	3b01      	subs	r3, #1
 800473c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004742:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004744:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476c:	4413      	add	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d012      	beq.n	8004798 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800477a:	f023 0107 	bic.w	r1, r3, #7
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004788:	4413      	add	r3, r2
 800478a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d012      	beq.n	80047c6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047a8:	f023 0107 	bic.w	r1, r3, #7
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047b6:	4413      	add	r3, r2
 80047b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047d6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80047e4:	4413      	add	r3, r2
 80047e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80047ea:	011a      	lsls	r2, r3, #4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d013      	beq.n	8004826 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004806:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004814:	4413      	add	r3, r2
 8004816:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a11      	ldr	r2, [pc, #68]	; (8004870 <HAL_FDCAN_Init+0x3c0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d107      	bne.n	8004840 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f022 0203 	bic.w	r2, r2, #3
 800483e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f80b 	bl	8004874 <FDCAN_CalcultateRamBlockAddresses>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004864:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004868:	4618      	mov	r0, r3
 800486a:	3760      	adds	r7, #96	; 0x60
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	4000a000 	.word	0x4000a000

08004874 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800488a:	4ba7      	ldr	r3, [pc, #668]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800488c:	4013      	ands	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0091      	lsls	r1, r2, #2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	430b      	orrs	r3, r1
 8004898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4413      	add	r3, r2
 80048c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80048ca:	4b97      	ldr	r3, [pc, #604]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	0091      	lsls	r1, r2, #2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	041a      	lsls	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800490c:	4b86      	ldr	r3, [pc, #536]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800490e:	4013      	ands	r3, r2
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	0091      	lsls	r1, r2, #2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	430b      	orrs	r3, r1
 800491a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004926:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	041a      	lsls	r2, r3, #16
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4413      	add	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004954:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004956:	4013      	ands	r3, r2
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	0091      	lsls	r1, r2, #2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	430b      	orrs	r3, r1
 8004962:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800496e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	041a      	lsls	r2, r3, #16
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4413      	add	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800499c:	4b62      	ldr	r3, [pc, #392]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800499e:	4013      	ands	r3, r2
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	0091      	lsls	r1, r2, #2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80049c8:	4b57      	ldr	r3, [pc, #348]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	0091      	lsls	r1, r2, #2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049e2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	041a      	lsls	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004a0a:	4b47      	ldr	r3, [pc, #284]	; (8004b28 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	0091      	lsls	r1, r2, #2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	430b      	orrs	r3, r1
 8004a18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004a24:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	041a      	lsls	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004a40:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a48:	061a      	lsls	r2, r3, #24
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009a      	lsls	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	441a      	add	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d915      	bls.n	8004b50 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004b24:	e006      	b.n	8004b34 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004b26:	bf00      	nop
 8004b28:	ffff0003 	.word	0xffff0003
 8004b2c:	10002b00 	.word	0x10002b00
 8004b30:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b3a:	f043 0220 	orr.w	r2, r3, #32
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2203      	movs	r2, #3
 8004b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e010      	b.n	8004b72 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e005      	b.n	8004b64 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3304      	adds	r3, #4
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d3f3      	bcc.n	8004b58 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	; 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b8e:	4b89      	ldr	r3, [pc, #548]	; (8004db4 <HAL_GPIO_Init+0x234>)
 8004b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b92:	e194      	b.n	8004ebe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	2101      	movs	r1, #1
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 8186 	beq.w	8004eb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d00b      	beq.n	8004bcc <HAL_GPIO_Init+0x4c>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d007      	beq.n	8004bcc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc0:	2b11      	cmp	r3, #17
 8004bc2:	d003      	beq.n	8004bcc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b12      	cmp	r3, #18
 8004bca:	d130      	bne.n	8004c2e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c02:	2201      	movs	r2, #1
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0201 	and.w	r2, r3, #1
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	2203      	movs	r2, #3
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0xee>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b12      	cmp	r3, #18
 8004c6c:	d123      	bne.n	8004cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	08da      	lsrs	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3208      	adds	r2, #8
 8004c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	220f      	movs	r2, #15
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	08da      	lsrs	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3208      	adds	r2, #8
 8004cb0:	69b9      	ldr	r1, [r7, #24]
 8004cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0203 	and.w	r2, r3, #3
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80e0 	beq.w	8004eb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf8:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <HAL_GPIO_Init+0x238>)
 8004cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cfe:	4a2e      	ldr	r2, [pc, #184]	; (8004db8 <HAL_GPIO_Init+0x238>)
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_GPIO_Init+0x238>)
 8004d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <HAL_GPIO_Init+0x23c>)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	220f      	movs	r2, #15
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4013      	ands	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a20      	ldr	r2, [pc, #128]	; (8004dc0 <HAL_GPIO_Init+0x240>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d052      	beq.n	8004de8 <HAL_GPIO_Init+0x268>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <HAL_GPIO_Init+0x244>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d031      	beq.n	8004dae <HAL_GPIO_Init+0x22e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <HAL_GPIO_Init+0x248>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d02b      	beq.n	8004daa <HAL_GPIO_Init+0x22a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_GPIO_Init+0x24c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d025      	beq.n	8004da6 <HAL_GPIO_Init+0x226>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_GPIO_Init+0x250>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01f      	beq.n	8004da2 <HAL_GPIO_Init+0x222>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <HAL_GPIO_Init+0x254>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d019      	beq.n	8004d9e <HAL_GPIO_Init+0x21e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_GPIO_Init+0x258>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_GPIO_Init+0x21a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_GPIO_Init+0x25c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00d      	beq.n	8004d96 <HAL_GPIO_Init+0x216>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_GPIO_Init+0x260>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <HAL_GPIO_Init+0x212>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <HAL_GPIO_Init+0x264>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <HAL_GPIO_Init+0x20e>
 8004d8a:	2309      	movs	r3, #9
 8004d8c:	e02d      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004d8e:	230a      	movs	r3, #10
 8004d90:	e02b      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004d92:	2308      	movs	r3, #8
 8004d94:	e029      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004d96:	2307      	movs	r3, #7
 8004d98:	e027      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	e025      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004d9e:	2305      	movs	r3, #5
 8004da0:	e023      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004da2:	2304      	movs	r3, #4
 8004da4:	e021      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004da6:	2303      	movs	r3, #3
 8004da8:	e01f      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e01d      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e01b      	b.n	8004dea <HAL_GPIO_Init+0x26a>
 8004db2:	bf00      	nop
 8004db4:	58000080 	.word	0x58000080
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	58000400 	.word	0x58000400
 8004dc0:	58020000 	.word	0x58020000
 8004dc4:	58020400 	.word	0x58020400
 8004dc8:	58020800 	.word	0x58020800
 8004dcc:	58020c00 	.word	0x58020c00
 8004dd0:	58021000 	.word	0x58021000
 8004dd4:	58021400 	.word	0x58021400
 8004dd8:	58021800 	.word	0x58021800
 8004ddc:	58021c00 	.word	0x58021c00
 8004de0:	58022000 	.word	0x58022000
 8004de4:	58022400 	.word	0x58022400
 8004de8:	2300      	movs	r3, #0
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	f002 0203 	and.w	r2, r2, #3
 8004df0:	0092      	lsls	r2, r2, #2
 8004df2:	4093      	lsls	r3, r2
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dfa:	4938      	ldr	r1, [pc, #224]	; (8004edc <HAL_GPIO_Init+0x35c>)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	3302      	adds	r3, #2
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f ae63 	bne.w	8004b94 <HAL_GPIO_Init+0x14>
  }
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	3724      	adds	r7, #36	; 0x24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	58000400 	.word	0x58000400

08004ee0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ef2:	887a      	ldrh	r2, [r7, #2]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	041a      	lsls	r2, r3, #16
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	43d9      	mvns	r1, r3
 8004efe:	887b      	ldrh	r3, [r7, #2]
 8004f00:	400b      	ands	r3, r1
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	619a      	str	r2, [r3, #24]
}
 8004f08:	bf00      	nop
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <HAL_HSEM_FastTake+0x2c>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3320      	adds	r3, #32
 8004f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f26:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <HAL_HSEM_FastTake+0x30>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	58026400 	.word	0x58026400
 8004f44:	80000300 	.word	0x80000300

08004f48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004f52:	4906      	ldr	r1, [pc, #24]	; (8004f6c <HAL_HSEM_Release+0x24>)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	58026400 	.word	0x58026400

08004f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07f      	b.n	8005082 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fc f850 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	e006      	b.n	8004ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d104      	bne.n	800500a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005008:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <HAL_I2C_Init+0x11c>)
 8005016:	430b      	orrs	r3, r1
 8005018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	ea42 0103 	orr.w	r1, r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	02008000 	.word	0x02008000

08005090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d138      	bne.n	8005118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e032      	b.n	800511a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	; 0x24
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6819      	ldr	r1, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005114:	2300      	movs	r3, #0
 8005116:	e000      	b.n	800511a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b20      	cmp	r3, #32
 800513a:	d139      	bne.n	80051b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005146:	2302      	movs	r3, #2
 8005148:	e033      	b.n	80051b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	; 0x24
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e000      	b.n	80051b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
  }
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c0:	b08f      	sub	sp, #60	; 0x3c
 80051c2:	af0a      	add	r7, sp, #40	; 0x28
 80051c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e116      	b.n	80053fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fd f8c4 	bl	8002378 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2203      	movs	r2, #3
 80051f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f005 fada 	bl	800a7c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	687e      	ldr	r6, [r7, #4]
 800521c:	466d      	mov	r5, sp
 800521e:	f106 0410 	add.w	r4, r6, #16
 8005222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800522e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005232:	1d33      	adds	r3, r6, #4
 8005234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f005 fa58 	bl	800a6ec <USB_CoreInit>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0d7      	b.n	80053fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f005 fac8 	bl	800a7ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e04a      	b.n	80052f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	333d      	adds	r3, #61	; 0x3d
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	333c      	adds	r3, #60	; 0x3c
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	b298      	uxth	r0, r3
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3342      	adds	r3, #66	; 0x42
 800529c:	4602      	mov	r2, r0
 800529e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	4613      	mov	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	440b      	add	r3, r1
 80052ae:	333f      	adds	r3, #63	; 0x3f
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3344      	adds	r3, #68	; 0x44
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052c8:	7bfa      	ldrb	r2, [r7, #15]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3348      	adds	r3, #72	; 0x48
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3350      	adds	r3, #80	; 0x50
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	3301      	adds	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d3af      	bcc.n	8005260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005300:	2300      	movs	r3, #0
 8005302:	73fb      	strb	r3, [r7, #15]
 8005304:	e044      	b.n	8005390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800531c:	7bfa      	ldrb	r2, [r7, #15]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800532e:	7bfa      	ldrb	r2, [r7, #15]
 8005330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005374:	7bfa      	ldrb	r2, [r7, #15]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	3301      	adds	r3, #1
 800538e:	73fb      	strb	r3, [r7, #15]
 8005390:	7bfa      	ldrb	r2, [r7, #15]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d3b5      	bcc.n	8005306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	687e      	ldr	r6, [r7, #4]
 80053a2:	466d      	mov	r5, sp
 80053a4:	f106 0410 	add.w	r4, r6, #16
 80053a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80053b8:	1d33      	adds	r3, r6, #4
 80053ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053bc:	6838      	ldr	r0, [r7, #0]
 80053be:	f005 fa3f 	bl	800a840 <USB_DevInit>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e014      	b.n	80053fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d102      	bne.n	80053f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f80b 	bl	8005408 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f005 fbe1 	bl	800abbe <USB_DevDisconnect>

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005408 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_PCDEx_ActivateLPM+0x44>)
 8005438:	4313      	orrs	r3, r2
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	10000003 	.word	0x10000003

08005450 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005458:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_PWREx_ConfigSupply+0xb0>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	2b06      	cmp	r3, #6
 8005462:	d00a      	beq.n	800547a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005464:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_PWREx_ConfigSupply+0xb0>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d001      	beq.n	8005476 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e040      	b.n	80054f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e03e      	b.n	80054f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_PWREx_ConfigSupply+0xb0>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005482:	491f      	ldr	r1, [pc, #124]	; (8005500 <HAL_PWREx_ConfigSupply+0xb0>)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800548a:	f7fd f89f 	bl	80025cc <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005490:	e009      	b.n	80054a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005492:	f7fd f89b 	bl	80025cc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a0:	d901      	bls.n	80054a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e028      	b.n	80054f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054a6:	4b16      	ldr	r3, [pc, #88]	; (8005500 <HAL_PWREx_ConfigSupply+0xb0>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b2:	d1ee      	bne.n	8005492 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b1e      	cmp	r3, #30
 80054b8:	d008      	beq.n	80054cc <HAL_PWREx_ConfigSupply+0x7c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b2e      	cmp	r3, #46	; 0x2e
 80054be:	d005      	beq.n	80054cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b1d      	cmp	r3, #29
 80054c4:	d002      	beq.n	80054cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b2d      	cmp	r3, #45	; 0x2d
 80054ca:	d114      	bne.n	80054f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80054cc:	f7fd f87e 	bl	80025cc <HAL_GetTick>
 80054d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054d2:	e009      	b.n	80054e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054d4:	f7fd f87a 	bl	80025cc <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e2:	d901      	bls.n	80054e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e007      	b.n	80054f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_PWREx_ConfigSupply+0xb0>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f4:	d1ee      	bne.n	80054d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	58024800 	.word	0x58024800

08005504 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800550e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005512:	60d3      	str	r3, [r2, #12]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	58024800 	.word	0x58024800

08005524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08c      	sub	sp, #48	; 0x30
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e3ff      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8087 	beq.w	8005652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005544:	4b99      	ldr	r3, [pc, #612]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800554e:	4b97      	ldr	r3, [pc, #604]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	2b10      	cmp	r3, #16
 8005558:	d007      	beq.n	800556a <HAL_RCC_OscConfig+0x46>
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b18      	cmp	r3, #24
 800555e:	d110      	bne.n	8005582 <HAL_RCC_OscConfig+0x5e>
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d10b      	bne.n	8005582 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556a:	4b90      	ldr	r3, [pc, #576]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d06c      	beq.n	8005650 <HAL_RCC_OscConfig+0x12c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d168      	bne.n	8005650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e3d9      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d106      	bne.n	800559a <HAL_RCC_OscConfig+0x76>
 800558c:	4b87      	ldr	r3, [pc, #540]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a86      	ldr	r2, [pc, #536]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e02e      	b.n	80055f8 <HAL_RCC_OscConfig+0xd4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x98>
 80055a2:	4b82      	ldr	r3, [pc, #520]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a81      	ldr	r2, [pc, #516]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4b7f      	ldr	r3, [pc, #508]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7e      	ldr	r2, [pc, #504]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e01d      	b.n	80055f8 <HAL_RCC_OscConfig+0xd4>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCC_OscConfig+0xbc>
 80055c6:	4b79      	ldr	r3, [pc, #484]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a78      	ldr	r2, [pc, #480]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b76      	ldr	r3, [pc, #472]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a75      	ldr	r2, [pc, #468]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e00b      	b.n	80055f8 <HAL_RCC_OscConfig+0xd4>
 80055e0:	4b72      	ldr	r3, [pc, #456]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a71      	ldr	r2, [pc, #452]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	4b6f      	ldr	r3, [pc, #444]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a6e      	ldr	r2, [pc, #440]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80055f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005600:	f7fc ffe4 	bl	80025cc <HAL_GetTick>
 8005604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005608:	f7fc ffe0 	bl	80025cc <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	; 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e38d      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800561a:	4b64      	ldr	r3, [pc, #400]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0xe4>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc ffd0 	bl	80025cc <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005630:	f7fc ffcc 	bl	80025cc <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	; 0x64
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e379      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005642:	4b5a      	ldr	r3, [pc, #360]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x10c>
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80ae 	beq.w	80057bc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005660:	4b52      	ldr	r3, [pc, #328]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005668:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800566a:	4b50      	ldr	r3, [pc, #320]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <HAL_RCC_OscConfig+0x162>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	2b18      	cmp	r3, #24
 800567a:	d13a      	bne.n	80056f2 <HAL_RCC_OscConfig+0x1ce>
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d135      	bne.n	80056f2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005686:	4b49      	ldr	r3, [pc, #292]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_RCC_OscConfig+0x17a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e34b      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569e:	f7fc ffc5 	bl	800262c <HAL_GetREVID>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d817      	bhi.n	80056dc <HAL_RCC_OscConfig+0x1b8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d108      	bne.n	80056c6 <HAL_RCC_OscConfig+0x1a2>
 80056b4:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80056bc:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	e07a      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c6:	4b39      	ldr	r3, [pc, #228]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	031b      	lsls	r3, r3, #12
 80056d4:	4935      	ldr	r1, [pc, #212]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056da:	e06f      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b33      	ldr	r3, [pc, #204]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	4930      	ldr	r1, [pc, #192]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f0:	e064      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d045      	beq.n	8005786 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056fa:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 0219 	bic.w	r2, r3, #25
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	4929      	ldr	r1, [pc, #164]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005708:	4313      	orrs	r3, r2
 800570a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fc ff5e 	bl	80025cc <HAL_GetTick>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005714:	f7fc ff5a 	bl	80025cc <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e307      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005726:	4b21      	ldr	r3, [pc, #132]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005732:	f7fc ff7b 	bl	800262c <HAL_GetREVID>
 8005736:	4603      	mov	r3, r0
 8005738:	f241 0203 	movw	r2, #4099	; 0x1003
 800573c:	4293      	cmp	r3, r2
 800573e:	d817      	bhi.n	8005770 <HAL_RCC_OscConfig+0x24c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d108      	bne.n	800575a <HAL_RCC_OscConfig+0x236>
 8005748:	4b18      	ldr	r3, [pc, #96]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005756:	6053      	str	r3, [r2, #4]
 8005758:	e030      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	031b      	lsls	r3, r3, #12
 8005768:	4910      	ldr	r1, [pc, #64]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800576a:	4313      	orrs	r3, r2
 800576c:	604b      	str	r3, [r1, #4]
 800576e:	e025      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	061b      	lsls	r3, r3, #24
 800577e:	490b      	ldr	r1, [pc, #44]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
 8005784:	e01a      	b.n	80057bc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a08      	ldr	r2, [pc, #32]	; (80057ac <HAL_RCC_OscConfig+0x288>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fc ff1b 	bl	80025cc <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005798:	e00a      	b.n	80057b0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579a:	f7fc ff17 	bl	80025cc <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d903      	bls.n	80057b0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e2c4      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
 80057ac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057b0:	4ba4      	ldr	r3, [pc, #656]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ee      	bne.n	800579a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80a9 	beq.w	800591c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ca:	4b9e      	ldr	r3, [pc, #632]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057d4:	4b9b      	ldr	r3, [pc, #620]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d007      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2cc>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b18      	cmp	r3, #24
 80057e4:	d13a      	bne.n	800585c <HAL_RCC_OscConfig+0x338>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d135      	bne.n	800585c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f0:	4b94      	ldr	r3, [pc, #592]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_RCC_OscConfig+0x2e4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	2b80      	cmp	r3, #128	; 0x80
 8005802:	d001      	beq.n	8005808 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e296      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005808:	f7fc ff10 	bl	800262c <HAL_GetREVID>
 800580c:	4603      	mov	r3, r0
 800580e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005812:	4293      	cmp	r3, r2
 8005814:	d817      	bhi.n	8005846 <HAL_RCC_OscConfig+0x322>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	2b20      	cmp	r3, #32
 800581c:	d108      	bne.n	8005830 <HAL_RCC_OscConfig+0x30c>
 800581e:	4b89      	ldr	r3, [pc, #548]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005826:	4a87      	ldr	r2, [pc, #540]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800582c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800582e:	e075      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005830:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	069b      	lsls	r3, r3, #26
 800583e:	4981      	ldr	r1, [pc, #516]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005844:	e06a      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005846:	4b7f      	ldr	r3, [pc, #508]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	497b      	ldr	r1, [pc, #492]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005856:	4313      	orrs	r3, r2
 8005858:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800585a:	e05f      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d042      	beq.n	80058ea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005864:	4b77      	ldr	r3, [pc, #476]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a76      	ldr	r2, [pc, #472]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 800586a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fc feac 	bl	80025cc <HAL_GetTick>
 8005874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005878:	f7fc fea8 	bl	80025cc <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e255      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800588a:	4b6e      	ldr	r3, [pc, #440]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005896:	f7fc fec9 	bl	800262c <HAL_GetREVID>
 800589a:	4603      	mov	r3, r0
 800589c:	f241 0203 	movw	r2, #4099	; 0x1003
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d817      	bhi.n	80058d4 <HAL_RCC_OscConfig+0x3b0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d108      	bne.n	80058be <HAL_RCC_OscConfig+0x39a>
 80058ac:	4b65      	ldr	r3, [pc, #404]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058b4:	4a63      	ldr	r2, [pc, #396]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ba:	6053      	str	r3, [r2, #4]
 80058bc:	e02e      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
 80058be:	4b61      	ldr	r3, [pc, #388]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	069b      	lsls	r3, r3, #26
 80058cc:	495d      	ldr	r1, [pc, #372]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	604b      	str	r3, [r1, #4]
 80058d2:	e023      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
 80058d4:	4b5b      	ldr	r3, [pc, #364]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	4958      	ldr	r1, [pc, #352]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60cb      	str	r3, [r1, #12]
 80058e8:	e018      	b.n	800591c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058ea:	4b56      	ldr	r3, [pc, #344]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a55      	ldr	r2, [pc, #340]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80058f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fc fe69 	bl	80025cc <HAL_GetTick>
 80058fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058fe:	f7fc fe65 	bl	80025cc <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e212      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005910:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d036      	beq.n	8005996 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d019      	beq.n	8005964 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005930:	4b44      	ldr	r3, [pc, #272]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005934:	4a43      	ldr	r2, [pc, #268]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fc fe46 	bl	80025cc <HAL_GetTick>
 8005940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005944:	f7fc fe42 	bl	80025cc <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e1ef      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005956:	4b3b      	ldr	r3, [pc, #236]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x420>
 8005962:	e018      	b.n	8005996 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005964:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005968:	4a36      	ldr	r2, [pc, #216]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005970:	f7fc fe2c 	bl	80025cc <HAL_GetTick>
 8005974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005978:	f7fc fe28 	bl	80025cc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e1d5      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800598a:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 800598c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d036      	beq.n	8005a10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d019      	beq.n	80059de <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059aa:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80059b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059b6:	f7fc fe09 	bl	80025cc <HAL_GetTick>
 80059ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059be:	f7fc fe05 	bl	80025cc <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e1b2      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059d0:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x49a>
 80059dc:	e018      	b.n	8005a10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059de:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 80059e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059ea:	f7fc fdef 	bl	80025cc <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059f2:	f7fc fdeb 	bl	80025cc <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e198      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a04:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <HAL_RCC_OscConfig+0x520>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 8085 	beq.w	8005b28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_RCC_OscConfig+0x524>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <HAL_RCC_OscConfig+0x524>)
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a2a:	f7fc fdcf 	bl	80025cc <HAL_GetTick>
 8005a2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a30:	e00c      	b.n	8005a4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a32:	f7fc fdcb 	bl	80025cc <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b64      	cmp	r3, #100	; 0x64
 8005a3e:	d905      	bls.n	8005a4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e178      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
 8005a44:	58024400 	.word	0x58024400
 8005a48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a4c:	4b96      	ldr	r3, [pc, #600]	; (8005ca8 <HAL_RCC_OscConfig+0x784>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ec      	beq.n	8005a32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x54a>
 8005a60:	4b92      	ldr	r3, [pc, #584]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a91      	ldr	r2, [pc, #580]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	e02d      	b.n	8005aca <HAL_RCC_OscConfig+0x5a6>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x56c>
 8005a76:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a8c      	ldr	r2, [pc, #560]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	4b8a      	ldr	r3, [pc, #552]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a89      	ldr	r2, [pc, #548]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a88:	f023 0304 	bic.w	r3, r3, #4
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8e:	e01c      	b.n	8005aca <HAL_RCC_OscConfig+0x5a6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d10c      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x58e>
 8005a98:	4b84      	ldr	r3, [pc, #528]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	4a83      	ldr	r2, [pc, #524]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa4:	4b81      	ldr	r3, [pc, #516]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	4a80      	ldr	r2, [pc, #512]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab0:	e00b      	b.n	8005aca <HAL_RCC_OscConfig+0x5a6>
 8005ab2:	4b7e      	ldr	r3, [pc, #504]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70
 8005abe:	4b7b      	ldr	r3, [pc, #492]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a7a      	ldr	r2, [pc, #488]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d015      	beq.n	8005afe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad2:	f7fc fd7b 	bl	80025cc <HAL_GetTick>
 8005ad6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fc fd77 	bl	80025cc <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e122      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005af0:	4b6e      	ldr	r3, [pc, #440]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ee      	beq.n	8005ada <HAL_RCC_OscConfig+0x5b6>
 8005afc:	e014      	b.n	8005b28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fc fd65 	bl	80025cc <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b04:	e00a      	b.n	8005b1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b06:	f7fc fd61 	bl	80025cc <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e10c      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b1c:	4b63      	ldr	r3, [pc, #396]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1ee      	bne.n	8005b06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8101 	beq.w	8005d34 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b32:	4b5e      	ldr	r3, [pc, #376]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b3a:	2b18      	cmp	r3, #24
 8005b3c:	f000 80bc 	beq.w	8005cb8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	f040 8095 	bne.w	8005c74 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4a:	4b58      	ldr	r3, [pc, #352]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a57      	ldr	r2, [pc, #348]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fc fd39 	bl	80025cc <HAL_GetTick>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5e:	f7fc fd35 	bl	80025cc <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e0e2      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b70:	4b4e      	ldr	r3, [pc, #312]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b7c:	4b4b      	ldr	r3, [pc, #300]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <HAL_RCC_OscConfig+0x78c>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b8c:	0112      	lsls	r2, r2, #4
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	4946      	ldr	r1, [pc, #280]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	628b      	str	r3, [r1, #40]	; 0x28
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	025b      	lsls	r3, r3, #9
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bc6:	4939      	ldr	r1, [pc, #228]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005bcc:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	4a36      	ldr	r2, [pc, #216]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bd8:	4b34      	ldr	r3, [pc, #208]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bdc:	4b35      	ldr	r3, [pc, #212]	; (8005cb4 <HAL_RCC_OscConfig+0x790>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005be4:	00d2      	lsls	r2, r2, #3
 8005be6:	4931      	ldr	r1, [pc, #196]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bec:	4b2f      	ldr	r3, [pc, #188]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	f023 020c 	bic.w	r2, r3, #12
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	492c      	ldr	r1, [pc, #176]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	f023 0202 	bic.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	4928      	ldr	r1, [pc, #160]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c10:	4b26      	ldr	r3, [pc, #152]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	4a25      	ldr	r2, [pc, #148]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b23      	ldr	r3, [pc, #140]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a22      	ldr	r2, [pc, #136]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	4a1c      	ldr	r2, [pc, #112]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c40:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4c:	f7fc fcbe 	bl	80025cc <HAL_GetTick>
 8005c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fc fcba 	bl	80025cc <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e067      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0x730>
 8005c72:	e05f      	b.n	8005d34 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c74:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fc fca4 	bl	80025cc <HAL_GetTick>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c88:	f7fc fca0 	bl	80025cc <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e04d      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c9a:	4b04      	ldr	r3, [pc, #16]	; (8005cac <HAL_RCC_OscConfig+0x788>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f0      	bne.n	8005c88 <HAL_RCC_OscConfig+0x764>
 8005ca6:	e045      	b.n	8005d34 <HAL_RCC_OscConfig+0x810>
 8005ca8:	58024800 	.word	0x58024800
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	fffffc0c 	.word	0xfffffc0c
 8005cb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005cb8:	4b21      	ldr	r3, [pc, #132]	; (8005d40 <HAL_RCC_OscConfig+0x81c>)
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCC_OscConfig+0x81c>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d031      	beq.n	8005d30 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f003 0203 	and.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d12a      	bne.n	8005d30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d122      	bne.n	8005d30 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d11a      	bne.n	8005d30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d111      	bne.n	8005d30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	0c1b      	lsrs	r3, r3, #16
 8005d10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d108      	bne.n	8005d30 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3730      	adds	r7, #48	; 0x30
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	58024400 	.word	0x58024400

08005d44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e19c      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d58:	4b8a      	ldr	r3, [pc, #552]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d910      	bls.n	8005d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d66:	4b87      	ldr	r3, [pc, #540]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f023 020f 	bic.w	r2, r3, #15
 8005d6e:	4985      	ldr	r1, [pc, #532]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	4b83      	ldr	r3, [pc, #524]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d001      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e184      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	4b7b      	ldr	r3, [pc, #492]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d908      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005da4:	4b78      	ldr	r3, [pc, #480]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	4975      	ldr	r1, [pc, #468]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	4b70      	ldr	r3, [pc, #448]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d908      	bls.n	8005de4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dd2:	4b6d      	ldr	r3, [pc, #436]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	496a      	ldr	r1, [pc, #424]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d010      	beq.n	8005e12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	4b64      	ldr	r3, [pc, #400]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d908      	bls.n	8005e12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e00:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	495e      	ldr	r1, [pc, #376]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d010      	beq.n	8005e40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	4b59      	ldr	r3, [pc, #356]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d908      	bls.n	8005e40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e2e:	4b56      	ldr	r3, [pc, #344]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4953      	ldr	r1, [pc, #332]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d010      	beq.n	8005e6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	4b4d      	ldr	r3, [pc, #308]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d908      	bls.n	8005e6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e5c:	4b4a      	ldr	r3, [pc, #296]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f023 020f 	bic.w	r2, r3, #15
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4947      	ldr	r1, [pc, #284]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d055      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e7a:	4b43      	ldr	r3, [pc, #268]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4940      	ldr	r1, [pc, #256]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e94:	4b3c      	ldr	r3, [pc, #240]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d121      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0f6      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eac:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d115      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0ea      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ec4:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0de      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed4:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0d6      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ee4:	4b28      	ldr	r3, [pc, #160]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f023 0207 	bic.w	r2, r3, #7
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4925      	ldr	r1, [pc, #148]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef6:	f7fc fb69 	bl	80025cc <HAL_GetTick>
 8005efa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efe:	f7fc fb65 	bl	80025cc <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e0be      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f14:	4b1c      	ldr	r3, [pc, #112]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d1eb      	bne.n	8005efe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d010      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d208      	bcs.n	8005f54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f023 020f 	bic.w	r2, r3, #15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	490e      	ldr	r1, [pc, #56]	; (8005f88 <HAL_RCC_ClockConfig+0x244>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d214      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f023 020f 	bic.w	r2, r3, #15
 8005f6a:	4906      	ldr	r1, [pc, #24]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <HAL_RCC_ClockConfig+0x240>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d005      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e086      	b.n	8006092 <HAL_RCC_ClockConfig+0x34e>
 8005f84:	52002000 	.word	0x52002000
 8005f88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d208      	bcs.n	8005fba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fa8:	4b3c      	ldr	r3, [pc, #240]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	4939      	ldr	r1, [pc, #228]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	4b34      	ldr	r3, [pc, #208]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d208      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fd6:	4b31      	ldr	r3, [pc, #196]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	492e      	ldr	r1, [pc, #184]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d010      	beq.n	8006016 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	4b28      	ldr	r3, [pc, #160]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006000:	429a      	cmp	r2, r3
 8006002:	d208      	bcs.n	8006016 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006004:	4b25      	ldr	r3, [pc, #148]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4922      	ldr	r1, [pc, #136]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8006012:	4313      	orrs	r3, r2
 8006014:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	4b1d      	ldr	r3, [pc, #116]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800602e:	429a      	cmp	r2, r3
 8006030:	d208      	bcs.n	8006044 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006032:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	4917      	ldr	r1, [pc, #92]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8006040:	4313      	orrs	r3, r2
 8006042:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006044:	f000 f834 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	4912      	ldr	r1, [pc, #72]	; (80060a0 <HAL_RCC_ClockConfig+0x35c>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006062:	4b0e      	ldr	r3, [pc, #56]	; (800609c <HAL_RCC_ClockConfig+0x358>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	4a0d      	ldr	r2, [pc, #52]	; (80060a0 <HAL_RCC_ClockConfig+0x35c>)
 800606c:	5cd3      	ldrb	r3, [r2, r3]
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
 8006078:	4a0a      	ldr	r2, [pc, #40]	; (80060a4 <HAL_RCC_ClockConfig+0x360>)
 800607a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800607c:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <HAL_RCC_ClockConfig+0x364>)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <HAL_RCC_ClockConfig+0x368>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f7fc fa56 	bl	8002538 <HAL_InitTick>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	58024400 	.word	0x58024400
 80060a0:	0800ad40 	.word	0x0800ad40
 80060a4:	24000004 	.word	0x24000004
 80060a8:	24000000 	.word	0x24000000
 80060ac:	24000008 	.word	0x24000008

080060b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b089      	sub	sp, #36	; 0x24
 80060b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b6:	4bb3      	ldr	r3, [pc, #716]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060be:	2b18      	cmp	r3, #24
 80060c0:	f200 8155 	bhi.w	800636e <HAL_RCC_GetSysClockFreq+0x2be>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	08006131 	.word	0x08006131
 80060d0:	0800636f 	.word	0x0800636f
 80060d4:	0800636f 	.word	0x0800636f
 80060d8:	0800636f 	.word	0x0800636f
 80060dc:	0800636f 	.word	0x0800636f
 80060e0:	0800636f 	.word	0x0800636f
 80060e4:	0800636f 	.word	0x0800636f
 80060e8:	0800636f 	.word	0x0800636f
 80060ec:	08006157 	.word	0x08006157
 80060f0:	0800636f 	.word	0x0800636f
 80060f4:	0800636f 	.word	0x0800636f
 80060f8:	0800636f 	.word	0x0800636f
 80060fc:	0800636f 	.word	0x0800636f
 8006100:	0800636f 	.word	0x0800636f
 8006104:	0800636f 	.word	0x0800636f
 8006108:	0800636f 	.word	0x0800636f
 800610c:	0800615d 	.word	0x0800615d
 8006110:	0800636f 	.word	0x0800636f
 8006114:	0800636f 	.word	0x0800636f
 8006118:	0800636f 	.word	0x0800636f
 800611c:	0800636f 	.word	0x0800636f
 8006120:	0800636f 	.word	0x0800636f
 8006124:	0800636f 	.word	0x0800636f
 8006128:	0800636f 	.word	0x0800636f
 800612c:	08006163 	.word	0x08006163
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006130:	4b94      	ldr	r3, [pc, #592]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d009      	beq.n	8006150 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800613c:	4b91      	ldr	r3, [pc, #580]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	08db      	lsrs	r3, r3, #3
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	4a90      	ldr	r2, [pc, #576]	; (8006388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800614e:	e111      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006150:	4b8d      	ldr	r3, [pc, #564]	; (8006388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006152:	61bb      	str	r3, [r7, #24]
    break;
 8006154:	e10e      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006156:	4b8d      	ldr	r3, [pc, #564]	; (800638c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006158:	61bb      	str	r3, [r7, #24]
    break;
 800615a:	e10b      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800615c:	4b8c      	ldr	r3, [pc, #560]	; (8006390 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800615e:	61bb      	str	r3, [r7, #24]
    break;
 8006160:	e108      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006162:	4b88      	ldr	r3, [pc, #544]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800616c:	4b85      	ldr	r3, [pc, #532]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006176:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006178:	4b82      	ldr	r3, [pc, #520]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006182:	4b80      	ldr	r3, [pc, #512]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006186:	08db      	lsrs	r3, r3, #3
 8006188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80e1 	beq.w	8006368 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	f000 8083 	beq.w	80062b4 <HAL_RCC_GetSysClockFreq+0x204>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	f200 80a1 	bhi.w	80062f8 <HAL_RCC_GetSysClockFreq+0x248>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x114>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d056      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061c2:	e099      	b.n	80062f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c4:	4b6f      	ldr	r3, [pc, #444]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d02d      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061d0:	4b6c      	ldr	r3, [pc, #432]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	4a6b      	ldr	r2, [pc, #428]	; (8006388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b62      	ldr	r3, [pc, #392]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a02 	vldr	s12, [r7, #8]
 800620e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800622a:	e087      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006236:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006398 <HAL_RCC_GetSysClockFreq+0x2e8>
 800623a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623e:	4b51      	ldr	r3, [pc, #324]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006252:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800626e:	e065      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800639c <HAL_RCC_GetSysClockFreq+0x2ec>
 800627e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006282:	4b40      	ldr	r3, [pc, #256]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006292:	ed97 6a02 	vldr	s12, [r7, #8]
 8006296:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800629a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062b2:	e043      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80063a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006394 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062f6:	e021      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	eddf 6a26 	vldr	s13, [pc, #152]	; 800639c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630a:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631a:	ed97 6a02 	vldr	s12, [r7, #8]
 800631e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006394 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800633a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800633c:	4b11      	ldr	r3, [pc, #68]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	0a5b      	lsrs	r3, r3, #9
 8006342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006346:	3301      	adds	r3, #1
 8006348:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006354:	edd7 6a07 	vldr	s13, [r7, #28]
 8006358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006360:	ee17 3a90 	vmov	r3, s15
 8006364:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006366:	e005      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	61bb      	str	r3, [r7, #24]
    break;
 800636c:	e002      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006370:	61bb      	str	r3, [r7, #24]
    break;
 8006372:	bf00      	nop
  }

  return sysclockfreq;
 8006374:	69bb      	ldr	r3, [r7, #24]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3724      	adds	r7, #36	; 0x24
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	58024400 	.word	0x58024400
 8006388:	03d09000 	.word	0x03d09000
 800638c:	003d0900 	.word	0x003d0900
 8006390:	007a1200 	.word	0x007a1200
 8006394:	46000000 	.word	0x46000000
 8006398:	4c742400 	.word	0x4c742400
 800639c:	4a742400 	.word	0x4a742400
 80063a0:	4af42400 	.word	0x4af42400

080063a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063aa:	f7ff fe81 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 80063ae:	4602      	mov	r2, r0
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	490f      	ldr	r1, [pc, #60]	; (80063f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80063bc:	5ccb      	ldrb	r3, [r1, r3]
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	fa22 f303 	lsr.w	r3, r2, r3
 80063de:	4a07      	ldr	r2, [pc, #28]	; (80063fc <HAL_RCC_GetHCLKFreq+0x58>)
 80063e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063e2:	4a07      	ldr	r2, [pc, #28]	; (8006400 <HAL_RCC_GetHCLKFreq+0x5c>)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <HAL_RCC_GetHCLKFreq+0x58>)
 80063ea:	681b      	ldr	r3, [r3, #0]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	58024400 	.word	0x58024400
 80063f8:	0800ad40 	.word	0x0800ad40
 80063fc:	24000004 	.word	0x24000004
 8006400:	24000000 	.word	0x24000000

08006404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006408:	f7ff ffcc 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 800640c:	4602      	mov	r2, r0
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	091b      	lsrs	r3, r3, #4
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	4904      	ldr	r1, [pc, #16]	; (800642c <HAL_RCC_GetPCLK1Freq+0x28>)
 800641a:	5ccb      	ldrb	r3, [r1, r3]
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006424:	4618      	mov	r0, r3
 8006426:	bd80      	pop	{r7, pc}
 8006428:	58024400 	.word	0x58024400
 800642c:	0800ad40 	.word	0x0800ad40

08006430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006434:	f7ff ffb6 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 8006438:	4602      	mov	r2, r0
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	4904      	ldr	r1, [pc, #16]	; (8006458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006446:	5ccb      	ldrb	r3, [r1, r3]
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	58024400 	.word	0x58024400
 8006458:	0800ad40 	.word	0x0800ad40

0800645c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006464:	2300      	movs	r3, #0
 8006466:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006468:	2300      	movs	r3, #0
 800646a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d03f      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006480:	d02a      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006482:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006486:	d824      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648c:	d018      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800648e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006492:	d81e      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800649c:	d007      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800649e:	e018      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a0:	4bab      	ldr	r3, [pc, #684]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	4aaa      	ldr	r2, [pc, #680]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064ac:	e015      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2102      	movs	r1, #2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fff3 	bl	80084a0 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064be:	e00c      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3324      	adds	r3, #36	; 0x24
 80064c4:	2102      	movs	r1, #2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 f89c 	bl	8008604 <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064d0:	e003      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
      break;
 80064d6:	e000      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d109      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064e0:	4b9b      	ldr	r3, [pc, #620]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ec:	4998      	ldr	r1, [pc, #608]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	650b      	str	r3, [r1, #80]	; 0x50
 80064f2:	e001      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f4:	7dfb      	ldrb	r3, [r7, #23]
 80064f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d03d      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	2b04      	cmp	r3, #4
 800650a:	d826      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006529 	.word	0x08006529
 8006518:	08006537 	.word	0x08006537
 800651c:	08006549 	.word	0x08006549
 8006520:	08006561 	.word	0x08006561
 8006524:	08006561 	.word	0x08006561
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006528:	4b89      	ldr	r3, [pc, #548]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4a88      	ldr	r2, [pc, #544]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800652e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006532:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006534:	e015      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	2100      	movs	r1, #0
 800653c:	4618      	mov	r0, r3
 800653e:	f001 ffaf 	bl	80084a0 <RCCEx_PLL2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006546:	e00c      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	2100      	movs	r1, #0
 800654e:	4618      	mov	r0, r3
 8006550:	f002 f858 	bl	8008604 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006558:	e003      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	e000      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006568:	4b79      	ldr	r3, [pc, #484]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656c:	f023 0207 	bic.w	r2, r3, #7
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006574:	4976      	ldr	r1, [pc, #472]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006576:	4313      	orrs	r3, r2
 8006578:	650b      	str	r3, [r1, #80]	; 0x50
 800657a:	e001      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006588:	2b00      	cmp	r3, #0
 800658a:	d042      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006594:	d02b      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659a:	d825      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800659c:	2bc0      	cmp	r3, #192	; 0xc0
 800659e:	d028      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065a0:	2bc0      	cmp	r3, #192	; 0xc0
 80065a2:	d821      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80065a4:	2b80      	cmp	r3, #128	; 0x80
 80065a6:	d016      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80065a8:	2b80      	cmp	r3, #128	; 0x80
 80065aa:	d81d      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d007      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80065b4:	e018      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b6:	4b66      	ldr	r3, [pc, #408]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	4a65      	ldr	r2, [pc, #404]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065c2:	e017      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 ff68 	bl	80084a0 <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065d4:	e00e      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3324      	adds	r3, #36	; 0x24
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f002 f811 	bl	8008604 <RCCEx_PLL3_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065e6:	e005      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
      break;
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80065f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80065fa:	4b55      	ldr	r3, [pc, #340]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	4952      	ldr	r1, [pc, #328]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006608:	4313      	orrs	r3, r2
 800660a:	650b      	str	r3, [r1, #80]	; 0x50
 800660c:	e001      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661a:	2b00      	cmp	r3, #0
 800661c:	d049      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006628:	d030      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800662a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800662e:	d82a      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006630:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006634:	d02c      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006636:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800663a:	d824      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800663c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006640:	d018      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006646:	d81e      	bhi.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800664c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006650:	d007      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006652:	e018      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006654:	4b3e      	ldr	r3, [pc, #248]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800665a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006660:	e017      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f001 ff19 	bl	80084a0 <RCCEx_PLL2_Config>
 800666e:	4603      	mov	r3, r0
 8006670:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006672:	e00e      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3324      	adds	r3, #36	; 0x24
 8006678:	2100      	movs	r1, #0
 800667a:	4618      	mov	r0, r3
 800667c:	f001 ffc2 	bl	8008604 <RCCEx_PLL3_Config>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006684:	e005      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
      break;
 800668a:	e002      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800668c:	bf00      	nop
 800668e:	e000      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006698:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800669a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066a6:	492a      	ldr	r1, [pc, #168]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	658b      	str	r3, [r1, #88]	; 0x58
 80066ac:	e001      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04c      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066c8:	d030      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80066ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ce:	d82a      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066d4:	d02c      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80066d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066da:	d824      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e0:	d018      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80066e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e6:	d81e      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80066ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066f0:	d007      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80066f2:	e018      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a15      	ldr	r2, [pc, #84]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006700:	e017      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fec9 	bl	80084a0 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006712:	e00e      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3324      	adds	r3, #36	; 0x24
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f001 ff72 	bl	8008604 <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006724:	e005      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
      break;
 800672a:	e002      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10d      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800673a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006746:	4902      	ldr	r1, [pc, #8]	; (8006750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006748:	4313      	orrs	r3, r2
 800674a:	658b      	str	r3, [r1, #88]	; 0x58
 800674c:	e004      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800674e:	bf00      	nop
 8006750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d032      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d01c      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800676c:	2b30      	cmp	r3, #48	; 0x30
 800676e:	d817      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d00c      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d813      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d016      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800677c:	2b10      	cmp	r3, #16
 800677e:	d10f      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006780:	4baf      	ldr	r3, [pc, #700]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	4aae      	ldr	r2, [pc, #696]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800678c:	e00e      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3304      	adds	r3, #4
 8006792:	2102      	movs	r1, #2
 8006794:	4618      	mov	r0, r3
 8006796:	f001 fe83 	bl	80084a0 <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800679e:	e005      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	75fb      	strb	r3, [r7, #23]
      break;
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80067a6:	bf00      	nop
 80067a8:	e000      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80067aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067b2:	4ba3      	ldr	r3, [pc, #652]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	49a0      	ldr	r1, [pc, #640]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067c4:	e001      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d047      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067de:	d030      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80067e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e4:	d82a      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067ea:	d02c      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80067ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067f0:	d824      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f6:	d018      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	d81e      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d007      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006808:	e018      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680a:	4b8d      	ldr	r3, [pc, #564]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	4a8c      	ldr	r2, [pc, #560]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006814:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006816:	e017      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f001 fe3e 	bl	80084a0 <RCCEx_PLL2_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006828:	e00e      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3324      	adds	r3, #36	; 0x24
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f001 fee7 	bl	8008604 <RCCEx_PLL3_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800683a:	e005      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
      break;
 8006840:	e002      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800684e:	4b7c      	ldr	r3, [pc, #496]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006852:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685a:	4979      	ldr	r1, [pc, #484]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800685c:	4313      	orrs	r3, r2
 800685e:	650b      	str	r3, [r1, #80]	; 0x50
 8006860:	e001      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d049      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800687a:	d02e      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800687c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006880:	d828      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006886:	d02a      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800688c:	d822      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800688e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006892:	d026      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006894:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006898:	d81c      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800689a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689e:	d010      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80068a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a4:	d816      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d01d      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80068aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ae:	d111      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	2101      	movs	r1, #1
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fdf2 	bl	80084a0 <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068c0:	e012      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3324      	adds	r3, #36	; 0x24
 80068c6:	2101      	movs	r1, #1
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 fe9b 	bl	8008604 <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068d2:	e009      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	e006      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068da:	bf00      	nop
 80068dc:	e004      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e8:	7dfb      	ldrb	r3, [r7, #23]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80068ee:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fa:	4951      	ldr	r1, [pc, #324]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	650b      	str	r3, [r1, #80]	; 0x50
 8006900:	e001      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
 8006904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d04b      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800691c:	d02e      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800691e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006922:	d828      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d02a      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d822      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006930:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006934:	d026      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800693a:	d81c      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800693c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006940:	d010      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006946:	d816      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01d      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800694c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006950:	d111      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fda1 	bl	80084a0 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006962:	e012      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3324      	adds	r3, #36	; 0x24
 8006968:	2101      	movs	r1, #1
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fe4a 	bl	8008604 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006974:	e009      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
      break;
 800697a:	e006      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800697c:	bf00      	nop
 800697e:	e004      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006980:	bf00      	nop
 8006982:	e002      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006984:	bf00      	nop
 8006986:	e000      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006990:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006994:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800699e:	4928      	ldr	r1, [pc, #160]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	658b      	str	r3, [r1, #88]	; 0x58
 80069a4:	e001      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d02f      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069be:	d00e      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x582>
 80069c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c4:	d814      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d015      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80069ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ce:	d10f      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d0:	4b1b      	ldr	r3, [pc, #108]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4a1a      	ldr	r2, [pc, #104]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80069dc:	e00c      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	2101      	movs	r1, #1
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fd5b 	bl	80084a0 <RCCEx_PLL2_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
      break;
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80069f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a0a:	490d      	ldr	r1, [pc, #52]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	650b      	str	r3, [r1, #80]	; 0x50
 8006a10:	e001      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d033      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d81c      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a6b 	.word	0x08006a6b
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a53 	.word	0x08006a53
 8006a3c:	08006a6b 	.word	0x08006a6b
 8006a40:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a44:	4bb8      	ldr	r3, [pc, #736]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4ab7      	ldr	r2, [pc, #732]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a50:	e00c      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2102      	movs	r1, #2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fd21 	bl	80084a0 <RCCEx_PLL2_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a62:	e003      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]
      break;
 8006a68:	e000      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a72:	4bad      	ldr	r3, [pc, #692]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a76:	f023 0203 	bic.w	r2, r3, #3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7e:	49aa      	ldr	r1, [pc, #680]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a84:	e001      	b.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8086 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a98:	4ba4      	ldr	r3, [pc, #656]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4aa3      	ldr	r2, [pc, #652]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aa4:	f7fb fd92 	bl	80025cc <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aaa:	e009      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fb fd8e 	bl	80025cc <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	; 0x64
 8006ab8:	d902      	bls.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	75fb      	strb	r3, [r7, #23]
        break;
 8006abe:	e005      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ac0:	4b9a      	ldr	r3, [pc, #616]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0ef      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d166      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ad2:	4b95      	ldr	r3, [pc, #596]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ad4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006adc:	4053      	eors	r3, r2
 8006ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d013      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ae6:	4b90      	ldr	r3, [pc, #576]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006af0:	4b8d      	ldr	r3, [pc, #564]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	4a8c      	ldr	r2, [pc, #560]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006afc:	4b8a      	ldr	r3, [pc, #552]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	4a89      	ldr	r2, [pc, #548]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b06:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006b08:	4a87      	ldr	r2, [pc, #540]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b18:	d115      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1a:	f7fb fd57 	bl	80025cc <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b20:	e00b      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b22:	f7fb fd53 	bl	80025cc <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d902      	bls.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	75fb      	strb	r3, [r7, #23]
            break;
 8006b38:	e005      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b3a:	4b7b      	ldr	r3, [pc, #492]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0ed      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d126      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b5a:	d10d      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006b5c:	4b72      	ldr	r3, [pc, #456]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b6a:	0919      	lsrs	r1, r3, #4
 8006b6c:	4b70      	ldr	r3, [pc, #448]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006b6e:	400b      	ands	r3, r1
 8006b70:	496d      	ldr	r1, [pc, #436]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	610b      	str	r3, [r1, #16]
 8006b76:	e005      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006b78:	4b6b      	ldr	r3, [pc, #428]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	4a6a      	ldr	r2, [pc, #424]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006b82:	6113      	str	r3, [r2, #16]
 8006b84:	4b68      	ldr	r3, [pc, #416]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b92:	4965      	ldr	r1, [pc, #404]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	670b      	str	r3, [r1, #112]	; 0x70
 8006b98:	e004      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	75bb      	strb	r3, [r7, #22]
 8006b9e:	e001      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d07e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb4:	2b28      	cmp	r3, #40	; 0x28
 8006bb6:	d867      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006c8f 	.word	0x08006c8f
 8006bc4:	08006c89 	.word	0x08006c89
 8006bc8:	08006c89 	.word	0x08006c89
 8006bcc:	08006c89 	.word	0x08006c89
 8006bd0:	08006c89 	.word	0x08006c89
 8006bd4:	08006c89 	.word	0x08006c89
 8006bd8:	08006c89 	.word	0x08006c89
 8006bdc:	08006c89 	.word	0x08006c89
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006c89 	.word	0x08006c89
 8006be8:	08006c89 	.word	0x08006c89
 8006bec:	08006c89 	.word	0x08006c89
 8006bf0:	08006c89 	.word	0x08006c89
 8006bf4:	08006c89 	.word	0x08006c89
 8006bf8:	08006c89 	.word	0x08006c89
 8006bfc:	08006c89 	.word	0x08006c89
 8006c00:	08006c77 	.word	0x08006c77
 8006c04:	08006c89 	.word	0x08006c89
 8006c08:	08006c89 	.word	0x08006c89
 8006c0c:	08006c89 	.word	0x08006c89
 8006c10:	08006c89 	.word	0x08006c89
 8006c14:	08006c89 	.word	0x08006c89
 8006c18:	08006c89 	.word	0x08006c89
 8006c1c:	08006c89 	.word	0x08006c89
 8006c20:	08006c8f 	.word	0x08006c8f
 8006c24:	08006c89 	.word	0x08006c89
 8006c28:	08006c89 	.word	0x08006c89
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c89 	.word	0x08006c89
 8006c3c:	08006c89 	.word	0x08006c89
 8006c40:	08006c8f 	.word	0x08006c8f
 8006c44:	08006c89 	.word	0x08006c89
 8006c48:	08006c89 	.word	0x08006c89
 8006c4c:	08006c89 	.word	0x08006c89
 8006c50:	08006c89 	.word	0x08006c89
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006c89 	.word	0x08006c89
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	08006c8f 	.word	0x08006c8f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	2101      	movs	r1, #1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fc18 	bl	80084a0 <RCCEx_PLL2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006c74:	e00c      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3324      	adds	r3, #36	; 0x24
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fcc1 	bl	8008604 <RCCEx_PLL3_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006c86:	e003      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8c:	e000      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ca2:	4921      	ldr	r1, [pc, #132]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ca8:	e001      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d03e      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d820      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006d0b 	.word	0x08006d0b
 8006ccc:	08006ce1 	.word	0x08006ce1
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d0b 	.word	0x08006d0b
 8006cd8:	08006d0b 	.word	0x08006d0b
 8006cdc:	08006d0b 	.word	0x08006d0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fbda 	bl	80084a0 <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e00c      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3324      	adds	r3, #36	; 0x24
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fc83 	bl	8008604 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
      break;
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d110      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d16:	f023 0207 	bic.w	r2, r3, #7
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d1e:	4902      	ldr	r1, [pc, #8]	; (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	654b      	str	r3, [r1, #84]	; 0x54
 8006d24:	e008      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	58024800 	.word	0x58024800
 8006d30:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
 8006d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d039      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d820      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d97 	.word	0x08006d97
 8006d58:	08006d6d 	.word	0x08006d6d
 8006d5c:	08006d7f 	.word	0x08006d7f
 8006d60:	08006d97 	.word	0x08006d97
 8006d64:	08006d97 	.word	0x08006d97
 8006d68:	08006d97 	.word	0x08006d97
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fb94 	bl	80084a0 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d7c:	e00c      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3324      	adds	r3, #36	; 0x24
 8006d82:	2101      	movs	r1, #1
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 fc3d 	bl	8008604 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d8e:	e003      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
      break;
 8006d94:	e000      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d9e:	4bb7      	ldr	r3, [pc, #732]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da2:	f023 0207 	bic.w	r2, r3, #7
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dac:	49b3      	ldr	r1, [pc, #716]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	658b      	str	r3, [r1, #88]	; 0x58
 8006db2:	e001      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0320 	and.w	r3, r3, #32
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d04b      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dce:	d02e      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dd4:	d828      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dda:	d02a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de0:	d822      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006de6:	d026      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dec:	d81c      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df2:	d010      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df8:	d816      	bhi.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01d      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e02:	d111      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3304      	adds	r3, #4
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 fb48 	bl	80084a0 <RCCEx_PLL2_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e14:	e012      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3324      	adds	r3, #36	; 0x24
 8006e1a:	2102      	movs	r1, #2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 fbf1 	bl	8008604 <RCCEx_PLL3_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e26:	e009      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2c:	e006      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e004      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e32:	bf00      	nop
 8006e34:	e002      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e36:	bf00      	nop
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e42:	4b8e      	ldr	r3, [pc, #568]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e50:	498a      	ldr	r1, [pc, #552]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	654b      	str	r3, [r1, #84]	; 0x54
 8006e56:	e001      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d04b      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e72:	d02e      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006e74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e78:	d828      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7e:	d02a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e84:	d822      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e8a:	d026      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e90:	d81c      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e96:	d010      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9c:	d816      	bhi.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01d      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea6:	d111      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 faf6 	bl	80084a0 <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006eb8:	e012      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	2102      	movs	r1, #2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 fb9f 	bl	8008604 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006eca:	e009      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed0:	e006      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e004      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ed6:	bf00      	nop
 8006ed8:	e002      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006eda:	bf00      	nop
 8006edc:	e000      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ee6:	4b65      	ldr	r3, [pc, #404]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ef4:	4961      	ldr	r1, [pc, #388]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8006efa:	e001      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d04b      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f16:	d02e      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006f18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f1c:	d828      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f22:	d02a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f28:	d822      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f2e:	d026      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006f30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f34:	d81c      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f3a:	d010      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f40:	d816      	bhi.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01d      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4a:	d111      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 faa4 	bl	80084a0 <RCCEx_PLL2_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f5c:	e012      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	2102      	movs	r1, #2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 fb4d 	bl	8008604 <RCCEx_PLL3_Config>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f6e:	e009      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	75fb      	strb	r3, [r7, #23]
      break;
 8006f74:	e006      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f76:	bf00      	nop
 8006f78:	e004      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e002      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f8a:	4b3c      	ldr	r3, [pc, #240]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f98:	4938      	ldr	r1, [pc, #224]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f9e:	e001      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01a      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fba:	d10a      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3324      	adds	r3, #36	; 0x24
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fb1e 	bl	8008604 <RCCEx_PLL3_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fd2:	4b2a      	ldr	r3, [pc, #168]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fe0:	4926      	ldr	r1, [pc, #152]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01a      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d10a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3324      	adds	r3, #36	; 0x24
 8007002:	2102      	movs	r1, #2
 8007004:	4618      	mov	r0, r3
 8007006:	f001 fafd 	bl	8008604 <RCCEx_PLL3_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007014:	4b19      	ldr	r3, [pc, #100]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007022:	4916      	ldr	r1, [pc, #88]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007024:	4313      	orrs	r3, r2
 8007026:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d036      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800703a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800703e:	d01f      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007044:	d817      	bhi.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800704a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704e:	d009      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007050:	e011      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3304      	adds	r3, #4
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f001 fa21 	bl	80084a0 <RCCEx_PLL2_Config>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007062:	e00e      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3324      	adds	r3, #36	; 0x24
 8007068:	2102      	movs	r1, #2
 800706a:	4618      	mov	r0, r3
 800706c:	f001 faca 	bl	8008604 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007074:	e005      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
      break;
 800707a:	e002      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800707c:	58024400 	.word	0x58024400
      break;
 8007080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007088:	4b93      	ldr	r3, [pc, #588]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007096:	4990      	ldr	r1, [pc, #576]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007098:	4313      	orrs	r3, r2
 800709a:	658b      	str	r3, [r1, #88]	; 0x58
 800709c:	e001      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d033      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070b8:	d01c      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80070ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070be:	d816      	bhi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80070c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c4:	d003      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80070c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ca:	d007      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80070cc:	e00f      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ce:	4b82      	ldr	r3, [pc, #520]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	4a81      	ldr	r2, [pc, #516]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80070da:	e00c      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	2101      	movs	r1, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fa8e 	bl	8008604 <RCCEx_PLL3_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
      break;
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80070f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070fc:	4b76      	ldr	r3, [pc, #472]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710a:	4973      	ldr	r1, [pc, #460]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800710c:	4313      	orrs	r3, r2
 800710e:	654b      	str	r3, [r1, #84]	; 0x54
 8007110:	e001      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d029      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712e:	d007      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007130:	e00f      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007132:	4b69      	ldr	r3, [pc, #420]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	4a68      	ldr	r2, [pc, #416]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800713e:	e00b      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	2102      	movs	r1, #2
 8007146:	4618      	mov	r0, r3
 8007148:	f001 f9aa 	bl	80084a0 <RCCEx_PLL2_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007150:	e002      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
      break;
 8007156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800715e:	4b5e      	ldr	r3, [pc, #376]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716a:	495b      	ldr	r1, [pc, #364]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800716c:	4313      	orrs	r3, r2
 800716e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007170:	e001      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3324      	adds	r3, #36	; 0x24
 8007186:	2102      	movs	r1, #2
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fa3b 	bl	8008604 <RCCEx_PLL3_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d030      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ac:	d017      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80071ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071b2:	d811      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d013      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80071ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071be:	d80b      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d010      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80071c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c8:	d106      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ca:	4b43      	ldr	r3, [pc, #268]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80071d6:	e007      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e004      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071de:	bf00      	nop
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071ee:	4b3a      	ldr	r3, [pc, #232]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fa:	4937      	ldr	r1, [pc, #220]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007200:	e001      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007212:	4b31      	ldr	r3, [pc, #196]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007216:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	492e      	ldr	r1, [pc, #184]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007220:	4313      	orrs	r3, r2
 8007222:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007230:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800723e:	4926      	ldr	r1, [pc, #152]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007250:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800725c:	491e      	ldr	r1, [pc, #120]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800725e:	4313      	orrs	r3, r2
 8007260:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800726e:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007274:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007278:	6113      	str	r3, [r2, #16]
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007284:	4914      	ldr	r1, [pc, #80]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	da08      	bge.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007296:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	490e      	ldr	r1, [pc, #56]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	4906      	ldr	r1, [pc, #24]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80072c4:	7dbb      	ldrb	r3, [r7, #22]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	58024400 	.word	0x58024400

080072dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b090      	sub	sp, #64	; 0x40
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ea:	f040 8095 	bne.w	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80072ee:	4bae      	ldr	r3, [pc, #696]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80072f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f2:	f003 0307 	and.w	r3, r3, #7
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	f200 8088 	bhi.w	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	0800731d 	.word	0x0800731d
 800730c:	08007345 	.word	0x08007345
 8007310:	0800736d 	.word	0x0800736d
 8007314:	08007409 	.word	0x08007409
 8007318:	08007395 	.word	0x08007395

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800731c:	4ba2      	ldr	r3, [pc, #648]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007328:	d108      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800732a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800732e:	4618      	mov	r0, r3
 8007330:	f000 ff64 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007338:	f000 bc95 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007340:	f000 bc91 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007344:	4b98      	ldr	r3, [pc, #608]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800734c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007350:	d108      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007352:	f107 0318 	add.w	r3, r7, #24
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fca8 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007360:	f000 bc81 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007368:	f000 bc7d 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800736c:	4b8e      	ldr	r3, [pc, #568]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007378:	d108      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fde8 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007388:	f000 bc6d 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007390:	f000 bc69 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007394:	4b84      	ldr	r3, [pc, #528]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800739c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800739e:	4b82      	ldr	r3, [pc, #520]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0304 	and.w	r3, r3, #4
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d10c      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d109      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073b0:	4b7d      	ldr	r3, [pc, #500]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	08db      	lsrs	r3, r3, #3
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	4a7c      	ldr	r2, [pc, #496]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073c2:	e01f      	b.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073c4:	4b78      	ldr	r3, [pc, #480]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d0:	d106      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d8:	d102      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80073da:	4b75      	ldr	r3, [pc, #468]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073de:	e011      	b.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073e0:	4b71      	ldr	r3, [pc, #452]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ec:	d106      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f4:	d102      	bne.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80073f6:	4b6f      	ldr	r3, [pc, #444]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80073f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073fa:	e003      	b.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007400:	f000 bc31 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007404:	f000 bc2f 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007408:	4b6b      	ldr	r3, [pc, #428]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740c:	f000 bc2b 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007414:	f000 bc27 	b.w	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741e:	f040 8095 	bne.w	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007422:	4b61      	ldr	r3, [pc, #388]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007426:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800742a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	d04d      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	f200 8084 	bhi.w	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2bc0      	cmp	r3, #192	; 0xc0
 8007442:	d07d      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2bc0      	cmp	r3, #192	; 0xc0
 8007448:	d87d      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	2b80      	cmp	r3, #128	; 0x80
 800744e:	d02d      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	2b80      	cmp	r3, #128	; 0x80
 8007454:	d877      	bhi.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2b40      	cmp	r3, #64	; 0x40
 8007460:	d012      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007462:	e070      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007464:	4b50      	ldr	r3, [pc, #320]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007470:	d107      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fec0 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007480:	e3f1      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007486:	e3ee      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007488:	4b47      	ldr	r3, [pc, #284]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007494:	d107      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007496:	f107 0318 	add.w	r3, r7, #24
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fc06 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074a4:	e3df      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074aa:	e3dc      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074ac:	4b3e      	ldr	r3, [pc, #248]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b8:	d107      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 fd48 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80074c8:	e3cd      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ce:	e3ca      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074d0:	4b35      	ldr	r3, [pc, #212]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074da:	4b33      	ldr	r3, [pc, #204]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d10c      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80074e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074ec:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	08db      	lsrs	r3, r3, #3
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	4a2d      	ldr	r2, [pc, #180]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fe:	e01e      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007500:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750c:	d106      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007514:	d102      	bne.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007516:	4b26      	ldr	r3, [pc, #152]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751a:	e010      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800751c:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007528:	d106      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007530:	d102      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007532:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007536:	e002      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800753c:	e393      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800753e:	e392      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007540:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007544:	e38f      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800754a:	e38c      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007552:	f040 80a7 	bne.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800755e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007566:	d05f      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800756e:	f200 8096 	bhi.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007578:	f000 808e 	beq.w	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007582:	f200 808c 	bhi.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758c:	d03a      	beq.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007594:	f200 8083 	bhi.w	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a4:	d01c      	beq.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80075a6:	e07a      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80075a8:	58024400 	.word	0x58024400
 80075ac:	03d09000 	.word	0x03d09000
 80075b0:	003d0900 	.word	0x003d0900
 80075b4:	007a1200 	.word	0x007a1200
 80075b8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075bc:	4baa      	ldr	r3, [pc, #680]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fe14 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075d8:	e345      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075de:	e342      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075e0:	4ba1      	ldr	r3, [pc, #644]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ec:	d107      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ee:	f107 0318 	add.w	r3, r7, #24
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fb5a 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075fc:	e333      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007602:	e330      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007604:	4b98      	ldr	r3, [pc, #608]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800760c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007610:	d107      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fc9c 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007620:	e321      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007626:	e31e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007628:	4b8f      	ldr	r3, [pc, #572]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800762a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007630:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007632:	4b8d      	ldr	r3, [pc, #564]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b04      	cmp	r3, #4
 800763c:	d10c      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	2b00      	cmp	r3, #0
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007644:	4b88      	ldr	r3, [pc, #544]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a87      	ldr	r2, [pc, #540]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007656:	e01e      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007658:	4b83      	ldr	r3, [pc, #524]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8007666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800766c:	d102      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800766e:	4b80      	ldr	r3, [pc, #512]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007672:	e010      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007674:	4b7c      	ldr	r3, [pc, #496]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007680:	d106      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007688:	d102      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800768a:	4b7a      	ldr	r3, [pc, #488]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800768e:	e002      	b.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007694:	e2e7      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007696:	e2e6      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007698:	4b77      	ldr	r3, [pc, #476]	; (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800769c:	e2e3      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a2:	e2e0      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076aa:	f040 809c 	bne.w	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80076ae:	4b6e      	ldr	r3, [pc, #440]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80076b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076be:	d054      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076c6:	f200 808b 	bhi.w	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076d0:	f000 8083 	beq.w	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076da:	f200 8081 	bhi.w	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e4:	d02f      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ec:	d878      	bhi.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076fa:	d012      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80076fc:	e070      	b.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076fe:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800770a:	d107      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800770c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fd73 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800771a:	e2a4      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007720:	e2a1      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007722:	4b51      	ldr	r3, [pc, #324]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800772e:	d107      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007730:	f107 0318 	add.w	r3, r7, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fab9 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800773e:	e292      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007744:	e28f      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007746:	4b48      	ldr	r3, [pc, #288]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800774e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007752:	d107      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007754:	f107 030c 	add.w	r3, r7, #12
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fbfb 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007762:	e280      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007768:	e27d      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800776a:	4b3f      	ldr	r3, [pc, #252]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007772:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007774:	4b3c      	ldr	r3, [pc, #240]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b04      	cmp	r3, #4
 800777e:	d10c      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007786:	4b38      	ldr	r3, [pc, #224]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	08db      	lsrs	r3, r3, #3
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	4a36      	ldr	r2, [pc, #216]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007798:	e01e      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800779a:	4b33      	ldr	r3, [pc, #204]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a6:	d106      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ae:	d102      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80077b0:	4b2f      	ldr	r3, [pc, #188]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077b4:	e010      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077b6:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c2:	d106      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ca:	d102      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d0:	e002      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80077d6:	e246      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80077d8:	e245      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077da:	4b27      	ldr	r3, [pc, #156]	; (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077de:	e242      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077e4:	e23f      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ec:	f040 80a8 	bne.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80077f0:	4b1d      	ldr	r3, [pc, #116]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80077f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007800:	d060      	beq.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007808:	f200 8097 	bhi.w	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007812:	f000 808f 	beq.w	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800781c:	f200 808d 	bhi.w	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007826:	d03b      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800782e:	f200 8084 	bhi.w	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783e:	d01d      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007840:	e07b      	b.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007842:	4b09      	ldr	r3, [pc, #36]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800784e:	d107      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007854:	4618      	mov	r0, r3
 8007856:	f000 fcd1 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800785e:	e202      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007864:	e1ff      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007866:	bf00      	nop
 8007868:	58024400 	.word	0x58024400
 800786c:	03d09000 	.word	0x03d09000
 8007870:	003d0900 	.word	0x003d0900
 8007874:	007a1200 	.word	0x007a1200
 8007878:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800787c:	4ba3      	ldr	r3, [pc, #652]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788a:	f107 0318 	add.w	r3, r7, #24
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fa0c 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007898:	e1e5      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789e:	e1e2      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078a0:	4b9a      	ldr	r3, [pc, #616]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ac:	d107      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fb4e 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078bc:	e1d3      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c2:	e1d0      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078c4:	4b91      	ldr	r3, [pc, #580]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078ce:	4b8f      	ldr	r3, [pc, #572]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d10c      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078e0:	4b8a      	ldr	r3, [pc, #552]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	08db      	lsrs	r3, r3, #3
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	4a89      	ldr	r2, [pc, #548]	; (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f2:	e01e      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078f4:	4b85      	ldr	r3, [pc, #532]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007900:	d106      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007908:	d102      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800790a:	4b82      	ldr	r3, [pc, #520]	; (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790e:	e010      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007910:	4b7e      	ldr	r3, [pc, #504]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800791c:	d106      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007924:	d102      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007926:	4b7c      	ldr	r3, [pc, #496]	; (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792a:	e002      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007930:	e199      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007932:	e198      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007934:	4b79      	ldr	r3, [pc, #484]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007938:	e195      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793e:	e192      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007946:	d173      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007948:	4b70      	ldr	r3, [pc, #448]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800794a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007950:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007958:	d02f      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007960:	d863      	bhi.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800796e:	d012      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8007970:	e05b      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007972:	4b66      	ldr	r3, [pc, #408]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800797e:	d107      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007980:	f107 0318 	add.w	r3, r7, #24
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f991 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800798e:	e16a      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007994:	e167      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007996:	4b5d      	ldr	r3, [pc, #372]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a2:	d107      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fad3 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079b2:	e158      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b8:	e155      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079ba:	4b54      	ldr	r3, [pc, #336]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079c4:	4b51      	ldr	r3, [pc, #324]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d10c      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80079d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079d6:	4b4d      	ldr	r3, [pc, #308]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	08db      	lsrs	r3, r3, #3
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	4a4b      	ldr	r2, [pc, #300]	; (8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e8:	e01e      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ea:	4b48      	ldr	r3, [pc, #288]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d106      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079fe:	d102      	bne.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a00:	4b44      	ldr	r3, [pc, #272]	; (8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a04:	e010      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a06:	4b41      	ldr	r3, [pc, #260]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a12:	d106      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1a:	d102      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a1c:	4b3e      	ldr	r3, [pc, #248]	; (8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a20:	e002      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a26:	e11e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a28:	e11d      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a2e:	e11a      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a36:	d133      	bne.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007a38:	4b34      	ldr	r3, [pc, #208]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4e:	d012      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007a50:	e023      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a52:	4b2e      	ldr	r3, [pc, #184]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a5e:	d107      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fbc9 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a6e:	e0fa      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a74:	e0f7      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a76:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a82:	d107      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a84:	f107 0318 	add.w	r3, r7, #24
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 f90f 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a92:	e0e8      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a98:	e0e5      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9e:	e0e2      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa6:	f040 808f 	bne.w	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007aaa:	4b18      	ldr	r3, [pc, #96]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ab2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aba:	d075      	beq.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8007abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ac2:	d87e      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d060      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad2:	d876      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ada:	d045      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ae2:	d86e      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aea:	d02b      	beq.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af2:	d866      	bhi.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b00:	d00e      	beq.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007b02:	e05e      	b.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007b04:	f000 f8bc 	bl	8007c80 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b08:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007b0a:	e0ac      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	003d0900 	.word	0x003d0900
 8007b18:	007a1200 	.word	0x007a1200
 8007b1c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b20:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b2e:	f107 0318 	add.w	r3, r7, #24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f8ba 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b3c:	e093      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b42:	e090      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b44:	4b4a      	ldr	r3, [pc, #296]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b50:	d107      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f9fc 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b60:	e081      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b66:	e07e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b68:	4b41      	ldr	r3, [pc, #260]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d109      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b74:	4b3e      	ldr	r3, [pc, #248]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	08db      	lsrs	r3, r3, #3
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	4a3d      	ldr	r2, [pc, #244]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b86:	e06e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b8c:	e06b      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b8e:	4b38      	ldr	r3, [pc, #224]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9a:	d102      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8007b9c:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ba0:	e061      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ba6:	e05e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ba8:	4b31      	ldr	r3, [pc, #196]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bb4:	d102      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8007bb6:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bba:	e054      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc0:	e051      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc6:	e04e      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bce:	d148      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007bd0:	4b27      	ldr	r3, [pc, #156]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be0:	d02a      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be8:	d838      	bhi.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bf6:	d00d      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8007bf8:	e030      	b.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c06:	d102      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8007c08:	4b1c      	ldr	r3, [pc, #112]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c0c:	e02b      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c12:	e028      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c14:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c20:	d107      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fae8 	bl	80081fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c30:	e019      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c36:	e016      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c38:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c44:	d107      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c46:	f107 0318 	add.w	r3, r7, #24
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f82e 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c54:	e007      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5a:	e004      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c60:	e001      	b.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3740      	adds	r7, #64	; 0x40
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	58024400 	.word	0x58024400
 8007c74:	03d09000 	.word	0x03d09000
 8007c78:	003d0900 	.word	0x003d0900
 8007c7c:	007a1200 	.word	0x007a1200

08007c80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c84:	f7fe fb8e 	bl	80063a4 <HAL_RCC_GetHCLKFreq>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	091b      	lsrs	r3, r3, #4
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	4904      	ldr	r1, [pc, #16]	; (8007ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c96:	5ccb      	ldrb	r3, [r1, r3]
 8007c98:	f003 031f 	and.w	r3, r3, #31
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	58024400 	.word	0x58024400
 8007ca8:	0800ad40 	.word	0x0800ad40

08007cac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b089      	sub	sp, #36	; 0x24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cb4:	4ba1      	ldr	r3, [pc, #644]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007cbe:	4b9f      	ldr	r3, [pc, #636]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	0b1b      	lsrs	r3, r3, #12
 8007cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007cca:	4b9c      	ldr	r3, [pc, #624]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	091b      	lsrs	r3, r3, #4
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007cd6:	4b99      	ldr	r3, [pc, #612]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	fb02 f303 	mul.w	r3, r2, r3
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f000 8111 	beq.w	8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	f000 8083 	beq.w	8007e08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	f200 80a1 	bhi.w	8007e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d056      	beq.n	8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007d16:	e099      	b.n	8007e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d18:	4b88      	ldr	r3, [pc, #544]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02d      	beq.n	8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d24:	4b85      	ldr	r3, [pc, #532]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	4a84      	ldr	r2, [pc, #528]	; (8007f40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
 8007d34:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4e:	4b7b      	ldr	r3, [pc, #492]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d7e:	e087      	b.n	8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007f48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d92:	4b6a      	ldr	r3, [pc, #424]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dc2:	e065      	b.n	8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd6:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e06:	e043      	b.n	8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1a:	4b48      	ldr	r3, [pc, #288]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e22:	ee07 3a90 	vmov	s15, r3
 8007e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e4a:	e021      	b.n	8007e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5e:	4b37      	ldr	r3, [pc, #220]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007e90:	4b2a      	ldr	r3, [pc, #168]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	0a5b      	lsrs	r3, r3, #9
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ebe:	4b1f      	ldr	r3, [pc, #124]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ee4:	ee17 2a90 	vmov	r2, s15
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007eec:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef0:	0e1b      	lsrs	r3, r3, #24
 8007ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f12:	ee17 2a90 	vmov	r2, s15
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f1a:	e008      	b.n	8007f2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	609a      	str	r2, [r3, #8]
}
 8007f2e:	bf00      	nop
 8007f30:	3724      	adds	r7, #36	; 0x24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	03d09000 	.word	0x03d09000
 8007f44:	46000000 	.word	0x46000000
 8007f48:	4c742400 	.word	0x4c742400
 8007f4c:	4a742400 	.word	0x4a742400
 8007f50:	4af42400 	.word	0x4af42400

08007f54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b089      	sub	sp, #36	; 0x24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f5c:	4ba1      	ldr	r3, [pc, #644]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007f66:	4b9f      	ldr	r3, [pc, #636]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	0d1b      	lsrs	r3, r3, #20
 8007f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f72:	4b9c      	ldr	r3, [pc, #624]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	0a1b      	lsrs	r3, r3, #8
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007f7e:	4b99      	ldr	r3, [pc, #612]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	08db      	lsrs	r3, r3, #3
 8007f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8111 	beq.w	80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	f000 8083 	beq.w	80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	f200 80a1 	bhi.w	80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d056      	beq.n	800806c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007fbe:	e099      	b.n	80080f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fc0:	4b88      	ldr	r3, [pc, #544]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02d      	beq.n	8008028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fcc:	4b85      	ldr	r3, [pc, #532]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	4a84      	ldr	r2, [pc, #528]	; (80081e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fdc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff6:	4b7b      	ldr	r3, [pc, #492]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008006:	ed97 6a03 	vldr	s12, [r7, #12]
 800800a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800800e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800801e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008022:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008026:	e087      	b.n	8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008032:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800803a:	4b6a      	ldr	r3, [pc, #424]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800804a:	ed97 6a03 	vldr	s12, [r7, #12]
 800804e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800805a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800805e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800806a:	e065      	b.n	8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008076:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800807a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807e:	4b59      	ldr	r3, [pc, #356]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008092:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ae:	e043      	b.n	8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80080be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c2:	4b48      	ldr	r3, [pc, #288]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080f2:	e021      	b.n	8008138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008106:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008116:	ed97 6a03 	vldr	s12, [r7, #12]
 800811a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800811e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008138:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	0a5b      	lsrs	r3, r3, #9
 800813e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800814e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008152:	edd7 6a07 	vldr	s13, [r7, #28]
 8008156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815e:	ee17 2a90 	vmov	r2, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008166:	4b1f      	ldr	r3, [pc, #124]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800817c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008180:	edd7 6a07 	vldr	s13, [r7, #28]
 8008184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800818c:	ee17 2a90 	vmov	r2, s15
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008194:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	0e1b      	lsrs	r3, r3, #24
 800819a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ba:	ee17 2a90 	vmov	r2, s15
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80081c2:	e008      	b.n	80081d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	609a      	str	r2, [r3, #8]
}
 80081d6:	bf00      	nop
 80081d8:	3724      	adds	r7, #36	; 0x24
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	58024400 	.word	0x58024400
 80081e8:	03d09000 	.word	0x03d09000
 80081ec:	46000000 	.word	0x46000000
 80081f0:	4c742400 	.word	0x4c742400
 80081f4:	4a742400 	.word	0x4a742400
 80081f8:	4af42400 	.word	0x4af42400

080081fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b089      	sub	sp, #36	; 0x24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008204:	4ba0      	ldr	r3, [pc, #640]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800820e:	4b9e      	ldr	r3, [pc, #632]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008218:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800821a:	4b9b      	ldr	r3, [pc, #620]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008224:	4b98      	ldr	r3, [pc, #608]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	08db      	lsrs	r3, r3, #3
 800822a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	fb02 f303 	mul.w	r3, r2, r3
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8111 	beq.w	800846a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	2b02      	cmp	r3, #2
 800824c:	f000 8083 	beq.w	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b02      	cmp	r3, #2
 8008254:	f200 80a1 	bhi.w	800839a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d056      	beq.n	8008312 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008264:	e099      	b.n	800839a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008266:	4b88      	ldr	r3, [pc, #544]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d02d      	beq.n	80082ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008272:	4b85      	ldr	r3, [pc, #532]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	08db      	lsrs	r3, r3, #3
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	4a83      	ldr	r2, [pc, #524]	; (800848c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800827e:	fa22 f303 	lsr.w	r3, r2, r3
 8008282:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800829c:	4b7a      	ldr	r3, [pc, #488]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80082b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082cc:	e087      	b.n	80083de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80082dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e0:	4b69      	ldr	r3, [pc, #420]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e8:	ee07 3a90 	vmov	s15, r3
 80082ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008310:	e065      	b.n	80083de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008498 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008324:	4b58      	ldr	r3, [pc, #352]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832c:	ee07 3a90 	vmov	s15, r3
 8008330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008334:	ed97 6a03 	vldr	s12, [r7, #12]
 8008338:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800833c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008344:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008350:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008354:	e043      	b.n	80083de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008360:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008368:	4b47      	ldr	r3, [pc, #284]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008378:	ed97 6a03 	vldr	s12, [r7, #12]
 800837c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008394:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008398:	e021      	b.n	80083de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80083a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ac:	4b36      	ldr	r3, [pc, #216]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b4:	ee07 3a90 	vmov	s15, r3
 80083b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80083de:	4b2a      	ldr	r3, [pc, #168]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e2:	0a5b      	lsrs	r3, r3, #9
 80083e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e8:	ee07 3a90 	vmov	s15, r3
 80083ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008404:	ee17 2a90 	vmov	r2, s15
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800840c:	4b1e      	ldr	r3, [pc, #120]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	0c1b      	lsrs	r3, r3, #16
 8008412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008426:	edd7 6a07 	vldr	s13, [r7, #28]
 800842a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800842e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008432:	ee17 2a90 	vmov	r2, s15
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800843a:	4b13      	ldr	r3, [pc, #76]	; (8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	0e1b      	lsrs	r3, r3, #24
 8008440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008454:	edd7 6a07 	vldr	s13, [r7, #28]
 8008458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008460:	ee17 2a90 	vmov	r2, s15
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008468:	e008      	b.n	800847c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	3724      	adds	r7, #36	; 0x24
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	58024400 	.word	0x58024400
 800848c:	03d09000 	.word	0x03d09000
 8008490:	46000000 	.word	0x46000000
 8008494:	4c742400 	.word	0x4c742400
 8008498:	4a742400 	.word	0x4a742400
 800849c:	4af42400 	.word	0x4af42400

080084a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084ae:	4b53      	ldr	r3, [pc, #332]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d101      	bne.n	80084be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e099      	b.n	80085f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80084be:	4b4f      	ldr	r3, [pc, #316]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a4e      	ldr	r2, [pc, #312]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80084c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ca:	f7fa f87f 	bl	80025cc <HAL_GetTick>
 80084ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084d0:	e008      	b.n	80084e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80084d2:	f7fa f87b 	bl	80025cc <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e086      	b.n	80085f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084e4:	4b45      	ldr	r3, [pc, #276]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f0      	bne.n	80084d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084f0:	4b42      	ldr	r3, [pc, #264]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	031b      	lsls	r3, r3, #12
 80084fe:	493f      	ldr	r1, [pc, #252]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008500:	4313      	orrs	r3, r2
 8008502:	628b      	str	r3, [r1, #40]	; 0x28
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	3b01      	subs	r3, #1
 800850a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	3b01      	subs	r3, #1
 8008514:	025b      	lsls	r3, r3, #9
 8008516:	b29b      	uxth	r3, r3
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	3b01      	subs	r3, #1
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	3b01      	subs	r3, #1
 800852e:	061b      	lsls	r3, r3, #24
 8008530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008534:	4931      	ldr	r1, [pc, #196]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008536:	4313      	orrs	r3, r2
 8008538:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800853a:	4b30      	ldr	r3, [pc, #192]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	492d      	ldr	r1, [pc, #180]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008548:	4313      	orrs	r3, r2
 800854a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800854c:	4b2b      	ldr	r3, [pc, #172]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	f023 0220 	bic.w	r2, r3, #32
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	4928      	ldr	r1, [pc, #160]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 800855a:	4313      	orrs	r3, r2
 800855c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800855e:	4b27      	ldr	r3, [pc, #156]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	4a26      	ldr	r2, [pc, #152]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008564:	f023 0310 	bic.w	r3, r3, #16
 8008568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800856a:	4b24      	ldr	r3, [pc, #144]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 800856c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856e:	4b24      	ldr	r3, [pc, #144]	; (8008600 <RCCEx_PLL2_Config+0x160>)
 8008570:	4013      	ands	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	69d2      	ldr	r2, [r2, #28]
 8008576:	00d2      	lsls	r2, r2, #3
 8008578:	4920      	ldr	r1, [pc, #128]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800857e:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008584:	f043 0310 	orr.w	r3, r3, #16
 8008588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d106      	bne.n	800859e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008590:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	4a19      	ldr	r2, [pc, #100]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 8008596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800859a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800859c:	e00f      	b.n	80085be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d106      	bne.n	80085b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085a4:	4b15      	ldr	r3, [pc, #84]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4a14      	ldr	r2, [pc, #80]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085b0:	e005      	b.n	80085be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80085b2:	4b12      	ldr	r3, [pc, #72]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	4a11      	ldr	r2, [pc, #68]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80085be:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a0e      	ldr	r2, [pc, #56]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ca:	f7f9 ffff 	bl	80025cc <HAL_GetTick>
 80085ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085d0:	e008      	b.n	80085e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085d2:	f7f9 fffb 	bl	80025cc <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d901      	bls.n	80085e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e006      	b.n	80085f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <RCCEx_PLL2_Config+0x15c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0f0      	beq.n	80085d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	58024400 	.word	0x58024400
 8008600:	ffff0007 	.word	0xffff0007

08008604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008612:	4b53      	ldr	r3, [pc, #332]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	2b03      	cmp	r3, #3
 800861c:	d101      	bne.n	8008622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e099      	b.n	8008756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008622:	4b4f      	ldr	r3, [pc, #316]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a4e      	ldr	r2, [pc, #312]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800862e:	f7f9 ffcd 	bl	80025cc <HAL_GetTick>
 8008632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008634:	e008      	b.n	8008648 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008636:	f7f9 ffc9 	bl	80025cc <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e086      	b.n	8008756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008648:	4b45      	ldr	r3, [pc, #276]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f0      	bne.n	8008636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008654:	4b42      	ldr	r3, [pc, #264]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	051b      	lsls	r3, r3, #20
 8008662:	493f      	ldr	r1, [pc, #252]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008664:	4313      	orrs	r3, r2
 8008666:	628b      	str	r3, [r1, #40]	; 0x28
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	3b01      	subs	r3, #1
 800866e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	3b01      	subs	r3, #1
 8008678:	025b      	lsls	r3, r3, #9
 800867a:	b29b      	uxth	r3, r3
 800867c:	431a      	orrs	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	3b01      	subs	r3, #1
 8008684:	041b      	lsls	r3, r3, #16
 8008686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	3b01      	subs	r3, #1
 8008692:	061b      	lsls	r3, r3, #24
 8008694:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008698:	4931      	ldr	r1, [pc, #196]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 800869a:	4313      	orrs	r3, r2
 800869c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800869e:	4b30      	ldr	r3, [pc, #192]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	492d      	ldr	r1, [pc, #180]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80086b0:	4b2b      	ldr	r3, [pc, #172]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	4928      	ldr	r1, [pc, #160]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80086c2:	4b27      	ldr	r3, [pc, #156]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	4a26      	ldr	r2, [pc, #152]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086ce:	4b24      	ldr	r3, [pc, #144]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d2:	4b24      	ldr	r3, [pc, #144]	; (8008764 <RCCEx_PLL3_Config+0x160>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	69d2      	ldr	r2, [r2, #28]
 80086da:	00d2      	lsls	r2, r2, #3
 80086dc:	4920      	ldr	r1, [pc, #128]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80086e2:	4b1f      	ldr	r3, [pc, #124]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	4a1e      	ldr	r2, [pc, #120]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	4a19      	ldr	r2, [pc, #100]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 80086fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008700:	e00f      	b.n	8008722 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d106      	bne.n	8008716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008708:	4b15      	ldr	r3, [pc, #84]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	4a14      	ldr	r2, [pc, #80]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 800870e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008712:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008714:	e005      	b.n	8008722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008716:	4b12      	ldr	r3, [pc, #72]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	4a11      	ldr	r2, [pc, #68]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 800871c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008720:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008722:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a0e      	ldr	r2, [pc, #56]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 8008728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800872c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800872e:	f7f9 ff4d 	bl	80025cc <HAL_GetTick>
 8008732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008734:	e008      	b.n	8008748 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008736:	f7f9 ff49 	bl	80025cc <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	2b02      	cmp	r3, #2
 8008742:	d901      	bls.n	8008748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e006      	b.n	8008756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <RCCEx_PLL3_Config+0x15c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d0f0      	beq.n	8008736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	58024400 	.word	0x58024400
 8008764:	ffff0007 	.word	0xffff0007

08008768 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e0eb      	b.n	8008956 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a75      	ldr	r2, [pc, #468]	; (8008960 <HAL_SPI_Init+0x1f8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00f      	beq.n	80087ae <HAL_SPI_Init+0x46>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a74      	ldr	r2, [pc, #464]	; (8008964 <HAL_SPI_Init+0x1fc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00a      	beq.n	80087ae <HAL_SPI_Init+0x46>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a72      	ldr	r2, [pc, #456]	; (8008968 <HAL_SPI_Init+0x200>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d005      	beq.n	80087ae <HAL_SPI_Init+0x46>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d901      	bls.n	80087ae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e0d3      	b.n	8008956 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f8dc 	bl	800896c <SPI_GetPacketSize>
 80087b4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a69      	ldr	r2, [pc, #420]	; (8008960 <HAL_SPI_Init+0x1f8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00c      	beq.n	80087da <HAL_SPI_Init+0x72>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a67      	ldr	r2, [pc, #412]	; (8008964 <HAL_SPI_Init+0x1fc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <HAL_SPI_Init+0x72>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a66      	ldr	r2, [pc, #408]	; (8008968 <HAL_SPI_Init+0x200>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d002      	beq.n	80087da <HAL_SPI_Init+0x72>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b08      	cmp	r3, #8
 80087d8:	d811      	bhi.n	80087fe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087de:	4a60      	ldr	r2, [pc, #384]	; (8008960 <HAL_SPI_Init+0x1f8>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d009      	beq.n	80087f8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a5e      	ldr	r2, [pc, #376]	; (8008964 <HAL_SPI_Init+0x1fc>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <HAL_SPI_Init+0x90>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a5d      	ldr	r2, [pc, #372]	; (8008968 <HAL_SPI_Init+0x200>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d104      	bne.n	8008802 <HAL_SPI_Init+0x9a>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b10      	cmp	r3, #16
 80087fc:	d901      	bls.n	8008802 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e0a9      	b.n	8008956 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7f8 fe62 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0201 	bic.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800883c:	d119      	bne.n	8008872 <HAL_SPI_Init+0x10a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008846:	d103      	bne.n	8008850 <HAL_SPI_Init+0xe8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10c      	bne.n	8008872 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008860:	d107      	bne.n	8008872 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008870:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	69da      	ldr	r2, [r3, #28]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887a:	431a      	orrs	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008884:	ea42 0103 	orr.w	r1, r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	431a      	orrs	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	431a      	orrs	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088d2:	ea42 0103 	orr.w	r1, r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d113      	bne.n	8008912 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008910:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0201 	bic.w	r2, r2, #1
 8008920:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40013000 	.word	0x40013000
 8008964:	40003800 	.word	0x40003800
 8008968:	40003c00 	.word	0x40003c00

0800896c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	3301      	adds	r3, #1
 800897c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	3307      	adds	r3, #7
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	fb02 f303 	mul.w	r3, r2, r3
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e049      	b.n	8008a48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d106      	bne.n	80089ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7f9 f85f 	bl	8001a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3304      	adds	r3, #4
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f000 f9f5 	bl	8008dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e08f      	b.n	8008b84 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f88f 	bl	8008b9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6899      	ldr	r1, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b3e      	ldr	r3, [pc, #248]	; (8008b8c <HAL_TIM_Encoder_Init+0x13c>)
 8008a92:	400b      	ands	r3, r1
 8008a94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f000 f995 	bl	8008dd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4b31      	ldr	r3, [pc, #196]	; (8008b90 <HAL_TIM_Encoder_Init+0x140>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	4313      	orrs	r3, r2
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	4b2b      	ldr	r3, [pc, #172]	; (8008b94 <HAL_TIM_Encoder_Init+0x144>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <HAL_TIM_Encoder_Init+0x148>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	4313      	orrs	r3, r2
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	011a      	lsls	r2, r3, #4
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	4313      	orrs	r3, r2
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	4313      	orrs	r3, r2
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	fffebff8 	.word	0xfffebff8
 8008b90:	fffffcfc 	.word	0xfffffcfc
 8008b94:	fffff3f3 	.word	0xfffff3f3
 8008b98:	ffff0f0f 	.word	0xffff0f0f

08008b9c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e0fd      	b.n	8008dc6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b14      	cmp	r3, #20
 8008bd6:	f200 80f0 	bhi.w	8008dba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008dbb 	.word	0x08008dbb
 8008be8:	08008dbb 	.word	0x08008dbb
 8008bec:	08008dbb 	.word	0x08008dbb
 8008bf0:	08008c75 	.word	0x08008c75
 8008bf4:	08008dbb 	.word	0x08008dbb
 8008bf8:	08008dbb 	.word	0x08008dbb
 8008bfc:	08008dbb 	.word	0x08008dbb
 8008c00:	08008cb7 	.word	0x08008cb7
 8008c04:	08008dbb 	.word	0x08008dbb
 8008c08:	08008dbb 	.word	0x08008dbb
 8008c0c:	08008dbb 	.word	0x08008dbb
 8008c10:	08008cf7 	.word	0x08008cf7
 8008c14:	08008dbb 	.word	0x08008dbb
 8008c18:	08008dbb 	.word	0x08008dbb
 8008c1c:	08008dbb 	.word	0x08008dbb
 8008c20:	08008d39 	.word	0x08008d39
 8008c24:	08008dbb 	.word	0x08008dbb
 8008c28:	08008dbb 	.word	0x08008dbb
 8008c2c:	08008dbb 	.word	0x08008dbb
 8008c30:	08008d79 	.word	0x08008d79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 f962 	bl	8008f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0208 	orr.w	r2, r2, #8
 8008c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0204 	bic.w	r2, r2, #4
 8008c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6999      	ldr	r1, [r3, #24]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	691a      	ldr	r2, [r3, #16]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	619a      	str	r2, [r3, #24]
      break;
 8008c72:	e0a3      	b.n	8008dbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f9d2 	bl	8009024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699a      	ldr	r2, [r3, #24]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699a      	ldr	r2, [r3, #24]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6999      	ldr	r1, [r3, #24]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	021a      	lsls	r2, r3, #8
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	619a      	str	r2, [r3, #24]
      break;
 8008cb4:	e082      	b.n	8008dbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fa3b 	bl	8009138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0208 	orr.w	r2, r2, #8
 8008cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0204 	bic.w	r2, r2, #4
 8008ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69d9      	ldr	r1, [r3, #28]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	61da      	str	r2, [r3, #28]
      break;
 8008cf4:	e062      	b.n	8008dbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 faa1 	bl	8009244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69da      	ldr	r2, [r3, #28]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69d9      	ldr	r1, [r3, #28]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	021a      	lsls	r2, r3, #8
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	61da      	str	r2, [r3, #28]
      break;
 8008d36:	e041      	b.n	8008dbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fae8 	bl	8009314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0208 	orr.w	r2, r2, #8
 8008d52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0204 	bic.w	r2, r2, #4
 8008d62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	691a      	ldr	r2, [r3, #16]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d76:	e021      	b.n	8008dbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fb2a 	bl	80093d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	021a      	lsls	r2, r3, #8
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008db8:	e000      	b.n	8008dbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008dba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop

08008dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a40      	ldr	r2, [pc, #256]	; (8008ee4 <TIM_Base_SetConfig+0x114>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d013      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d00f      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a3d      	ldr	r2, [pc, #244]	; (8008ee8 <TIM_Base_SetConfig+0x118>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a3c      	ldr	r2, [pc, #240]	; (8008eec <TIM_Base_SetConfig+0x11c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a3b      	ldr	r2, [pc, #236]	; (8008ef0 <TIM_Base_SetConfig+0x120>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a3a      	ldr	r2, [pc, #232]	; (8008ef4 <TIM_Base_SetConfig+0x124>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d108      	bne.n	8008e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2f      	ldr	r2, [pc, #188]	; (8008ee4 <TIM_Base_SetConfig+0x114>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d01f      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e30:	d01b      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a2c      	ldr	r2, [pc, #176]	; (8008ee8 <TIM_Base_SetConfig+0x118>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d017      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a2b      	ldr	r2, [pc, #172]	; (8008eec <TIM_Base_SetConfig+0x11c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d013      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a2a      	ldr	r2, [pc, #168]	; (8008ef0 <TIM_Base_SetConfig+0x120>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00f      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a29      	ldr	r2, [pc, #164]	; (8008ef4 <TIM_Base_SetConfig+0x124>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00b      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a28      	ldr	r2, [pc, #160]	; (8008ef8 <TIM_Base_SetConfig+0x128>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d007      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a27      	ldr	r2, [pc, #156]	; (8008efc <TIM_Base_SetConfig+0x12c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d003      	beq.n	8008e6a <TIM_Base_SetConfig+0x9a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a26      	ldr	r2, [pc, #152]	; (8008f00 <TIM_Base_SetConfig+0x130>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d108      	bne.n	8008e7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a10      	ldr	r2, [pc, #64]	; (8008ee4 <TIM_Base_SetConfig+0x114>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00f      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <TIM_Base_SetConfig+0x124>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00b      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a11      	ldr	r2, [pc, #68]	; (8008ef8 <TIM_Base_SetConfig+0x128>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d007      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a10      	ldr	r2, [pc, #64]	; (8008efc <TIM_Base_SetConfig+0x12c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a0f      	ldr	r2, [pc, #60]	; (8008f00 <TIM_Base_SetConfig+0x130>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d103      	bne.n	8008ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	615a      	str	r2, [r3, #20]
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800
 8008ef0:	40000c00 	.word	0x40000c00
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400
 8008f00:	40014800 	.word	0x40014800

08008f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4b37      	ldr	r3, [pc, #220]	; (800900c <TIM_OC1_SetConfig+0x108>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0303 	bic.w	r3, r3, #3
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f023 0302 	bic.w	r3, r3, #2
 8008f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a2d      	ldr	r2, [pc, #180]	; (8009010 <TIM_OC1_SetConfig+0x10c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00f      	beq.n	8008f80 <TIM_OC1_SetConfig+0x7c>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a2c      	ldr	r2, [pc, #176]	; (8009014 <TIM_OC1_SetConfig+0x110>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00b      	beq.n	8008f80 <TIM_OC1_SetConfig+0x7c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a2b      	ldr	r2, [pc, #172]	; (8009018 <TIM_OC1_SetConfig+0x114>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d007      	beq.n	8008f80 <TIM_OC1_SetConfig+0x7c>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a2a      	ldr	r2, [pc, #168]	; (800901c <TIM_OC1_SetConfig+0x118>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_OC1_SetConfig+0x7c>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a29      	ldr	r2, [pc, #164]	; (8009020 <TIM_OC1_SetConfig+0x11c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d10c      	bne.n	8008f9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f023 0308 	bic.w	r3, r3, #8
 8008f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f023 0304 	bic.w	r3, r3, #4
 8008f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <TIM_OC1_SetConfig+0x10c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00f      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xbe>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a1b      	ldr	r2, [pc, #108]	; (8009014 <TIM_OC1_SetConfig+0x110>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00b      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xbe>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a1a      	ldr	r2, [pc, #104]	; (8009018 <TIM_OC1_SetConfig+0x114>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d007      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xbe>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a19      	ldr	r2, [pc, #100]	; (800901c <TIM_OC1_SetConfig+0x118>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d003      	beq.n	8008fc2 <TIM_OC1_SetConfig+0xbe>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a18      	ldr	r2, [pc, #96]	; (8009020 <TIM_OC1_SetConfig+0x11c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d111      	bne.n	8008fe6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	fffeff8f 	.word	0xfffeff8f
 8009010:	40010000 	.word	0x40010000
 8009014:	40010400 	.word	0x40010400
 8009018:	40014000 	.word	0x40014000
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800

08009024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f023 0210 	bic.w	r2, r3, #16
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4b34      	ldr	r3, [pc, #208]	; (8009120 <TIM_OC2_SetConfig+0xfc>)
 8009050:	4013      	ands	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800905a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f023 0320 	bic.w	r3, r3, #32
 800906e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a29      	ldr	r2, [pc, #164]	; (8009124 <TIM_OC2_SetConfig+0x100>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_OC2_SetConfig+0x68>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a28      	ldr	r2, [pc, #160]	; (8009128 <TIM_OC2_SetConfig+0x104>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d10d      	bne.n	80090a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a1e      	ldr	r2, [pc, #120]	; (8009124 <TIM_OC2_SetConfig+0x100>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d00f      	beq.n	80090d0 <TIM_OC2_SetConfig+0xac>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a1d      	ldr	r2, [pc, #116]	; (8009128 <TIM_OC2_SetConfig+0x104>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00b      	beq.n	80090d0 <TIM_OC2_SetConfig+0xac>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a1c      	ldr	r2, [pc, #112]	; (800912c <TIM_OC2_SetConfig+0x108>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_OC2_SetConfig+0xac>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <TIM_OC2_SetConfig+0x10c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_OC2_SetConfig+0xac>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a1a      	ldr	r2, [pc, #104]	; (8009134 <TIM_OC2_SetConfig+0x110>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d113      	bne.n	80090f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	621a      	str	r2, [r3, #32]
}
 8009112:	bf00      	nop
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	feff8fff 	.word	0xfeff8fff
 8009124:	40010000 	.word	0x40010000
 8009128:	40010400 	.word	0x40010400
 800912c:	40014000 	.word	0x40014000
 8009130:	40014400 	.word	0x40014400
 8009134:	40014800 	.word	0x40014800

08009138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a27      	ldr	r2, [pc, #156]	; (8009230 <TIM_OC3_SetConfig+0xf8>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d003      	beq.n	800919e <TIM_OC3_SetConfig+0x66>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a26      	ldr	r2, [pc, #152]	; (8009234 <TIM_OC3_SetConfig+0xfc>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d10d      	bne.n	80091ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	021b      	lsls	r3, r3, #8
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a1c      	ldr	r2, [pc, #112]	; (8009230 <TIM_OC3_SetConfig+0xf8>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <TIM_OC3_SetConfig+0xaa>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a1b      	ldr	r2, [pc, #108]	; (8009234 <TIM_OC3_SetConfig+0xfc>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00b      	beq.n	80091e2 <TIM_OC3_SetConfig+0xaa>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a1a      	ldr	r2, [pc, #104]	; (8009238 <TIM_OC3_SetConfig+0x100>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <TIM_OC3_SetConfig+0xaa>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a19      	ldr	r2, [pc, #100]	; (800923c <TIM_OC3_SetConfig+0x104>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_OC3_SetConfig+0xaa>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a18      	ldr	r2, [pc, #96]	; (8009240 <TIM_OC3_SetConfig+0x108>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d113      	bne.n	800920a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	621a      	str	r2, [r3, #32]
}
 8009224:	bf00      	nop
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	40010000 	.word	0x40010000
 8009234:	40010400 	.word	0x40010400
 8009238:	40014000 	.word	0x40014000
 800923c:	40014400 	.word	0x40014400
 8009240:	40014800 	.word	0x40014800

08009244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	021b      	lsls	r3, r3, #8
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	4313      	orrs	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800928e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	031b      	lsls	r3, r3, #12
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a18      	ldr	r2, [pc, #96]	; (8009300 <TIM_OC4_SetConfig+0xbc>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00f      	beq.n	80092c4 <TIM_OC4_SetConfig+0x80>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a17      	ldr	r2, [pc, #92]	; (8009304 <TIM_OC4_SetConfig+0xc0>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00b      	beq.n	80092c4 <TIM_OC4_SetConfig+0x80>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a16      	ldr	r2, [pc, #88]	; (8009308 <TIM_OC4_SetConfig+0xc4>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d007      	beq.n	80092c4 <TIM_OC4_SetConfig+0x80>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a15      	ldr	r2, [pc, #84]	; (800930c <TIM_OC4_SetConfig+0xc8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d003      	beq.n	80092c4 <TIM_OC4_SetConfig+0x80>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a14      	ldr	r2, [pc, #80]	; (8009310 <TIM_OC4_SetConfig+0xcc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d109      	bne.n	80092d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	019b      	lsls	r3, r3, #6
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	621a      	str	r2, [r3, #32]
}
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	40010000 	.word	0x40010000
 8009304:	40010400 	.word	0x40010400
 8009308:	40014000 	.word	0x40014000
 800930c:	40014400 	.word	0x40014400
 8009310:	40014800 	.word	0x40014800

08009314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4313      	orrs	r3, r2
 8009360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a17      	ldr	r2, [pc, #92]	; (80093c4 <TIM_OC5_SetConfig+0xb0>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00f      	beq.n	800938a <TIM_OC5_SetConfig+0x76>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a16      	ldr	r2, [pc, #88]	; (80093c8 <TIM_OC5_SetConfig+0xb4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d00b      	beq.n	800938a <TIM_OC5_SetConfig+0x76>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a15      	ldr	r2, [pc, #84]	; (80093cc <TIM_OC5_SetConfig+0xb8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d007      	beq.n	800938a <TIM_OC5_SetConfig+0x76>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a14      	ldr	r2, [pc, #80]	; (80093d0 <TIM_OC5_SetConfig+0xbc>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d003      	beq.n	800938a <TIM_OC5_SetConfig+0x76>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <TIM_OC5_SetConfig+0xc0>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d109      	bne.n	800939e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	4313      	orrs	r3, r2
 800939c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	621a      	str	r2, [r3, #32]
}
 80093b8:	bf00      	nop
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40010400 	.word	0x40010400
 80093cc:	40014000 	.word	0x40014000
 80093d0:	40014400 	.word	0x40014400
 80093d4:	40014800 	.word	0x40014800

080093d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800941a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	051b      	lsls	r3, r3, #20
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4313      	orrs	r3, r2
 8009426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a18      	ldr	r2, [pc, #96]	; (800948c <TIM_OC6_SetConfig+0xb4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00f      	beq.n	8009450 <TIM_OC6_SetConfig+0x78>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a17      	ldr	r2, [pc, #92]	; (8009490 <TIM_OC6_SetConfig+0xb8>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00b      	beq.n	8009450 <TIM_OC6_SetConfig+0x78>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a16      	ldr	r2, [pc, #88]	; (8009494 <TIM_OC6_SetConfig+0xbc>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_OC6_SetConfig+0x78>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a15      	ldr	r2, [pc, #84]	; (8009498 <TIM_OC6_SetConfig+0xc0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_OC6_SetConfig+0x78>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a14      	ldr	r2, [pc, #80]	; (800949c <TIM_OC6_SetConfig+0xc4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d109      	bne.n	8009464 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	029b      	lsls	r3, r3, #10
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	621a      	str	r2, [r3, #32]
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	40010000 	.word	0x40010000
 8009490:	40010400 	.word	0x40010400
 8009494:	40014000 	.word	0x40014000
 8009498:	40014400 	.word	0x40014400
 800949c:	40014800 	.word	0x40014800

080094a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e068      	b.n	800958a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a2e      	ldr	r2, [pc, #184]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d004      	beq.n	80094ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a2d      	ldr	r2, [pc, #180]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d108      	bne.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d01d      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952a:	d018      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1b      	ldr	r2, [pc, #108]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d013      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a1a      	ldr	r2, [pc, #104]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00e      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a18      	ldr	r2, [pc, #96]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a13      	ldr	r2, [pc, #76]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a14      	ldr	r2, [pc, #80]	; (80095ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d10c      	bne.n	8009578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	4313      	orrs	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40010000 	.word	0x40010000
 800959c:	40010400 	.word	0x40010400
 80095a0:	40000400 	.word	0x40000400
 80095a4:	40000800 	.word	0x40000800
 80095a8:	40000c00 	.word	0x40000c00
 80095ac:	40001800 	.word	0x40001800

080095b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e065      	b.n	8009698 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4313      	orrs	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a16      	ldr	r2, [pc, #88]	; (80096a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d004      	beq.n	800965a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a14      	ldr	r2, [pc, #80]	; (80096a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d115      	bne.n	8009686 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	051b      	lsls	r3, r3, #20
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40010400 	.word	0x40010400

080096ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e042      	b.n	8009744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7f8 fc5b 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2224      	movs	r2, #36	; 0x24
 80096da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0201 	bic.w	r2, r2, #1
 80096ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f82c 	bl	800974c <UART_SetConfig>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e022      	b.n	8009744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fd80 	bl	800a20c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800971a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689a      	ldr	r2, [r3, #8]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800972a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f042 0201 	orr.w	r2, r2, #1
 800973a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fe07 	bl	800a350 <UART_CheckIdleState>
 8009742:	4603      	mov	r3, r0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800974c:	b5b0      	push	{r4, r5, r7, lr}
 800974e:	b08e      	sub	sp, #56	; 0x38
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	431a      	orrs	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	431a      	orrs	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	4313      	orrs	r3, r2
 8009770:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	4bbf      	ldr	r3, [pc, #764]	; (8009a78 <UART_SetConfig+0x32c>)
 800977a:	4013      	ands	r3, r2
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6812      	ldr	r2, [r2, #0]
 8009780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009782:	430b      	orrs	r3, r1
 8009784:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4ab5      	ldr	r2, [pc, #724]	; (8009a7c <UART_SetConfig+0x330>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d004      	beq.n	80097b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097b2:	4313      	orrs	r3, r2
 80097b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	4bb0      	ldr	r3, [pc, #704]	; (8009a80 <UART_SetConfig+0x334>)
 80097be:	4013      	ands	r3, r2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097c6:	430b      	orrs	r3, r1
 80097c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	f023 010f 	bic.w	r1, r3, #15
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4aa7      	ldr	r2, [pc, #668]	; (8009a84 <UART_SetConfig+0x338>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d176      	bne.n	80098d8 <UART_SetConfig+0x18c>
 80097ea:	4ba7      	ldr	r3, [pc, #668]	; (8009a88 <UART_SetConfig+0x33c>)
 80097ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097f2:	2b28      	cmp	r3, #40	; 0x28
 80097f4:	d86c      	bhi.n	80098d0 <UART_SetConfig+0x184>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <UART_SetConfig+0xb0>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	080098a1 	.word	0x080098a1
 8009800:	080098d1 	.word	0x080098d1
 8009804:	080098d1 	.word	0x080098d1
 8009808:	080098d1 	.word	0x080098d1
 800980c:	080098d1 	.word	0x080098d1
 8009810:	080098d1 	.word	0x080098d1
 8009814:	080098d1 	.word	0x080098d1
 8009818:	080098d1 	.word	0x080098d1
 800981c:	080098a9 	.word	0x080098a9
 8009820:	080098d1 	.word	0x080098d1
 8009824:	080098d1 	.word	0x080098d1
 8009828:	080098d1 	.word	0x080098d1
 800982c:	080098d1 	.word	0x080098d1
 8009830:	080098d1 	.word	0x080098d1
 8009834:	080098d1 	.word	0x080098d1
 8009838:	080098d1 	.word	0x080098d1
 800983c:	080098b1 	.word	0x080098b1
 8009840:	080098d1 	.word	0x080098d1
 8009844:	080098d1 	.word	0x080098d1
 8009848:	080098d1 	.word	0x080098d1
 800984c:	080098d1 	.word	0x080098d1
 8009850:	080098d1 	.word	0x080098d1
 8009854:	080098d1 	.word	0x080098d1
 8009858:	080098d1 	.word	0x080098d1
 800985c:	080098b9 	.word	0x080098b9
 8009860:	080098d1 	.word	0x080098d1
 8009864:	080098d1 	.word	0x080098d1
 8009868:	080098d1 	.word	0x080098d1
 800986c:	080098d1 	.word	0x080098d1
 8009870:	080098d1 	.word	0x080098d1
 8009874:	080098d1 	.word	0x080098d1
 8009878:	080098d1 	.word	0x080098d1
 800987c:	080098c1 	.word	0x080098c1
 8009880:	080098d1 	.word	0x080098d1
 8009884:	080098d1 	.word	0x080098d1
 8009888:	080098d1 	.word	0x080098d1
 800988c:	080098d1 	.word	0x080098d1
 8009890:	080098d1 	.word	0x080098d1
 8009894:	080098d1 	.word	0x080098d1
 8009898:	080098d1 	.word	0x080098d1
 800989c:	080098c9 	.word	0x080098c9
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a6:	e222      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098a8:	2304      	movs	r3, #4
 80098aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ae:	e21e      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098b0:	2308      	movs	r3, #8
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e21a      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098b8:	2310      	movs	r3, #16
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e216      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098c0:	2320      	movs	r3, #32
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e212      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098c8:	2340      	movs	r3, #64	; 0x40
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e20e      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098d0:	2380      	movs	r3, #128	; 0x80
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e20a      	b.n	8009cee <UART_SetConfig+0x5a2>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a6b      	ldr	r2, [pc, #428]	; (8009a8c <UART_SetConfig+0x340>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d130      	bne.n	8009944 <UART_SetConfig+0x1f8>
 80098e2:	4b69      	ldr	r3, [pc, #420]	; (8009a88 <UART_SetConfig+0x33c>)
 80098e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	2b05      	cmp	r3, #5
 80098ec:	d826      	bhi.n	800993c <UART_SetConfig+0x1f0>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <UART_SetConfig+0x1a8>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	0800990d 	.word	0x0800990d
 80098f8:	08009915 	.word	0x08009915
 80098fc:	0800991d 	.word	0x0800991d
 8009900:	08009925 	.word	0x08009925
 8009904:	0800992d 	.word	0x0800992d
 8009908:	08009935 	.word	0x08009935
 800990c:	2300      	movs	r3, #0
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e1ec      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009914:	2304      	movs	r3, #4
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e1e8      	b.n	8009cee <UART_SetConfig+0x5a2>
 800991c:	2308      	movs	r3, #8
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e1e4      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009924:	2310      	movs	r3, #16
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e1e0      	b.n	8009cee <UART_SetConfig+0x5a2>
 800992c:	2320      	movs	r3, #32
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e1dc      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009934:	2340      	movs	r3, #64	; 0x40
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e1d8      	b.n	8009cee <UART_SetConfig+0x5a2>
 800993c:	2380      	movs	r3, #128	; 0x80
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e1d4      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a51      	ldr	r2, [pc, #324]	; (8009a90 <UART_SetConfig+0x344>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d130      	bne.n	80099b0 <UART_SetConfig+0x264>
 800994e:	4b4e      	ldr	r3, [pc, #312]	; (8009a88 <UART_SetConfig+0x33c>)
 8009950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b05      	cmp	r3, #5
 8009958:	d826      	bhi.n	80099a8 <UART_SetConfig+0x25c>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <UART_SetConfig+0x214>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009979 	.word	0x08009979
 8009964:	08009981 	.word	0x08009981
 8009968:	08009989 	.word	0x08009989
 800996c:	08009991 	.word	0x08009991
 8009970:	08009999 	.word	0x08009999
 8009974:	080099a1 	.word	0x080099a1
 8009978:	2300      	movs	r3, #0
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e1b6      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009980:	2304      	movs	r3, #4
 8009982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009986:	e1b2      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009988:	2308      	movs	r3, #8
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e1ae      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009990:	2310      	movs	r3, #16
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e1aa      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009998:	2320      	movs	r3, #32
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e1a6      	b.n	8009cee <UART_SetConfig+0x5a2>
 80099a0:	2340      	movs	r3, #64	; 0x40
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e1a2      	b.n	8009cee <UART_SetConfig+0x5a2>
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e19e      	b.n	8009cee <UART_SetConfig+0x5a2>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a37      	ldr	r2, [pc, #220]	; (8009a94 <UART_SetConfig+0x348>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d130      	bne.n	8009a1c <UART_SetConfig+0x2d0>
 80099ba:	4b33      	ldr	r3, [pc, #204]	; (8009a88 <UART_SetConfig+0x33c>)
 80099bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099be:	f003 0307 	and.w	r3, r3, #7
 80099c2:	2b05      	cmp	r3, #5
 80099c4:	d826      	bhi.n	8009a14 <UART_SetConfig+0x2c8>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x280>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	080099e5 	.word	0x080099e5
 80099d0:	080099ed 	.word	0x080099ed
 80099d4:	080099f5 	.word	0x080099f5
 80099d8:	080099fd 	.word	0x080099fd
 80099dc:	08009a05 	.word	0x08009a05
 80099e0:	08009a0d 	.word	0x08009a0d
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e180      	b.n	8009cee <UART_SetConfig+0x5a2>
 80099ec:	2304      	movs	r3, #4
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e17c      	b.n	8009cee <UART_SetConfig+0x5a2>
 80099f4:	2308      	movs	r3, #8
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e178      	b.n	8009cee <UART_SetConfig+0x5a2>
 80099fc:	2310      	movs	r3, #16
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e174      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a04:	2320      	movs	r3, #32
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e170      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a0c:	2340      	movs	r3, #64	; 0x40
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e16c      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a14:	2380      	movs	r3, #128	; 0x80
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e168      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1d      	ldr	r2, [pc, #116]	; (8009a98 <UART_SetConfig+0x34c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d142      	bne.n	8009aac <UART_SetConfig+0x360>
 8009a26:	4b18      	ldr	r3, [pc, #96]	; (8009a88 <UART_SetConfig+0x33c>)
 8009a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	2b05      	cmp	r3, #5
 8009a30:	d838      	bhi.n	8009aa4 <UART_SetConfig+0x358>
 8009a32:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <UART_SetConfig+0x2ec>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a51 	.word	0x08009a51
 8009a3c:	08009a59 	.word	0x08009a59
 8009a40:	08009a61 	.word	0x08009a61
 8009a44:	08009a69 	.word	0x08009a69
 8009a48:	08009a71 	.word	0x08009a71
 8009a4c:	08009a9d 	.word	0x08009a9d
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a56:	e14a      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a58:	2304      	movs	r3, #4
 8009a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5e:	e146      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a60:	2308      	movs	r3, #8
 8009a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a66:	e142      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e13e      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a70:	2320      	movs	r3, #32
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e13a      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009a78:	cfff69f3 	.word	0xcfff69f3
 8009a7c:	58000c00 	.word	0x58000c00
 8009a80:	11fff4ff 	.word	0x11fff4ff
 8009a84:	40011000 	.word	0x40011000
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	40004400 	.word	0x40004400
 8009a90:	40004800 	.word	0x40004800
 8009a94:	40004c00 	.word	0x40004c00
 8009a98:	40005000 	.word	0x40005000
 8009a9c:	2340      	movs	r3, #64	; 0x40
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e124      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009aa4:	2380      	movs	r3, #128	; 0x80
 8009aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aaa:	e120      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4acc      	ldr	r2, [pc, #816]	; (8009de4 <UART_SetConfig+0x698>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d176      	bne.n	8009ba4 <UART_SetConfig+0x458>
 8009ab6:	4bcc      	ldr	r3, [pc, #816]	; (8009de8 <UART_SetConfig+0x69c>)
 8009ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009abe:	2b28      	cmp	r3, #40	; 0x28
 8009ac0:	d86c      	bhi.n	8009b9c <UART_SetConfig+0x450>
 8009ac2:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <UART_SetConfig+0x37c>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009b6d 	.word	0x08009b6d
 8009acc:	08009b9d 	.word	0x08009b9d
 8009ad0:	08009b9d 	.word	0x08009b9d
 8009ad4:	08009b9d 	.word	0x08009b9d
 8009ad8:	08009b9d 	.word	0x08009b9d
 8009adc:	08009b9d 	.word	0x08009b9d
 8009ae0:	08009b9d 	.word	0x08009b9d
 8009ae4:	08009b9d 	.word	0x08009b9d
 8009ae8:	08009b75 	.word	0x08009b75
 8009aec:	08009b9d 	.word	0x08009b9d
 8009af0:	08009b9d 	.word	0x08009b9d
 8009af4:	08009b9d 	.word	0x08009b9d
 8009af8:	08009b9d 	.word	0x08009b9d
 8009afc:	08009b9d 	.word	0x08009b9d
 8009b00:	08009b9d 	.word	0x08009b9d
 8009b04:	08009b9d 	.word	0x08009b9d
 8009b08:	08009b7d 	.word	0x08009b7d
 8009b0c:	08009b9d 	.word	0x08009b9d
 8009b10:	08009b9d 	.word	0x08009b9d
 8009b14:	08009b9d 	.word	0x08009b9d
 8009b18:	08009b9d 	.word	0x08009b9d
 8009b1c:	08009b9d 	.word	0x08009b9d
 8009b20:	08009b9d 	.word	0x08009b9d
 8009b24:	08009b9d 	.word	0x08009b9d
 8009b28:	08009b85 	.word	0x08009b85
 8009b2c:	08009b9d 	.word	0x08009b9d
 8009b30:	08009b9d 	.word	0x08009b9d
 8009b34:	08009b9d 	.word	0x08009b9d
 8009b38:	08009b9d 	.word	0x08009b9d
 8009b3c:	08009b9d 	.word	0x08009b9d
 8009b40:	08009b9d 	.word	0x08009b9d
 8009b44:	08009b9d 	.word	0x08009b9d
 8009b48:	08009b8d 	.word	0x08009b8d
 8009b4c:	08009b9d 	.word	0x08009b9d
 8009b50:	08009b9d 	.word	0x08009b9d
 8009b54:	08009b9d 	.word	0x08009b9d
 8009b58:	08009b9d 	.word	0x08009b9d
 8009b5c:	08009b9d 	.word	0x08009b9d
 8009b60:	08009b9d 	.word	0x08009b9d
 8009b64:	08009b9d 	.word	0x08009b9d
 8009b68:	08009b95 	.word	0x08009b95
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e0bc      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009b74:	2304      	movs	r3, #4
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e0b8      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009b7c:	2308      	movs	r3, #8
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e0b4      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009b84:	2310      	movs	r3, #16
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e0b0      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009b8c:	2320      	movs	r3, #32
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	e0ac      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009b94:	2340      	movs	r3, #64	; 0x40
 8009b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9a:	e0a8      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009b9c:	2380      	movs	r3, #128	; 0x80
 8009b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba2:	e0a4      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a90      	ldr	r2, [pc, #576]	; (8009dec <UART_SetConfig+0x6a0>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d130      	bne.n	8009c10 <UART_SetConfig+0x4c4>
 8009bae:	4b8e      	ldr	r3, [pc, #568]	; (8009de8 <UART_SetConfig+0x69c>)
 8009bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb2:	f003 0307 	and.w	r3, r3, #7
 8009bb6:	2b05      	cmp	r3, #5
 8009bb8:	d826      	bhi.n	8009c08 <UART_SetConfig+0x4bc>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <UART_SetConfig+0x474>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009bd9 	.word	0x08009bd9
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	08009be9 	.word	0x08009be9
 8009bcc:	08009bf1 	.word	0x08009bf1
 8009bd0:	08009bf9 	.word	0x08009bf9
 8009bd4:	08009c01 	.word	0x08009c01
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e086      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009be0:	2304      	movs	r3, #4
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be6:	e082      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009be8:	2308      	movs	r3, #8
 8009bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bee:	e07e      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf6:	e07a      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009bf8:	2320      	movs	r3, #32
 8009bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfe:	e076      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c00:	2340      	movs	r3, #64	; 0x40
 8009c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c06:	e072      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c08:	2380      	movs	r3, #128	; 0x80
 8009c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0e:	e06e      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a76      	ldr	r2, [pc, #472]	; (8009df0 <UART_SetConfig+0x6a4>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d130      	bne.n	8009c7c <UART_SetConfig+0x530>
 8009c1a:	4b73      	ldr	r3, [pc, #460]	; (8009de8 <UART_SetConfig+0x69c>)
 8009c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	2b05      	cmp	r3, #5
 8009c24:	d826      	bhi.n	8009c74 <UART_SetConfig+0x528>
 8009c26:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <UART_SetConfig+0x4e0>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c45 	.word	0x08009c45
 8009c30:	08009c4d 	.word	0x08009c4d
 8009c34:	08009c55 	.word	0x08009c55
 8009c38:	08009c5d 	.word	0x08009c5d
 8009c3c:	08009c65 	.word	0x08009c65
 8009c40:	08009c6d 	.word	0x08009c6d
 8009c44:	2300      	movs	r3, #0
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e050      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c4c:	2304      	movs	r3, #4
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e04c      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c54:	2308      	movs	r3, #8
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e048      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e044      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c64:	2320      	movs	r3, #32
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e040      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c6c:	2340      	movs	r3, #64	; 0x40
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e03c      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7a:	e038      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a5c      	ldr	r2, [pc, #368]	; (8009df4 <UART_SetConfig+0x6a8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d130      	bne.n	8009ce8 <UART_SetConfig+0x59c>
 8009c86:	4b58      	ldr	r3, [pc, #352]	; (8009de8 <UART_SetConfig+0x69c>)
 8009c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8a:	f003 0307 	and.w	r3, r3, #7
 8009c8e:	2b05      	cmp	r3, #5
 8009c90:	d826      	bhi.n	8009ce0 <UART_SetConfig+0x594>
 8009c92:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <UART_SetConfig+0x54c>)
 8009c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c98:	08009cb1 	.word	0x08009cb1
 8009c9c:	08009cb9 	.word	0x08009cb9
 8009ca0:	08009cc1 	.word	0x08009cc1
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cd1 	.word	0x08009cd1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e01a      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e016      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e012      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e00e      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e00a      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e006      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e002      	b.n	8009cee <UART_SetConfig+0x5a2>
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a40      	ldr	r2, [pc, #256]	; (8009df4 <UART_SetConfig+0x6a8>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	f040 80ef 	bne.w	8009ed8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cfe:	2b20      	cmp	r3, #32
 8009d00:	dc46      	bgt.n	8009d90 <UART_SetConfig+0x644>
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	f2c0 8081 	blt.w	8009e0a <UART_SetConfig+0x6be>
 8009d08:	3b02      	subs	r3, #2
 8009d0a:	2b1e      	cmp	r3, #30
 8009d0c:	d87d      	bhi.n	8009e0a <UART_SetConfig+0x6be>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0x5c8>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d97 	.word	0x08009d97
 8009d18:	08009e0b 	.word	0x08009e0b
 8009d1c:	08009d9f 	.word	0x08009d9f
 8009d20:	08009e0b 	.word	0x08009e0b
 8009d24:	08009e0b 	.word	0x08009e0b
 8009d28:	08009e0b 	.word	0x08009e0b
 8009d2c:	08009daf 	.word	0x08009daf
 8009d30:	08009e0b 	.word	0x08009e0b
 8009d34:	08009e0b 	.word	0x08009e0b
 8009d38:	08009e0b 	.word	0x08009e0b
 8009d3c:	08009e0b 	.word	0x08009e0b
 8009d40:	08009e0b 	.word	0x08009e0b
 8009d44:	08009e0b 	.word	0x08009e0b
 8009d48:	08009e0b 	.word	0x08009e0b
 8009d4c:	08009dbf 	.word	0x08009dbf
 8009d50:	08009e0b 	.word	0x08009e0b
 8009d54:	08009e0b 	.word	0x08009e0b
 8009d58:	08009e0b 	.word	0x08009e0b
 8009d5c:	08009e0b 	.word	0x08009e0b
 8009d60:	08009e0b 	.word	0x08009e0b
 8009d64:	08009e0b 	.word	0x08009e0b
 8009d68:	08009e0b 	.word	0x08009e0b
 8009d6c:	08009e0b 	.word	0x08009e0b
 8009d70:	08009e0b 	.word	0x08009e0b
 8009d74:	08009e0b 	.word	0x08009e0b
 8009d78:	08009e0b 	.word	0x08009e0b
 8009d7c:	08009e0b 	.word	0x08009e0b
 8009d80:	08009e0b 	.word	0x08009e0b
 8009d84:	08009e0b 	.word	0x08009e0b
 8009d88:	08009e0b 	.word	0x08009e0b
 8009d8c:	08009dfd 	.word	0x08009dfd
 8009d90:	2b40      	cmp	r3, #64	; 0x40
 8009d92:	d036      	beq.n	8009e02 <UART_SetConfig+0x6b6>
 8009d94:	e039      	b.n	8009e0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d96:	f7fd ff73 	bl	8007c80 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d9c:	e03b      	b.n	8009e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9e:	f107 0314 	add.w	r3, r7, #20
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fd ff82 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dac:	e033      	b.n	8009e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dae:	f107 0308 	add.w	r3, r7, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f8ce 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dbc:	e02b      	b.n	8009e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dbe:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <UART_SetConfig+0x69c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <UART_SetConfig+0x69c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	08db      	lsrs	r3, r3, #3
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <UART_SetConfig+0x6ac>)
 8009dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ddc:	e01b      	b.n	8009e16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <UART_SetConfig+0x6ac>)
 8009de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009de2:	e018      	b.n	8009e16 <UART_SetConfig+0x6ca>
 8009de4:	40011400 	.word	0x40011400
 8009de8:	58024400 	.word	0x58024400
 8009dec:	40007800 	.word	0x40007800
 8009df0:	40007c00 	.word	0x40007c00
 8009df4:	58000c00 	.word	0x58000c00
 8009df8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dfc:	4bc4      	ldr	r3, [pc, #784]	; (800a110 <UART_SetConfig+0x9c4>)
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e00:	e009      	b.n	8009e16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e08:	e005      	b.n	8009e16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 81da 	beq.w	800a1d2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	4abc      	ldr	r2, [pc, #752]	; (800a114 <UART_SetConfig+0x9c8>)
 8009e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	4413      	add	r3, r2
 8009e3c:	6a3a      	ldr	r2, [r7, #32]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d305      	bcc.n	8009e4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e48:	6a3a      	ldr	r2, [r7, #32]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d903      	bls.n	8009e56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e54:	e1bd      	b.n	800a1d2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f04f 0100 	mov.w	r1, #0
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	4aac      	ldr	r2, [pc, #688]	; (800a114 <UART_SetConfig+0x9c8>)
 8009e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	f04f 0300 	mov.w	r3, #0
 8009e6e:	f7f6 fa33 	bl	80002d8 <__aeabi_uldivmod>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4610      	mov	r0, r2
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f04f 0200 	mov.w	r2, #0
 8009e7e:	f04f 0300 	mov.w	r3, #0
 8009e82:	020b      	lsls	r3, r1, #8
 8009e84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e88:	0202      	lsls	r2, r0, #8
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	6849      	ldr	r1, [r1, #4]
 8009e8e:	0849      	lsrs	r1, r1, #1
 8009e90:	4608      	mov	r0, r1
 8009e92:	f04f 0100 	mov.w	r1, #0
 8009e96:	1814      	adds	r4, r2, r0
 8009e98:	eb43 0501 	adc.w	r5, r3, r1
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	f7f6 fa15 	bl	80002d8 <__aeabi_uldivmod>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ebc:	d308      	bcc.n	8009ed0 <UART_SetConfig+0x784>
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ec4:	d204      	bcs.n	8009ed0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ecc:	60da      	str	r2, [r3, #12]
 8009ece:	e180      	b.n	800a1d2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ed6:	e17c      	b.n	800a1d2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ee0:	f040 80bf 	bne.w	800a062 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ee8:	2b20      	cmp	r3, #32
 8009eea:	dc49      	bgt.n	8009f80 <UART_SetConfig+0x834>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	db7c      	blt.n	8009fea <UART_SetConfig+0x89e>
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d87a      	bhi.n	8009fea <UART_SetConfig+0x89e>
 8009ef4:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <UART_SetConfig+0x7b0>)
 8009ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efa:	bf00      	nop
 8009efc:	08009f87 	.word	0x08009f87
 8009f00:	08009f8f 	.word	0x08009f8f
 8009f04:	08009feb 	.word	0x08009feb
 8009f08:	08009feb 	.word	0x08009feb
 8009f0c:	08009f97 	.word	0x08009f97
 8009f10:	08009feb 	.word	0x08009feb
 8009f14:	08009feb 	.word	0x08009feb
 8009f18:	08009feb 	.word	0x08009feb
 8009f1c:	08009fa7 	.word	0x08009fa7
 8009f20:	08009feb 	.word	0x08009feb
 8009f24:	08009feb 	.word	0x08009feb
 8009f28:	08009feb 	.word	0x08009feb
 8009f2c:	08009feb 	.word	0x08009feb
 8009f30:	08009feb 	.word	0x08009feb
 8009f34:	08009feb 	.word	0x08009feb
 8009f38:	08009feb 	.word	0x08009feb
 8009f3c:	08009fb7 	.word	0x08009fb7
 8009f40:	08009feb 	.word	0x08009feb
 8009f44:	08009feb 	.word	0x08009feb
 8009f48:	08009feb 	.word	0x08009feb
 8009f4c:	08009feb 	.word	0x08009feb
 8009f50:	08009feb 	.word	0x08009feb
 8009f54:	08009feb 	.word	0x08009feb
 8009f58:	08009feb 	.word	0x08009feb
 8009f5c:	08009feb 	.word	0x08009feb
 8009f60:	08009feb 	.word	0x08009feb
 8009f64:	08009feb 	.word	0x08009feb
 8009f68:	08009feb 	.word	0x08009feb
 8009f6c:	08009feb 	.word	0x08009feb
 8009f70:	08009feb 	.word	0x08009feb
 8009f74:	08009feb 	.word	0x08009feb
 8009f78:	08009feb 	.word	0x08009feb
 8009f7c:	08009fdd 	.word	0x08009fdd
 8009f80:	2b40      	cmp	r3, #64	; 0x40
 8009f82:	d02e      	beq.n	8009fe2 <UART_SetConfig+0x896>
 8009f84:	e031      	b.n	8009fea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f86:	f7fc fa3d 	bl	8006404 <HAL_RCC_GetPCLK1Freq>
 8009f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f8c:	e033      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f8e:	f7fc fa4f 	bl	8006430 <HAL_RCC_GetPCLK2Freq>
 8009f92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f94:	e02f      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f96:	f107 0314 	add.w	r3, r7, #20
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fd fe86 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fa4:	e027      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fd ffd2 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fb4:	e01f      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fb6:	4b58      	ldr	r3, [pc, #352]	; (800a118 <UART_SetConfig+0x9cc>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fc2:	4b55      	ldr	r3, [pc, #340]	; (800a118 <UART_SetConfig+0x9cc>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	08db      	lsrs	r3, r3, #3
 8009fc8:	f003 0303 	and.w	r3, r3, #3
 8009fcc:	4a53      	ldr	r2, [pc, #332]	; (800a11c <UART_SetConfig+0x9d0>)
 8009fce:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fd4:	e00f      	b.n	8009ff6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009fd6:	4b51      	ldr	r3, [pc, #324]	; (800a11c <UART_SetConfig+0x9d0>)
 8009fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fda:	e00c      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fdc:	4b4c      	ldr	r3, [pc, #304]	; (800a110 <UART_SetConfig+0x9c4>)
 8009fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fe0:	e009      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fe8:	e005      	b.n	8009ff6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 80ea 	beq.w	800a1d2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	4a44      	ldr	r2, [pc, #272]	; (800a114 <UART_SetConfig+0x9c8>)
 800a004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a008:	461a      	mov	r2, r3
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a010:	005a      	lsls	r2, r3, #1
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	085b      	lsrs	r3, r3, #1
 800a018:	441a      	add	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	2b0f      	cmp	r3, #15
 800a02a:	d916      	bls.n	800a05a <UART_SetConfig+0x90e>
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a032:	d212      	bcs.n	800a05a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	b29b      	uxth	r3, r3
 800a038:	f023 030f 	bic.w	r3, r3, #15
 800a03c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	085b      	lsrs	r3, r3, #1
 800a042:	b29b      	uxth	r3, r3
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	b29a      	uxth	r2, r3
 800a04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a04c:	4313      	orrs	r3, r2
 800a04e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a056:	60da      	str	r2, [r3, #12]
 800a058:	e0bb      	b.n	800a1d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a060:	e0b7      	b.n	800a1d2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a066:	2b20      	cmp	r3, #32
 800a068:	dc4a      	bgt.n	800a100 <UART_SetConfig+0x9b4>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f2c0 8086 	blt.w	800a17c <UART_SetConfig+0xa30>
 800a070:	2b20      	cmp	r3, #32
 800a072:	f200 8083 	bhi.w	800a17c <UART_SetConfig+0xa30>
 800a076:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <UART_SetConfig+0x930>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a107 	.word	0x0800a107
 800a080:	0800a121 	.word	0x0800a121
 800a084:	0800a17d 	.word	0x0800a17d
 800a088:	0800a17d 	.word	0x0800a17d
 800a08c:	0800a129 	.word	0x0800a129
 800a090:	0800a17d 	.word	0x0800a17d
 800a094:	0800a17d 	.word	0x0800a17d
 800a098:	0800a17d 	.word	0x0800a17d
 800a09c:	0800a139 	.word	0x0800a139
 800a0a0:	0800a17d 	.word	0x0800a17d
 800a0a4:	0800a17d 	.word	0x0800a17d
 800a0a8:	0800a17d 	.word	0x0800a17d
 800a0ac:	0800a17d 	.word	0x0800a17d
 800a0b0:	0800a17d 	.word	0x0800a17d
 800a0b4:	0800a17d 	.word	0x0800a17d
 800a0b8:	0800a17d 	.word	0x0800a17d
 800a0bc:	0800a149 	.word	0x0800a149
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a17d 	.word	0x0800a17d
 800a0c8:	0800a17d 	.word	0x0800a17d
 800a0cc:	0800a17d 	.word	0x0800a17d
 800a0d0:	0800a17d 	.word	0x0800a17d
 800a0d4:	0800a17d 	.word	0x0800a17d
 800a0d8:	0800a17d 	.word	0x0800a17d
 800a0dc:	0800a17d 	.word	0x0800a17d
 800a0e0:	0800a17d 	.word	0x0800a17d
 800a0e4:	0800a17d 	.word	0x0800a17d
 800a0e8:	0800a17d 	.word	0x0800a17d
 800a0ec:	0800a17d 	.word	0x0800a17d
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a17d 	.word	0x0800a17d
 800a0f8:	0800a17d 	.word	0x0800a17d
 800a0fc:	0800a16f 	.word	0x0800a16f
 800a100:	2b40      	cmp	r3, #64	; 0x40
 800a102:	d037      	beq.n	800a174 <UART_SetConfig+0xa28>
 800a104:	e03a      	b.n	800a17c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a106:	f7fc f97d 	bl	8006404 <HAL_RCC_GetPCLK1Freq>
 800a10a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a10c:	e03c      	b.n	800a188 <UART_SetConfig+0xa3c>
 800a10e:	bf00      	nop
 800a110:	003d0900 	.word	0x003d0900
 800a114:	0800ad50 	.word	0x0800ad50
 800a118:	58024400 	.word	0x58024400
 800a11c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a120:	f7fc f986 	bl	8006430 <HAL_RCC_GetPCLK2Freq>
 800a124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a126:	e02f      	b.n	800a188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd fdbd 	bl	8007cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a136:	e027      	b.n	800a188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fd ff09 	bl	8007f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a146:	e01f      	b.n	800a188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a148:	4b2c      	ldr	r3, [pc, #176]	; (800a1fc <UART_SetConfig+0xab0>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a154:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <UART_SetConfig+0xab0>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	08db      	lsrs	r3, r3, #3
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	4a28      	ldr	r2, [pc, #160]	; (800a200 <UART_SetConfig+0xab4>)
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a166:	e00f      	b.n	800a188 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a168:	4b25      	ldr	r3, [pc, #148]	; (800a200 <UART_SetConfig+0xab4>)
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a16c:	e00c      	b.n	800a188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a16e:	4b25      	ldr	r3, [pc, #148]	; (800a204 <UART_SetConfig+0xab8>)
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a172:	e009      	b.n	800a188 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a17a:	e005      	b.n	800a188 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a186:	bf00      	nop
    }

    if (pclk != 0U)
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d021      	beq.n	800a1d2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <UART_SetConfig+0xabc>)
 800a194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a198:	461a      	mov	r2, r3
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	085b      	lsrs	r3, r3, #1
 800a1a6:	441a      	add	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d908      	bls.n	800a1cc <UART_SetConfig+0xa80>
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c0:	d204      	bcs.n	800a1cc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c8:	60da      	str	r2, [r3, #12]
 800a1ca:	e002      	b.n	800a1d2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a1ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3738      	adds	r7, #56	; 0x38
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	58024400 	.word	0x58024400
 800a200:	03d09000 	.word	0x03d09000
 800a204:	003d0900 	.word	0x003d0900
 800a208:	0800ad50 	.word	0x0800ad50

0800a20c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00a      	beq.n	800a27a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00a      	beq.n	800a2be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01a      	beq.n	800a322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30a:	d10a      	bne.n	800a322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	605a      	str	r2, [r3, #4]
  }
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af02      	add	r7, sp, #8
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a360:	f7f8 f934 	bl	80025cc <HAL_GetTick>
 800a364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b08      	cmp	r3, #8
 800a372:	d10e      	bne.n	800a392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f82f 	bl	800a3e6 <UART_WaitOnFlagUntilTimeout>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e025      	b.n	800a3de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d10e      	bne.n	800a3be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f819 	bl	800a3e6 <UART_WaitOnFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e00f      	b.n	800a3de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f6:	e062      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fe:	d05e      	beq.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a400:	f7f8 f8e4 	bl	80025cc <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d302      	bcc.n	800a416 <UART_WaitOnFlagUntilTimeout+0x30>
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d11d      	bne.n	800a452 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a424:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f022 0201 	bic.w	r2, r2, #1
 800a434:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2220      	movs	r2, #32
 800a43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2220      	movs	r2, #32
 800a442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e045      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 0304 	and.w	r3, r3, #4
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d02e      	beq.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a46e:	d126      	bne.n	800a4be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a488:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 0201 	bic.w	r2, r2, #1
 800a498:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2220      	movs	r2, #32
 800a49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e00f      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	69da      	ldr	r2, [r3, #28]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	bf0c      	ite	eq
 800a4ce:	2301      	moveq	r3, #1
 800a4d0:	2300      	movne	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d08d      	beq.n	800a3f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d101      	bne.n	800a4fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e027      	b.n	800a54c <HAL_UARTEx_DisableFifoMode+0x66>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2224      	movs	r2, #36	; 0x24
 800a508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0201 	bic.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a52a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e02d      	b.n	800a5cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2224      	movs	r2, #36	; 0x24
 800a57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0201 	bic.w	r2, r2, #1
 800a596:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f84f 	bl	800a650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e02d      	b.n	800a648 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2224      	movs	r2, #36	; 0x24
 800a5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0201 	bic.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f811 	bl	800a650 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d108      	bne.n	800a672 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a670:	e031      	b.n	800a6d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a672:	2310      	movs	r3, #16
 800a674:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a676:	2310      	movs	r3, #16
 800a678:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	0e5b      	lsrs	r3, r3, #25
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	0f5b      	lsrs	r3, r3, #29
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	7b3a      	ldrb	r2, [r7, #12]
 800a69e:	4911      	ldr	r1, [pc, #68]	; (800a6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a6a0:	5c8a      	ldrb	r2, [r1, r2]
 800a6a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6a6:	7b3a      	ldrb	r2, [r7, #12]
 800a6a8:	490f      	ldr	r1, [pc, #60]	; (800a6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a6aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	7b7a      	ldrb	r2, [r7, #13]
 800a6bc:	4909      	ldr	r1, [pc, #36]	; (800a6e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a6be:	5c8a      	ldrb	r2, [r1, r2]
 800a6c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6c4:	7b7a      	ldrb	r2, [r7, #13]
 800a6c6:	4908      	ldr	r1, [pc, #32]	; (800a6e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a6c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	0800ad68 	.word	0x0800ad68
 800a6e8:	0800ad70 	.word	0x0800ad70

0800a6ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6ec:	b084      	sub	sp, #16
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	f107 001c 	add.w	r0, r7, #28
 800a6fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	2b01      	cmp	r3, #1
 800a702:	d120      	bne.n	800a746 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a708:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	4b2a      	ldr	r3, [pc, #168]	; (800a7c0 <USB_CoreInit+0xd4>)
 800a716:	4013      	ands	r3, r2
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d105      	bne.n	800a73a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa60 	bl	800ac00 <USB_CoreReset>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
 800a744:	e01a      	b.n	800a77c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa54 	bl	800ac00 <USB_CoreReset>
 800a758:	4603      	mov	r3, r0
 800a75a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	639a      	str	r2, [r3, #56]	; 0x38
 800a76e:	e005      	b.n	800a77c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d116      	bne.n	800a7b0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a790:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <USB_CoreInit+0xd8>)
 800a792:	4313      	orrs	r3, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f043 0206 	orr.w	r2, r3, #6
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f043 0220 	orr.w	r2, r3, #32
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7bc:	b004      	add	sp, #16
 800a7be:	4770      	bx	lr
 800a7c0:	ffbdffbf 	.word	0xffbdffbf
 800a7c4:	03ee0000 	.word	0x03ee0000

0800a7c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f023 0201 	bic.w	r2, r3, #1
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a802:	78fb      	ldrb	r3, [r7, #3]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d106      	bne.n	800a816 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
 800a814:	e00b      	b.n	800a82e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d106      	bne.n	800a82a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60da      	str	r2, [r3, #12]
 800a828:	e001      	b.n	800a82e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e003      	b.n	800a836 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a82e:	2032      	movs	r0, #50	; 0x32
 800a830:	f7f7 fed8 	bl	80025e4 <HAL_Delay>

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a840:	b084      	sub	sp, #16
 800a842:	b580      	push	{r7, lr}
 800a844:	b086      	sub	sp, #24
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a84e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a85a:	2300      	movs	r3, #0
 800a85c:	613b      	str	r3, [r7, #16]
 800a85e:	e009      	b.n	800a874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	3340      	adds	r3, #64	; 0x40
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	2200      	movs	r2, #0
 800a86c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	3301      	adds	r3, #1
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b0e      	cmp	r3, #14
 800a878:	d9f2      	bls.n	800a860 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d11c      	bne.n	800a8ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88e:	f043 0302 	orr.w	r3, r3, #2
 800a892:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a898:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e005      	b.n	800a8c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d8:	4619      	mov	r1, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	680b      	ldr	r3, [r1, #0]
 800a8e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d10c      	bne.n	800a906 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d104      	bne.n	800a8fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f949 	bl	800ab8c <USB_SetDevSpeed>
 800a8fa:	e008      	b.n	800a90e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f944 	bl	800ab8c <USB_SetDevSpeed>
 800a904:	e003      	b.n	800a90e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a906:	2103      	movs	r1, #3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f93f 	bl	800ab8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a90e:	2110      	movs	r1, #16
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f8f3 	bl	800aafc <USB_FlushTxFifo>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d001      	beq.n	800a920 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f911 	bl	800ab48 <USB_FlushRxFifo>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a936:	461a      	mov	r2, r3
 800a938:	2300      	movs	r3, #0
 800a93a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	461a      	mov	r2, r3
 800a944:	2300      	movs	r3, #0
 800a946:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94e:	461a      	mov	r2, r3
 800a950:	2300      	movs	r3, #0
 800a952:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a954:	2300      	movs	r3, #0
 800a956:	613b      	str	r3, [r7, #16]
 800a958:	e043      	b.n	800a9e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a96c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a970:	d118      	bne.n	800a9a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10a      	bne.n	800a98e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a984:	461a      	mov	r2, r3
 800a986:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	e013      	b.n	800a9b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99a:	461a      	mov	r2, r3
 800a99c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	e008      	b.n	800a9b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d3b7      	bcc.n	800a95a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	613b      	str	r3, [r7, #16]
 800a9ee:	e043      	b.n	800aa78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa06:	d118      	bne.n	800aa3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	e013      	b.n	800aa4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa30:	461a      	mov	r2, r3
 800aa32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	e008      	b.n	800aa4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa46:	461a      	mov	r2, r3
 800aa48:	2300      	movs	r3, #0
 800aa4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	461a      	mov	r2, r3
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d3b7      	bcc.n	800a9f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aaa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d105      	bne.n	800aab4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f043 0210 	orr.w	r2, r3, #16
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	699a      	ldr	r2, [r3, #24]
 800aab8:	4b0e      	ldr	r3, [pc, #56]	; (800aaf4 <USB_DevInit+0x2b4>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f043 0208 	orr.w	r2, r3, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d105      	bne.n	800aae4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	699a      	ldr	r2, [r3, #24]
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <USB_DevInit+0x2b8>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaf0:	b004      	add	sp, #16
 800aaf2:	4770      	bx	lr
 800aaf4:	803c3800 	.word	0x803c3800
 800aaf8:	40000004 	.word	0x40000004

0800aafc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	019b      	lsls	r3, r3, #6
 800ab0e:	f043 0220 	orr.w	r2, r3, #32
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4a09      	ldr	r2, [pc, #36]	; (800ab44 <USB_FlushTxFifo+0x48>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d901      	bls.n	800ab28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e006      	b.n	800ab36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	f003 0320 	and.w	r3, r3, #32
 800ab30:	2b20      	cmp	r3, #32
 800ab32:	d0f0      	beq.n	800ab16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	00030d40 	.word	0x00030d40

0800ab48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2210      	movs	r2, #16
 800ab58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4a09      	ldr	r2, [pc, #36]	; (800ab88 <USB_FlushRxFifo+0x40>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d901      	bls.n	800ab6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e006      	b.n	800ab7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	f003 0310 	and.w	r3, r3, #16
 800ab74:	2b10      	cmp	r3, #16
 800ab76:	d0f0      	beq.n	800ab5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	00030d40 	.word	0x00030d40

0800ab8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abac:	4313      	orrs	r3, r2
 800abae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abd8:	f023 0303 	bic.w	r3, r3, #3
 800abdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abec:	f043 0302 	orr.w	r3, r3, #2
 800abf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4a13      	ldr	r2, [pc, #76]	; (800ac64 <USB_CoreReset+0x64>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d901      	bls.n	800ac1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e01b      	b.n	800ac56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	daf2      	bge.n	800ac0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f043 0201 	orr.w	r2, r3, #1
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <USB_CoreReset+0x64>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d901      	bls.n	800ac48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e006      	b.n	800ac56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d0f0      	beq.n	800ac36 <USB_CoreReset+0x36>

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	00030d40 	.word	0x00030d40

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4d0d      	ldr	r5, [pc, #52]	; (800aca0 <__libc_init_array+0x38>)
 800ac6c:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac6e:	1b64      	subs	r4, r4, r5
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	2600      	movs	r6, #0
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	4d0b      	ldr	r5, [pc, #44]	; (800aca8 <__libc_init_array+0x40>)
 800ac7a:	4c0c      	ldr	r4, [pc, #48]	; (800acac <__libc_init_array+0x44>)
 800ac7c:	f000 f82e 	bl	800acdc <_init>
 800ac80:	1b64      	subs	r4, r4, r5
 800ac82:	10a4      	asrs	r4, r4, #2
 800ac84:	2600      	movs	r6, #0
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800ad80 	.word	0x0800ad80
 800aca4:	0800ad80 	.word	0x0800ad80
 800aca8:	0800ad80 	.word	0x0800ad80
 800acac:	0800ad84 	.word	0x0800ad84

0800acb0 <memcpy>:
 800acb0:	440a      	add	r2, r1
 800acb2:	4291      	cmp	r1, r2
 800acb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800acb8:	d100      	bne.n	800acbc <memcpy+0xc>
 800acba:	4770      	bx	lr
 800acbc:	b510      	push	{r4, lr}
 800acbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acc6:	4291      	cmp	r1, r2
 800acc8:	d1f9      	bne.n	800acbe <memcpy+0xe>
 800acca:	bd10      	pop	{r4, pc}

0800accc <memset>:
 800accc:	4402      	add	r2, r0
 800acce:	4603      	mov	r3, r0
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d100      	bne.n	800acd6 <memset+0xa>
 800acd4:	4770      	bx	lr
 800acd6:	f803 1b01 	strb.w	r1, [r3], #1
 800acda:	e7f9      	b.n	800acd0 <memset+0x4>

0800acdc <_init>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	bf00      	nop
 800ace0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace2:	bc08      	pop	{r3}
 800ace4:	469e      	mov	lr, r3
 800ace6:	4770      	bx	lr

0800ace8 <_fini>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr
